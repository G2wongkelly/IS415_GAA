[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Wong Kelly",
    "section": "",
    "text": "Welcome to my IS415 Geospatial Analytics and Applications Webpage! :)\n Fun Fact: I LOVE MIFFY\nHello! Let me officially introduce myself! My name is Miffy and this is the course website of IS415 I study this term. You will find my course work publish on this website."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02.html",
    "href": "In_Class_Ex/In_Class_Ex02.html",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.\n\n\n\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate geospatial data wrangling methods to prepare the data for water point mapping study. For the purpose of this study, Nigeria will be used as the study country.\n\n\n\n\n\nFor the purpose of this assignment, data from WPdx Global Data Repositories will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set.\n\n\n\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The Humanitarian Data Exchange portal or geoBoundaries.\n\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.\nUsing appropriate tidyr and dplyr methods, derive the number of functional and non-functional water points at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nVisualising the distribution of water point by using appropriate statistical methods."
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02.html#getting-started",
    "href": "In_Class_Ex/In_Class_Ex02.html#getting-started",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "2. Getting started",
    "text": "2. Getting started\nFor the purpose of this in-class exercise, three R packages will be used. They are: sf, tidyverse and funModeling.\n\npacman::p_load(sf, tidyverse, funModeling)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02.html#handling-geospatial-data",
    "href": "In_Class_Ex/In_Class_Ex02.html#handling-geospatial-data",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "3. Handling Geospatial Data",
    "text": "3. Handling Geospatial Data\n\n3.1 Importing Geospatial\n\n3.1.1 The geoBoundaries data set\n\ngeoNGA <- st_read(\"data/geospatial/geoBoundaries-NGA-ADM2-all/\",\n                  layer = \"geoBoundaries-NGA-ADM2\") %>%\n  st_transform(crs = 26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\data\\geospatial\\geoBoundaries-NGA-ADM2-all' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\n3.1.2 The NGA data set\n\nNGA <- st_read(\"data/geospatial/nga_adm_osgof_20190417/\",\n               layer = \"geoBoundaries-NGA-ADM2\") %>%\n  st_transform(crs = 26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\data\\geospatial\\nga_adm_osgof_20190417' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nBy examining both sf dataframe closely, we notice that NGA provide both LGA and state information. Hence, NGA data.frame will be used for the subsequent processing.\n\n\n\n3.2 Importing Aspatial Data\n\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n\n\nRows: 406566 Columns: 70\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (43): #source, #report_date, #status_id, #water_source_clean, #water_sou...\ndbl (23): row_id, #lat_deg, #lon_deg, #install_year, #fecal_coliform_value, ...\nlgl  (4): #rehab_year, #rehabilitator, is_urban, latest_record\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n3.2.1 Converting water point data into sf point features\nConverting an aspatial data into an sf data.frame involves two steps.\nFirst, we need to convert the wkt field into sfc field by using st_as_sfc() data type.\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nNext, we will convert the tibble data.frame into an sf object by using st_sf(). It is also important for us to include the referencing system of the data into the sf object.\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\n\n3.2.2 Transforming into Nigeria projected coordinated system\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02.html#geospatial-data-cleaning",
    "href": "In_Class_Ex/In_Class_Ex02.html#geospatial-data-cleaning",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "4. Geospatial Data Cleaning",
    "text": "4. Geospatial Data Cleaning\nData cleaning is an important step in any data science task including geospatial data science. It is important for us to do our due deligent to check if any data quality issues occured in the data used."
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02.html#excluding-redundent-fields",
    "href": "In_Class_Ex/In_Class_Ex02.html#excluding-redundent-fields",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "4.1 Excluding redundent fields",
    "text": "4.1 Excluding redundent fields\nNGA sf data.frame consists of many redundent fields. The code chunk below uses select() of dplyr to retain column 3, 4, 8 and 9. Do you know why?"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html",
    "href": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.\n\n\n\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate geospatial data wrangling methods to prepare the data for water point mapping study. For the purpose of this study, Nigeria will be used as the study country.\n\n\n\n\n\nFor the purpose of this assignment, data from WPdx Global Data Repositories will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set.\n\n\n\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The Humanitarian Data Exchange portal or geoBoundaries.\n\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.\nUsing appropriate tidyr and dplyr methods, derive the number of functional and non-functional water points at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nVisualising the distribution of water point by using appropriate statistical methods."
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#getting-started",
    "href": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#getting-started",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2 Getting started",
    "text": "2 Getting started\nFor the purpose of this in-class exercise, three R packages will be used. They are: sf, tidyverse and funModeling.\n\n\n\n\n\n\nYour turn\n\n\n\nUsing the step you had learned, check if these three R packages have been installed in you laptop, if not install the missing R packages. If Yes, launch the R packages into R environment\n\n\n\n\n\nShow the code\npacman::p_load(sf, tidyverse, funModeling)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#handling-geospatial-data",
    "href": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#handling-geospatial-data",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "3 Handling Geospatial Data",
    "text": "3 Handling Geospatial Data\n\n3.1 Importing Geospatial\n\n\n\n\n\n\nYour turn\n\n\n\nUsing the step you had learned, import the LGA boundary GIS data of Nigeria downloaded from both sources recommend above.\n\n\n\n3.1.1 The geoBoundaries data set\n\n\n\nShow the code\ngeoNGA <- st_read(\"data/geospatial/\",\n                  layer = \"geoBoundaries-NGA-ADM2\") %>%\n  st_transform(crs = 26392)\n\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\n\n3.1.2 The NGA data set\n\n\n\nShow the code\nNGA <- st_read(\"data/geospatial/\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n  st_transform(crs = 26392)\n\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\nBy examining both sf dataframe closely, we notice that NGA provide both LGA and state information. Hence, NGA data.frame will be used for the subsequent processing.\n\n\n\n3.2 Importing Aspatial data\n\n\n\n\n\n\nYour turn\n\n\n\nUsing the steps you had learned, import the downloaded water point data set into R, at the same time select only water points within Nigeria.\n\n\n\n\n\nShow the code\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\n\n\n\n3.2.1 Converting water point data into sf point features\nConverting an aspatial data into an sf data.frame involves two steps.\nFirst, we need to convert the wkt field into sfc field by using st_as_sfc() data type.\n\n\n\n\n\n\nYour turn\n\n\n\nUsing the steps you had learned, convert the newly extracted wp_NGA into an sf data.frame\n\n\n\n\n\nShow the code\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\nNext, we will convert the tibble data.frame into an sf object by using st_sf(). It is also important for us to include the referencing system of the data into the sf object.\n\n\n\n\n\n\nYour turn\n\n\n\nUsing the steps you had learned, convert the newly extracted wp_NGA into an sf data.frame\n\n\n\n\n\nShow the code\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\n\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\n\n\n3.2.2 Transforming into Nigeria projected coordinate system\n\n\n\n\n\n\nYour turn\n\n\n\nUsing the steps you had learned, transform the projection from wgs84 to appropriate projected coordinate system of Nigeria.\n\n\n\n\n\nShow the code\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#geospatial-data-cleaning",
    "href": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#geospatial-data-cleaning",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "4 Geospatial Data Cleaning",
    "text": "4 Geospatial Data Cleaning\nData cleaning is an important step in any data science task including geospatial data science. It is important for us to do our due deligent to check if any data quality issues occured in the data used.\n\n4.1 Excluding redundent fields\nNGA sf data.frame consists of many redundent fields. The code chunk below uses select() of dplyr to retain column 3, 4, 8 and 9. Do you know why?\n\n\nNGA <- NGA %>%\n  select(c(3:4, 8:9))\n\n\n\n\n4.2 Checking for duplicate name\nIt is always important to check for duplicate name in the data main data fields. Using duplicated() of Base R, we can flag out LGA names that might be duplicated as shown in the code chunk below.\n\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\n\nThe printout above shows that there are 6 LGAs with the same name. A Google search using the coordinates showed that there are LGAs with the same name but are located in different states. For instances, there is a Bassa LGA in Kogi State and a Bassa LGA in Plateau State.\nLet us correct these errors by using the code chunk below.\n\n\nNGA$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA$ADM2_EN[519] <- \"Nasarawa, Kano\"\nNGA$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\nNGA$ADM2_EN[546] <- \"Obi, Benue\"\nNGA$ADM2_EN[547] <- \"Obi, Nasarawa\"\nNGA$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA$ADM2_EN[694] <- \"Surulere, Oyo\"\n\n\nNow, let us rerun the code chunk below to confirm that the duplicated name issue has been addressed.\n\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\ncharacter(0)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#excluding-redundent-fields",
    "href": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#excluding-redundent-fields",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "4.1 Excluding redundent fields",
    "text": "4.1 Excluding redundent fields\nNGA sf data.frame consists of many redundent fields. The code chunk below uses select() of dplyr to retain column 3, 4, 8 and 9. Do you know why?\n\nNGA <- NGA %>%\n  dplyr::select(3:4, 8:9)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#checking-for-duplicate-name",
    "href": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#checking-for-duplicate-name",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "4.2 Checking for duplicate name",
    "text": "4.2 Checking for duplicate name\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\nThe printout above shows that there are 6 LGAs with the same name. A Google search using the coordinates showed that there are LGAs with the same name but are located in different states. For instances, there is a Bassa LGA in Kogi State and a Bassa LGA in Plateau State.\nLet us correct these errors by using the code chunk below.\n\nNGA$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA$ADM2_EN[519] <- \"Nasarawa, Kano\"\nNGA$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\nNGA$ADM2_EN[546] <- \"Obi, Benue\"\nNGA$ADM2_EN[547] <- \"Obi, Nasarawa\"\nNGA$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA$ADM2_EN[694] <- \"Surulere, Oyo\"\n\nNow, let us rerun the code chunk below to confirm that the duplicated name issue has been addressed.\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\ncharacter(0)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#data-wrangling-for-water-point-data",
    "href": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#data-wrangling-for-water-point-data",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "5 Data Wrangling for Water Point Data",
    "text": "5 Data Wrangling for Water Point Data\nExploratory Data Analysis (EDA) is a popular approach to gain initial understanding of the data. In the code chunk below, freq() of funModeling package is used to reveal the distribution of water point status visually.\n\n\nfreq(data = wp_sf,\n     input = '#status_clean')\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                             <NA>     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\n\nFigure above shows that there are nine classes in the #status_clean fields.\nNext, code chunk below will be used to perform the following data wrangling tasksP - rename() of dplyr package is used to rename the column from #status_clean to status_clean for easier handling in subsequent steps. - select() of dplyr is used to include status_clean in the output sf data.frame. - mutate() and replace_na() are used to recode all the NA values in status_clean into unknown.\n\n\nwp_sf_nga <- wp_sf %>% \n  rename(status_clean = '#status_clean') %>%\n  select(status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\n\n\n\n5.1 Extracting Water Point Data\nNow we are ready to extract the water point data according to their status.\nThe code chunk below is used to extract functional water point.\n\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nThe code chunk below is used to extract nonfunctional water point.\n\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\n\nThe code chunk below is used to extract water point with unknown status.\n\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\n\nNext, the code chunk below is used to perform a quick EDA on the derived sf data.frames.\n\n\nfreq(data = wp_functional,\n     input = 'status_clean')\n\n\n\n\n                 status_clean frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\nfreq(data = wp_nonfunctional,\n     input = 'status_clean')\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.25           91.25\n2 Non-Functional due to dry season      2403       7.46           98.71\n3         Abandoned/Decommissioned       234       0.73           99.44\n4                        Abandoned       175       0.54           99.98\n5 Non functional due to dry season         7       0.02          100.00\n\nfreq(data = wp_unknown,\n     input = 'status_clean')\n\n\n\n\n  status_clean frequency percentage cumulative_perc\n1      unknown     10656        100             100\n\n\n\n\n\n5.2 Performing Point-in-Polygon Count\nNext, we want to find out the number of total, functional, nonfunctional and unknown water points in each LGA. This is performed in the following code chunk. First, it identifies the functional water points in each LGA by using st_intersects() of sf package. Next, length() is used to calculate the number of functional water points that fall inside each LGA.\n\n\nNGA_wp <- NGA %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(NGA, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)))\n\n\nNotice that four new derived fields have been added into NGA_wp sf data.frame.\n\n\n5.3 Visualing attributes by using statistical graphs\nIn this code chunk below, appropriate functions of ggplot2 package is used to reveal the distribution of total water points by LGA in histogram.\n\n\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\n\n\n5.4 Saving the analytical data in rds format\nIn order to retain the sf object structure for subsequent analysis, it is recommended to save the sf data.frame into rds format.\nIn the code chunk below, write_rds() of readr package is used to export an sf data.frame into rds format.\n\n\nwrite_rds(NGA_wp, \"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#extracting-water-point-data",
    "href": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#extracting-water-point-data",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "5.1 Extracting Water Point Data",
    "text": "5.1 Extracting Water Point Data\nNow we are ready to extract the water point data according to their status.\nThe code chunk below is used to extract functional water point.\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nThe code chunk below is used to extract nonfunctional water point.\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\nThe code chunk below is used to extract water point with unknown status.\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\nNext, the code chunk below is used to perform a quick EDA on the derived sf data.frames.\n\nfreq(data = wp_functional,\n     input = 'status_clean')\n\n\n\n\n                 status_clean frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\n\nfreq(data = wp_nonfunctional,\n     input = 'status_clean')\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.25           91.25\n2 Non-Functional due to dry season      2403       7.46           98.71\n3         Abandoned/Decommissioned       234       0.73           99.44\n4                        Abandoned       175       0.54           99.98\n5 Non functional due to dry season         7       0.02          100.00\n\n\n\nfreq(data = wp_unknown,\n     input = 'status_clean')\n\n\n\n\n  status_clean frequency percentage cumulative_perc\n1      unknown     10656        100             100"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#performing-point-in-polygon-count",
    "href": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#performing-point-in-polygon-count",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "5.2 Performing Point-in-Polygon Count",
    "text": "5.2 Performing Point-in-Polygon Count\nNext, we want to find out the number of total, functional, nonfunctional and unknown water points in each LGA. This is performed in the following code chunk. First, it identifies the functional water points in each LGA by using st_intersects() of sf package. Next, length() is used to calculate the number of functional water points that fall inside each LGA.\n\nNGA_wp <- NGA %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(NGA, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)))\n\nNotice that four new derived fields have been added into NGA_wp sf data.frame."
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#visualising-attributes-by-using-statistical-graphs",
    "href": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#visualising-attributes-by-using-statistical-graphs",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "5.3 Visualising attributes by using statistical graphs",
    "text": "5.3 Visualising attributes by using statistical graphs\nIn this code chunk below, appropriate functions of ggplot2 package is used to reveal the distribution of total water points by LGA in histogram.\n\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#saving-the-analytical-data-in-rds-format",
    "href": "In_Class_Ex/In_Class_Ex02/In_Class_Ex02.html#saving-the-analytical-data-in-rds-format",
    "title": "In Class Exercise 2: Geospatial Data Wrangling",
    "section": "5.4 Saving the analytical data in rds format",
    "text": "5.4 Saving the analytical data in rds format\nIn order to retain the sf object structure for subsequent analysis, it is recommended to save the sf data.frame into rds format.\nIn the code chunk below, write_rds() of readr package is used to export an sf data.frame into rds format.\n\nwrite_rds(NGA_wp, \"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex03/In_Class_Ex03.html",
    "href": "In_Class_Ex/In_Class_Ex03/In_Class_Ex03.html",
    "title": "In-class Exercise 3: Analytical Mapping",
    "section": "",
    "text": "pacman::p_load(tmap, tidyverse, sf)\n\n\nNGA_wp <- read_rds(\"data/NGA_wp.rds\")\n\n\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)\n\n\n\n\n\nNGA_wp <- NGA_wp %>%\n  drop_na()\n\n\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\nget.var <- function(vname,df) {\n  v <- df[vname] %>% \n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n\n\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}\n\n\nget.var <- function(vname,df) {\n  v <- df[vname] %>% st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n\n\nvar <- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nboxmap(\"wp_nonfunctional\", NGA_wp)\n\nWarning: Breaks contains positive and negative values. Better is to use\ndiverging scale instead, or set auto.palette.mapping to FALSE.\n\n\n\n\n\n\nNGA_wp <- NGA_wp %>%\n  mutate(wp_functional = na_if(\n    total_wp, total_wp < 0))"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex04/In_Class_Ex04.html",
    "href": "In_Class_Ex/In_Class_Ex04/In_Class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "{pacman::p_load(maptools, sf, raster, spatstat, tmap)}\n\nThings to learn from this code chunk. All explanations have to be outside the code chunk if not will encounter issues"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex04/In_Class_Ex04.html#importing-the-spatial-data",
    "href": "In_Class_Ex/In_Class_Ex04/In_Class_Ex04.html#importing-the-spatial-data",
    "title": "In-class Exercise 4",
    "section": "2. Importing the Spatial Data",
    "text": "2. Importing the Spatial Data\nAlways check the file by right clicking and check the projection system the dataset file is using\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>% st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex04\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ntmap_mode('view') #default (not more than 5 in assignment)\ntm_shape(childcare_sf)+ # data layer\n  tm_dots(alpha = 0.5, # different opacity - solid back to grey etc\n          size = 0.01) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n# 11 is the zoom out value (always smaller than the second value)\n# 14 is the zoom in value \n\n\n4.5.1 Converting sf data frames to sp’s Spatial* class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\n\n4.5.2 Converting the Spatial* class into generic sp format\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \n\n\n\n\n4.5.3 Converting the generic sp format into spatstat’s ppp format\nConvert to only x y coordinate in two columns form so that can use in analytics later on\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsg_owin <- as(sg_sp, \"owin\")\nplot(sg_owin)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex01/Take_Home_Ex01.html",
    "href": "Take_Home_Ex/Take_Home_Ex01/Take_Home_Ex01.html",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover geographical distribution of functional & non-functional water points in Osub State, Nigeria",
    "section": "",
    "text": "1. Overview\nWater is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\n\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.\n\n1.0 Objectives\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate spatial point patterns analysis methods to discover the geographical distribution of functional and non-function water points and their co-locations if any in Osun State, Nigeria.\n\n\n1.1 Data Acquisition\nApstial data\nFor the purpose of this assignment, data from WPdx Global Data Repositories will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set.\nGeospatial data\nThis study will focus of Osun State, Nigeria. The state boundary GIS data of Nigeria can be downloaded either from The Humanitarian Data Exchange portal or geoBoundaries.\n\n\n\n2. Getting started\n\n2.1 Installing and Loading the R packages\nFor take-home assignment 1, we will need to install the following packages:\n\npacman::p_load(sf, funModeling,maptools,raster, spatstat, tmap ,  tidyverse, sfdep)\n\nThe code chunk is to check that all the required packages are installed if not, install them.\n\nif (!require(sf)) {\ninstall.packages(\"sf\")\n}\nif (!require(funModeling)) {\ninstall.packages(\"funModeling\")\n}\nif (!require(maptools)) {\ninstall.packages(\"maptools\")\n}\nif (!require(raster)) {\ninstall.packages(\"raster\")\n}\nif (!require(spatstat)) {\ninstall.packages(\"spatstat\")\n}\nif (!require(tmap)) {\ninstall.packages(\"tmap\")\n}\nif (!require(tidyverse)) {\ninstall.packages(\"tidyverse\")\n}\n\n\n\n\n3. Data Wrangling: Geospatial Data & Aspatial Data\n\n3.1 Importing geoBoundaries Data into R\nIn this section of 3.1, st_read() of sf package will be used to import geospatial geoboundaries-NGA data set into R.\n\ngeoNGA <- st_read(\"data/geospatial/\",\n                  layer = \"geoBoundaries-NGA-ADM2\")\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nFrom the output message, we learn that:\n\nGeometry type of geoBoundaries dataset is multipolygon\n774 features and 5 fields\nAssigned CRS is WGS 84 (geographic coordinate system)\nDimension is XY\n\n\n\n3.2 Importing Geospatial NGA Data into R\nIn this section of 3.2, st_read() of sf package will be used to import geospatial NGA dataset into R.\nWe filter data to only Osun state as that is what we are interested in finding for this assignment!\n\nNGA <- st_read(\"data/geospatial/\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n  filter(ADM1_EN == \"Osun\") %>% \n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nFrom the output message, we learn that:\n\nGeometry type of NGA dataset is multipolygon\n774 features and 16 fields\nAssigned CRS is WGS 84 (geographic coordinate system)\nDimension is XY\n\nIn geospatial analytics, we need to transform the original data that is in geographic coordinate system (WGS) to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance and/or area measurements.\nTherefore, we need to transform NGA dataset to projected coordinate system by using st_transform() in sf package. (will be further elaborate in section 3.3.1 and 3.3.2)\nBy examining both sf dataframe closely, we notice that NGA provide both LGA and state information.\nHence, NGA data.frame will be used for the subsequent processing.\n\n\n3.3 Importing Aspatial Data into R\nIn this section of 3.3, read_csv() will be used to import asptial data set into R and we filter out only Nigeria, Osun data rows as those are what we interested in analysing for this project.\n\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_adm1` == \"Osun\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\n\n3.3.1 Converting Water Point Data into SF Point Features\nStep 1: Convert the wkt field into sfc field by using st_as_sfc() data type.\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 5,745 × 75\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 225950 Federal Minis…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P…\n 2 225524 Federal Minis…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P…\n 3 197014 Federal Minis…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan…\n 4 225173 Federal Minis…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P…\n 5 225843 Federal Minis…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P…\n 6 235508 Federal Minis…    7.15    4.64 04/27/… Yes     Protec… Well    Hand P…\n 7 197708 Federal Minis…    7.87    4.72 05/13/… Yes     Boreho… Well    Mechan…\n 8 195041 Federal Minis…    7.73    4.45 06/17/… Yes     Protec… Spring  <NA>   \n 9 225222 Federal Minis…    7.81    4.15 05/14/… Yes     Protec… Spring  Mechan…\n10 460770 GRID3             7.4     4.33 06/13/… Unknown Boreho… Well    <NA>   \n# … with 5,735 more rows, 66 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nStep 2: Convert the tibble data.frame into an sf object by using st_sf(). It is also important for us to include the referencing system of the data into the sf object.\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 5745 features and 74 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4.032004 ymin: 7.060309 xmax: 5.06 ymax: 8.061898\nGeodetic CRS:  WGS 84\n# A tibble: 5,745 × 75\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 225950 Federal Minis…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P…\n 2 225524 Federal Minis…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P…\n 3 197014 Federal Minis…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan…\n 4 225173 Federal Minis…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P…\n 5 225843 Federal Minis…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P…\n 6 235508 Federal Minis…    7.15    4.64 04/27/… Yes     Protec… Well    Hand P…\n 7 197708 Federal Minis…    7.87    4.72 05/13/… Yes     Boreho… Well    Mechan…\n 8 195041 Federal Minis…    7.73    4.45 06/17/… Yes     Protec… Spring  <NA>   \n 9 225222 Federal Minis…    7.81    4.15 05/14/… Yes     Protec… Spring  Mechan…\n10 460770 GRID3             7.4     4.33 06/13/… Unknown Boreho… Well    <NA>   \n# … with 5,735 more rows, 66 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\n\n3.3.2 Transforming into Nigeria Projected Coordinate System\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)\nwp_sf\n\nSimple feature collection with 5745 features and 74 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 177285.9 ymin: 340054.1 xmax: 291287.1 ymax: 450859.7\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 5,745 × 75\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 225950 Federal Minis…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P…\n 2 225524 Federal Minis…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P…\n 3 197014 Federal Minis…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan…\n 4 225173 Federal Minis…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P…\n 5 225843 Federal Minis…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P…\n 6 235508 Federal Minis…    7.15    4.64 04/27/… Yes     Protec… Well    Hand P…\n 7 197708 Federal Minis…    7.87    4.72 05/13/… Yes     Boreho… Well    Mechan…\n 8 195041 Federal Minis…    7.73    4.45 06/17/… Yes     Protec… Spring  <NA>   \n 9 225222 Federal Minis…    7.81    4.15 05/14/… Yes     Protec… Spring  Mechan…\n10 460770 GRID3             7.4     4.33 06/13/… Unknown Boreho… Well    <NA>   \n# … with 5,735 more rows, 66 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nFrom the output message, we learn that:\n\nGeometry type of NGA dataset is now point\n5745 features and 74 fields\nProjected CRS: Minna/Nigeria Mid Belt\nDimension: XY\n\nWe have successfully transformed the data!! :D\n\n\n\n\n4. Data Pre-Processing\nBefore we can visualise our dataset and do the necessary analysis, we have to do data cleaning which is an important step in any data science task including geospatial data science. Things to check in the dataset:\n\nInvalid geometries\nExclude redundancy\nMissing value\nDuplicate name\n\n\n4.1 Check for Invalid Geometries\n\nlength(which(st_is_valid(NGA) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(wp_sf) == FALSE))\n\n[1] 0\n\n\nFrom the above generated output message, there are no invalid geometries! Great!\n\n\n4.2 Exclude Redundancy\n\nNGA <- NGA %>%\n  select(c(3:4, 8:9))\n\n\n\n4.3 Check for Missing Value\n\nNGA[rowSums(is.na(NGA))!=0,]\n\nSimple feature collection with 0 features and 4 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: Minna / Nigeria Mid Belt\n[1] ADM2_EN    ADM2_PCODE ADM1_EN    ADM1_PCODE geometry  \n<0 rows> (or 0-length row.names)\n\n\nThe printout shows that there is zero missing value in the dataset!\n\n\n4.4 Check for Duplicate Name\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\ncharacter(0)\n\n\nGreat!\nNow, we are ready to analyse the dataset!\n\n\n\n5. Data Wrangling for Water Point Data\nExploratory Data Analysis (EDA) is a popular approach to gain initial understanding of the data.\nFirstly, we take a look at all the column names in wp_sf dataset and identify the column we need to plot status_clean frequency bar chart.\n\ncolnames(wp_sf)\n\n [1] \"row_id\"                      \"#source\"                    \n [3] \"#lat_deg\"                    \"#lon_deg\"                   \n [5] \"#report_date\"                \"#status_id\"                 \n [7] \"#water_source_clean\"         \"#water_source_category\"     \n [9] \"#water_tech_clean\"           \"#water_tech_category\"       \n[11] \"#facility_type\"              \"#clean_country_name\"        \n[13] \"#clean_adm1\"                 \"#clean_adm2\"                \n[15] \"#clean_adm3\"                 \"#clean_adm4\"                \n[17] \"#install_year\"               \"#installer\"                 \n[19] \"#rehab_year\"                 \"#rehabilitator\"             \n[21] \"#management_clean\"           \"#status_clean\"              \n[23] \"#pay\"                        \"#fecal_coliform_presence\"   \n[25] \"#fecal_coliform_value\"       \"#subjective_quality\"        \n[27] \"#activity_id\"                \"#scheme_id\"                 \n[29] \"#wpdx_id\"                    \"#notes\"                     \n[31] \"#orig_lnk\"                   \"#photo_lnk\"                 \n[33] \"#country_id\"                 \"#data_lnk\"                  \n[35] \"#distance_to_primary_road\"   \"#distance_to_secondary_road\"\n[37] \"#distance_to_tertiary_road\"  \"#distance_to_city\"          \n[39] \"#distance_to_town\"           \"water_point_history\"        \n[41] \"rehab_priority\"              \"water_point_population\"     \n[43] \"local_population_1km\"        \"crucialness_score\"          \n[45] \"pressure_score\"              \"usage_capacity\"             \n[47] \"is_urban\"                    \"days_since_report\"          \n[49] \"staleness_score\"             \"latest_record\"              \n[51] \"location_id\"                 \"cluster_size\"               \n[53] \"#clean_country_id\"           \"#country_name\"              \n[55] \"#water_source\"               \"#water_tech\"                \n[57] \"#status\"                     \"#adm2\"                      \n[59] \"#adm3\"                       \"#management\"                \n[61] \"#adm1\"                       \"New Georeferenced Column\"   \n[63] \"lat_deg_original\"            \"lat_lon_deg\"                \n[65] \"lon_deg_original\"            \"public_data_source\"         \n[67] \"converted\"                   \"count\"                      \n[69] \"created_timestamp\"           \"updated_timestamp\"          \n[71] \"#pay_clean\"                  \"#subjective_quality_clean\"  \n[73] \"is_duplicate\"                \"dataset_title\"              \n[75] \"Geometry\"                   \n\n\nNow, once we have the column name “#status_clean”, we use the “table” function to get the frequency of unique values in a vector.\nThis will return a frequency table with unique values in “wp_sf$‘#status_clean’ and their corresponding frequency. The”sort” function will sort the table based on the frequency.\n\nsort(table(wp_sf$\"#status_clean\"), decreasing = TRUE)\n\n\n               Functional            Non-Functional  Functional, needs repair \n                     2406                      2086                       259 \n      Non-Functional, dry    Functional, not in use  Abandoned/Decommissioned \n                      159                        64                        15 \nFunctional but not in use \n                        8 \n\n\nTo plot a bar chart based on the frequency table, use the “barplot” function in R.\nThe below code will create a bar plot of the frequency table, with the x-axis labeled “status_clean” and the y-axis labeled “Frequency”. The main title of the plot will be “Bar Plot of status_clean”.\n\n#Set the colour scheme for the bar\ncolors <- c(\"grey\",\"pink\",\"purple\",\"blue\",\"green\",\"yellow\")\n#Plot the frequency of status_clean in bar chart\nfreq_table <- sort(table(wp_sf$\"#status_clean\"), decreasing = TRUE)\nbarplot(freq_table, xlab = \"status_clean\", ylab = \"Frequency\", main = \"Bar Plot of status_clean\", col = colors)\n\n\n\n\nThe below code chunk will include percentage labels on the bar plot!\n\n# calculate the percentage of each status_clean value \nfreq_table_pct <- round(100* prop.table(freq_table),2)\n# plot the bar plot with the percentage labels \nbarplot(freq_table, xlab = \"status_clean\", ylab = \"Frequency\", main = \"Bar Plot of status_clean (Percentage)\", col = colors, las = 2)\ntext(x = 1:length(freq_table), y = freq_table + 0.5, labels = paste(freq_table_pct, \"%\"), pos = 3, cex = 0.7)\n\n\n\n\nNext, code chunk below will be used to perform the following data wrangling tasksP - rename() of dplyr package is used to rename the column from #status_clean to status_clean for easier handling in subsequent steps. mutate() and replace_na() are used to recode all the NA values in status_clean into unknown.\n\nwp_sf_nga <- wp_sf %>% \n  rename(status_clean = '#status_clean') %>%\n  select(status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\n\n\n5.1 Extracting Water Point Data\nNow we are ready to extract the water point data according to their status.\nThe code chunk below is used to extract functional water point.\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nThe code chunk below is used to extract nonfunctional water point.\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\nThe code chunk below is used to extract water point with unknown status.\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\n\n\n5.2 Performing Point-in-Polygon Count\nNext, we want to find out the number of total, functional, nonfunctional and unknown water points in each LGA. This is performed in the following code chunk.\nFirst, it identifies the functional water points in each LGA by using st_intersects() of sf package. Next, length() is used to calculate the number of functional water points that fall inside each LGA.\n\nNGA_wp <- NGA %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(NGA, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)))\n\nNotice that four new derived fields have been added into NGA_wp sf data.frame.\nWe can visualise the summary of NGA_wp sf dataframe in statistics forms such as mean, median, and max etc for both functional and nonfunctional by using summary() as shown in the code chunk below:\n\nsummary(NGA_wp)\n\n   ADM2_EN           ADM2_PCODE          ADM1_EN           ADM1_PCODE       \n Length:30          Length:30          Length:30          Length:30         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n          geometry     total_wp     wp_functional    wp_nonfunctional\n MULTIPOLYGON :30   Min.   : 60.0   Min.   : 14.00   Min.   : 17.0   \n epsg:26392   : 0   1st Qu.:134.0   1st Qu.: 50.50   1st Qu.: 46.5   \n +proj=tmer...: 0   Median :166.5   Median : 75.00   Median : 58.0   \n                    Mean   :182.9   Mean   : 77.20   Mean   : 65.9   \n                    3rd Qu.:212.0   3rd Qu.: 91.75   3rd Qu.: 86.5   \n                    Max.   :443.0   Max.   :249.00   Max.   :140.0   \n   wp_unknown   \n Min.   : 4.00  \n 1st Qu.:13.00  \n Median :22.00  \n Mean   :24.47  \n 3rd Qu.:32.75  \n Max.   :78.00  \n\n\n\n\n5.3 Visualising attributes by using statistical graphs\n\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\n\n5.3.1 Observation from Statistical graph of NGA waterpoints\n\nThe histogram is a right-skewed distribution where the long tail extends to the right whole most values cluster on the left, as shown above in section 5.3.\nThere are a few possible outliers in the above histogram and we can use the 1.5 interquartile range (IQR) criterion to check whether they can be considered as outliers.\n\nQ1 = 134 and Q3 = 212, which give an IQR = Q3-Q1 = 78\nQ1 - 1.5(IQR) = 134 - (1.5)(78) = 17\nQ3 + 1.5(IQR) = 212 + (1.5)(78) = 329\n\nThe 1.5(IQR) criterion tells us that any observation with water points that is below 17 or above 329 is considered a suspected outlier.\n\nWith that, we can conclude that there are three outliers in this histogram and those with an arrow above are the ones.\n\n\n\n\n5.4 Saving the analytical data in rds format\n\nwrite_rds(NGA_wp, \"data/rds/NGA_wp.rds\")\n\n\n\n\n6. Geospatial Mapping\n\n6.1 Basic Choropleth Mapping\nIn this section, will be plotting different choropleth maps to analyse the distribution of water point in Nigeria, Osun state.\n\ntmap_mode(\"plot\")\nqtm(NGA_wp, \n    fill = c(\"wp_functional\",\"wp_nonfunctional\", \"wp_unknown\"))\n\n\n\n\n\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total  water point by LGAs\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p2, p1, nrow = 1)\n\n\n\n\n\n6.1.1 Observation of the Distribution of Water Points in Nigeria, Osun state.\n\nFrom the map generated earlier in section 6.1 that shows the distribution of water points in Nigeria, Osun state according to their functionality. We observed a few things:\n\nAt first glance, non-functional water map has a higher intensity based on its colours spread compared to the other two maps on its right and left. That could means that non-functional water points are more widely spread in Nigeria, Osun state.\nOn the other hand, generally, functional water map has a least colours intensity spread compared to the other two maps. That could means that functional water points are less common/least spread in Nigeria, Osun state.\n\nIn conclusion, Nigeria, Osun state has a higher level of non-functional water than functional water.\n\n\n\n6.2 Choropleth Map for Rates: Deriving Proportion of Functional Water Points and Non-Functional Water Points\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\n\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\ntm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          title = \"Dependency ratio\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)\n\n\n\n\n\n\n6.3 Extreme Value Maps: Percentile Map\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\nStep 1: Exclude records with NA by using the code chunk below\n\nNGA_wp <- NGA_wp %>%\n  drop_na()\n\nStep 2: Creating customised classification and extracting values\n\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.2179487 0.2224103 0.2900820 0.4145480 0.5076962 0.6203446 0.6441441 \n\n\nStep 3: Creating the get.var function\nWe will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var <- function(vname,df) {\n  v <- df[vname] %>% \n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n\nStep 4: we will write a percentile mapping function by using the code chunk below.\n\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\nStep 5: Test drive the percentile mapping function\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n7. First-Order Spatial Point Patterns Analysis Methods\nVisualising the sf layers\nIt is always a good practice to plot the output sf layers on OSM layer to ensure that they have been imported properly and been projected on an appropriate projection system.\n\ntmap_mode(\"view\")\ntm_shape(wp_functional) +\n  tm_dots(alph = 0.5, \n          size=0.01,\n          border.col = \"blue\",\n          border.lwd = 0.5) +\n  tm_shape(wp_nonfunctional) +\n  tm_dots(alph = 0.5, \n          size=0.01,\n          border.col = \"yellow\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(8,12))\n\n\n\n\n\n\n\n7.1 Converting SF Data Frames to SP’s Spatial Class\nThe code chunk below uses as_Spatial() of sf package to convert the geospatial data from simple data feature data frame to sp’s Spatial* class.\n\nnga_sp <- as_Spatial(wp_sf_nga)\nnga_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 5745 \nextent      : 177285.9, 291287.1, 340054.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :             status_clean \nmin values  : Abandoned/Decommissioned \nmax values  :                  unknown \n\n\n\nnga_functional_sp <- as_Spatial(wp_functional)\nnga_functional_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2414 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :              status_clean \nmin values  :                Functional \nmax values  : Functional but not in use \n\n\n\nnga_nonfunctional_sp <- as_Spatial(wp_nonfunctional)\nnga_nonfunctional_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2101 \nextent      : 180539, 290546.5, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :             status_clean \nmin values  : Abandoned/Decommissioned \nmax values  :           Non-Functional \n\n\nNotice from the output message that the geospatial data wp_sf_nga, wp_functional, and wp_nonfunctional have all been converted to sp’s spatial* class now.\n\n\n7.2 Converting the Spatial* Class into Generic SP Format\nSpstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThe code chunk below converts the Spatial* class of NGA into generic sp object.\n\nnga_sp <- as(nga_sp, \"SpatialPoints\")\nnga_sp\n\nclass       : SpatialPoints \nfeatures    : 5745 \nextent      : 177285.9, 291287.1, 340054.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nnga_functional_sp <- as(nga_functional_sp, \"SpatialPoints\")\nnga_functional_sp\n\nclass       : SpatialPoints \nfeatures    : 2414 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nnga_nonfunctional_sp <- as(nga_nonfunctional_sp, \"SpatialPoints\")\nnga_nonfunctional_sp\n\nclass       : SpatialPoints \nfeatures    : 2101 \nextent      : 180539, 290546.5, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\n\n7.3 Converting the Generic SP Format into Spatstat’s ppp Format\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nnga_ppp <- as(nga_sp, \"ppp\")\nnga_ppp\n\nPlanar point pattern: 5745 points\nwindow: rectangle = [177285.9, 291287.05] x [340054.1, 450859.7] units\n\n\n\nnga_functional_ppp <- as(nga_functional_sp, \"ppp\")\nnga_functional_ppp\n\nPlanar point pattern: 2414 points\nwindow: rectangle = [177285.9, 290750.96] x [343128.1, 450859.7] units\n\n\n\nnga_nonfunctional_ppp <- as(nga_nonfunctional_sp, \"ppp\")\nnga_nonfunctional_ppp\n\nPlanar point pattern: 2101 points\nwindow: rectangle = [180538.96, 290546.54] x [340054.1, 450780.1] units\n\n\nLet us then plot nga_ppp and examine the different.\n\nplot(nga_ppp)\n\n\n\nplot(nga_functional_ppp)\n\n\n\nplot(nga_nonfunctional_ppp)\n\n\n\n\nWe can also look at the summary statistics of the newly created ppp object by using the code chunk below.\n\nsummary(nga_ppp)\n\nPlanar point pattern:  5745 points\nAverage intensity 4.547987e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [177285.9, 291287.05] x [340054.1, 450859.7] units\n                    (114000 x 110800 units)\nWindow area = 1.2632e+10 square units\n\n\nThere are no warning message about duplicates but let’s do a double check before moving on :)\n\nany(duplicated(nga_ppp))\n\n[1] FALSE\n\n\nFrom the generated output, we can confidently say that there is no duplication!\n7.4 Creating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Nigeria boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to convert nga SpatialPolygon object into owin object of spatstat.\nONLY NIGERIA - OSUN STATE**\n\nlibrary(sf)\nlibrary(spatstat)\n# Load the spatial point data\nnga_spp <- st_as_sf(NGA, coords = c(\"x\", \"y\"))\n# Convert the \"SpatialPoints\" object to a polygon format using st_cast()\nnga_poly <- st_cast(nga_spp, \"POLYGON\")\n# Extract the polygon geometry component of the \"sf\" object\nnga_geom <- st_geometry(nga_poly)\n# Convert the polygon geometry component to a list of polygon objects\nnga_list_poly <- as.list(nga_geom)\n# Create an \"owin\" object from the list of polyggon objects\nnga_owin <- as.owin(nga_spp)\n# Analyze the point pattern using spatstat functions\nplot(nga_owin)\n\n\n\n\nThe code chunk below is used to convert nga_geometry spatialpolygon object into owin object of spatstat.\nONLY NIGERIA**\n\nlibrary(sf)\nlibrary(spatstat)\n# Load the spatial point data\ngeometry_spp <- st_as_sf(geoNGA, coords = c(\"x\", \"y\"))\n# Convert the \"SpatialPoints\" object to a polygon format using st_cast()\nnga_poly <- st_cast(geometry_spp, \"POLYGON\")\n# Extract the polygon geometry component of the \"sf\" object\ngeom <- st_geometry(nga_poly)\n# Convert the polygon geometry component to a list of polygon objects\nnga_list_poly <- as.list(geom)\n#converting the spatial point into a projected coordinate system using the st_transform from the 'sf' package.\nnga_poly_proj <- st_transform(nga_poly, crs = \"+proj=utm +zone=30 +ellps=WGS84\")\n# Create an \"owin\" object from the list of polyggon objects\nnga_geometry_owin <- as.owin(nga_poly_proj)\n# Analyze the point pattern using spatstat functions\nplot(nga_geometry_owin)\n\n\n\n\n\nnga_ppp = nga_ppp[nga_owin]\nplot(nga_ppp)\n\n\n\n\n\n\n7.5 Kernel Density Estimation\nIn this section, we will learn how to compute the kernel density estimation (KDE). Some definitions:\n\nDensity: The amount of features or events per unit area\nDensity estimation: The construction of the density function from the observed data\nKernel: A window function fitted on each observation (weighted or unweighted) to determine the fraction of the observation used for density estimation at any location within the window\n\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\nkde_nga_bw <- density(nga_ppp,\n                      sigma=bw.diggle,\n                      edge=TRUE,\n                    kernel=\"gaussian\")\nkde_nga_functional_bw <- density(nga_functional_ppp,\n                      sigma=bw.diggle,\n                      edge=TRUE,\n                    kernel=\"gaussian\")\nkde_nga_nonfunctional_bw <- density(nga_nonfunctional_ppp,\n                      sigma=bw.diggle,\n                      edge=TRUE,\n                    kernel=\"gaussian\")\n\nThe plot() function of Base R is then used to display the kernel density derived.\n\nplot(kde_nga_bw)\n\n\n\nplot(kde_nga_functional_bw)\n\n\n\nplot(kde_nga_nonfunctional_bw)\n\n\n\n\n\nbw <- bw.diggle(nga_ppp)\nbw\n\n   sigma \n175.2226 \n\n\n\nbw_functional <-bw.diggle(nga_functional_ppp)\nbw_functional\n\n   sigma \n263.5313 \n\n\n\nbw_nonfunctional <-bw.diggle(nga_nonfunctional_ppp)\nbw_nonfunctional\n\n   sigma \n296.0087 \n\n\n\nnga_ppp.km <- rescale(nga_ppp, 100, \"km\")\n\n\nkde_nga.bw <- density(nga_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nkde_nga_functional.bw <- density(nga_functional_ppp, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nkde_nga_nonfunctional.bw <- density(nga_nonfunctional_ppp, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_nga.bw)\n\n\n\nplot(kde_nga_functional.bw)\n\n\n\nplot(kde_nga_nonfunctional.bw)\n\n\n\n\n\ngridded_kde_nga_bw <- as.SpatialGridDataFrame.im(kde_nga.bw)\nspplot(gridded_kde_nga_bw)\n\n\n\n\n\nkde_nga.bw_rastor<- raster(gridded_kde_nga_bw)\nkde_nga.bw_rastor\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 8.948485, 9.616045  (x, y)\nextent     : 1765.032, 2910.438, 3314.347, 4545.201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -6.500989e-17, 0.4183645  (min, max)\n\n\n\nprojection(kde_nga.bw_rastor) <- CRS(\"+init=EPSG:3414\")\nkde_nga.bw_rastor\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 8.948485, 9.616045  (x, y)\nextent     : 1765.032, 2910.438, 3314.347, 4545.201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -6.500989e-17, 0.4183645  (min, max)\n\n\n\ntm_shape(kde_nga.bw_rastor) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n7.5.1 Observations from Kernel Density Map\n\nDescribe the spatial patterns revealed by the kernel density map\n\nFrom the density map generated, we could tell that the distribution of water points are mostly distributed evenly across Nigeria, Osun state (between 0.10 to 0.15) with only a few spots that have higher intense colours (between 0.25 to 0.30).\nThere are still many areas in Nigeria, Osun state that have zero distribution of water points which means they do not have access to any water (0).\n\nHighlight the advantages of kernel density map over point map\n\nProvides a continuous surface that represents the estimated density of points at each location. This allows to see the overall distribution of water points acorss Nigeria, Osun state more precisely with high or low densities. In contrast, a point map simply displays individual points, which can make it difficult to see patterns in the data.\nHelp identify hot spots or areas of high concentration, which can be useful for identifying clusters of points or areas of interest. This can be particularly useful in this assignment to identify areas with high intensity of water points in Nigeria, Osun state.\nMore visually appealing and easier to interpret than a point map, especially when dealing with large numbers of points.\n\n\nIn conclusion, a kernel density map can provide a more accurate representation of the spatial distribution of points and can be more useful for identifying patterns and hot spots in the data. However, a point map can still be useful for exploring the individual points and for understanding the distribution at the local scale. The choice between a kernel density map and a point map often depends on the specific needs of the analysis and the type of data being analyzed.\n\n\n\n\n8. Second Spatial Point Patterns Analysis Methods\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis are test as follows:\nHo = The distribution of water points in Nigeria, Osun state are randomly distributed\nH1 = The distribution of water points in Nigeria, Osun sate are not randomly distributed\nConfidence level = 95%\n\n8.1 Analysing Spatial Point Process Using G-Function\nThe code chunk below is used to compute G-function using Gest() of spatat package.\n\nG_nga_functional = Gest(nga_functional_ppp, correction = \"border\")\nplot(G_nga_functional, xlim=c(0,1900))\n\n\n\n\n\nG_nga_nonfunctional = Gest(nga_nonfunctional_ppp, correction = \"border\")\nplot(G_nga_nonfunctional, xlim=c(0,1900))\n\n\n\n\n\n8.1.1 Performing Complete Spatial Randomness Test\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-function\n\nG_nga_functional.csr <- envelope(nga_functional_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nG_nga_nonfunctional.csr <- envelope(nga_nonfunctional_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_nga_functional.csr,xlim=c(0,1900))\n\n\n\nplot(G_nga_nonfunctional.csr,xlim=c(0,1900))\n\n\n\n\n\n\n8.1.2 Analysis of Spatial Point Pattern using G-Function\nThe G-function creates a graph of the “edge-corrected G-function”. The upper curve is the empirical distribution of nearest neighbor distances for the water points, adjusted for edge effects caused by a finite domain.\nThe lower curve shows the expected distribution for random uniform data of the same size on the same domain. The light-blue band is a 95% confidence envelope, which gives you a feeling for the variation due to random sampling.\nThe G line is above the envelope and spatial randomness line for both functional and non-functional G graphs therefore, the graphs indicate that there is no structure in the water point data and there is a complete spatial randomness.\nIn summary, I will accept my null hypothesis and reject the alternative hypothesis to conclude that the distribution of water points in Nigeria, Osun state are randomly distributed.\nG-function is useful for analyzing properties of spatial point patterns. This article compared tree data to a single instance of random uniform data. By using the SPP procedure, you can run a more complete analysis and obtain graphs and related statistics with minimal effort.\n\n\n\n8.2 Analysing Spatial Point Process Using L-Function\nAccording to lesson 4 slides,\n\nL(r) >0 indicates that the observed distribution is geographically concentrated\nL(r) <0 implies dispersion\nL(r) = 0 indicates complete spatial randomness(CRS)\n\n\nL_nga_functional = Lest(nga_functional_ppp, correction= \"Ripley\")\nplot(L_nga_functional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nL_nga_nonfunctional = Lest(nga_nonfunctional_ppp, correction= \"Ripley\")\nplot(L_nga_nonfunctional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nL_nga_nonfunctional.csr <- envelope(nga_nonfunctional_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nL_nga_functional.csr <- envelope(nga_functional_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_nga_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nplot(L_nga_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n8.2.1 Analysis of Spatial Point using L-Function\nFor distance more than 1000m, the L(d) - r function (black line) lies above the L(d) - r function at CRS (red line).\nTherefore, I will accept my null hypothesis and reject the alternative hypothesis to conclude that the distribution of water points in Nigeria, Osun state are randomly distributed.\nFor both functions (G&L), I will accept null hypothese and reject the alternative hypothesis.\n\n\n\n9. Spatial Correlation Analysis\nWhat is Local Colocation Quotients (LCLQ):\nA point event category A is colocated with point events of category B if it is surrounded by several point event category B within a specified distance.\nE.g.\n\nIn this assignment, we are interested to find out if the spatial distribution of functional and non-functional water points are independent from each other.\nTo confirm the observed spatial correlation pattern, a hypothesis test will be conducted. The hypothesis are test as follows:\nHo = The distribution of functional and non-functional water points are independent from each other\nH1 = The distribution of functional and non-functional water points are not independent from each other\nConfidence level = 95%\n\nwp_sf_clean <- wp_sf_nga %>%  filter(!status_clean=='unknown')\nnb = include_self(st_knn(st_geometry(wp_sf_clean), 6)) \nwt = st_kernel_weights(nb, wp_sf_clean, \"gaussian\", adaptive = TRUE)\nf = wp_sf_clean %>%\n  filter(status_clean == \"Functional\")\nA = f$status_clean\nnf = wp_sf_clean %>%\n  filter(status_clean == \"Non-Functional\")\nB = nf$status_clean\nLCLQ = local_colocation(A, B, nb, wt, 49)\nLCLQ_wp = cbind(wp_sf_clean, LCLQ)\n\nCode breakdown:\n\nThe code first filters the wp_sf_clean object to remove any entries with a “status_clean” of “unknown”.\nThen, it calculates the 6 nearest neighbors for each feature in the wp_sf_clean object using the st_knn function from the sf library and creates a weight matrix for each feature with the st_kernel_weights function, using a Gaussian kernel.\nNext, the code creates two separate objects, f and nf, which contain only the “Functional” and “Non-Functional” features from the wp_sf_clean object, respectively.\nThe local_colocation function is then applied to the two objects, using the nearest neighbor information and weight matrix calculated earlier, with a neighborhood size of 49. Finally, the output of the local_colocation function is combined with the wp_sf_clean object using cbind, creating a new object LCLQ_wp.\n\n\ntmap_mode(\"view\")\ntm_shape(NGA_wp) +\n  tm_polygons() +\n  tm_shape(LCLQ_wp) +\n  tm_dots(col = c(\"Non.Functional\"), \n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) +\n  tm_view(set.bounds = c(4,7,5,8),\n          set.zoom.limits = c(8, 13))\n\n\n\n\n\n\n\n9.1 Analysis of Spatial Correlation\nThe tool will determine, for each feature of the Category of Interest, whether the features of the Neighboring Category are more or less present in its neighborhood compared to the overall spatial distribution of the categories. For example, for each feature of category A, a resulting local colocation quotient (LCLQ) value of 1 means that you are as likely to have category B as a neighbor as you might expect. A LCLQ value greater than 1 means you are more likely (than random) to have B as a neighbor, and a LCLQ value less than 1 means that the feature of category A is less likely to have a category B point as your neighbor (than a random distribution).\nAccording to the map generated, the proportion of A (functional points) within the neighborhood of B (nonfunctional points) is higher than the global porportion of A, the colocation quotient is therefore high or based on the slides explanation, 99% of the point have a value of 1 which means that it is likely to have both functional and nonfunctional points collocate together.\nTherefore, I will reject the null hypothesis and accept the alternative hypothesis saying that the distribution of functional and non-functional water points are not independent from each other.\n\n\n\n10. References & Resources Used\nHere are the list of resources used in this analysis, as well as their links. Special thanks to Seniors work samples and Prof Kam for all the detailed explanations and clear documentary posted!! :))\nSection 5.3.1: https://bolt.mph.ufl.edu/6050-6052/unit-1/one-quantitative-variable-introduction/understanding-outliers/\nSection 7.5: https://gistbok.ucgis.org/bok-topics/kernels-and-density-estimation\nSection 8.1: https://blogs.sas.com/content/iml/2016/09/19/nearest-neighbor-distances.html\nSection 8.2.1: https://www.mattpeeples.net/modules/PointPattern.html\nSection 9.1: https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/colocationanalysis.htm"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01.html",
    "href": "Hands_on_Ex/Hands_on_Ex01.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to handle geospatial data in R by using sf package.\nBy the end of this hands-on exercise, you should acquire the following competencies:\n\ninstalling and loading sf and tidyverse packages into R environment,\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sf package,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01.html#data-acquisition",
    "href": "Hands_on_Ex/Hands_on_Ex01.html#data-acquisition",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.2 Data Acquisition",
    "text": "1.2 Data Acquisition\nData are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data. In this hands-on exercise, you are required to extract the necessary data sets from the following sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n1.2.1 Extracting the geospatial data sets\nNext, at the Hands-on_Ex01 folder, create a sub-folder called data. Then, inside the data sub-folder, create two sub-folders and name them geospatial and aspatial respectively.\nPlace Master Plan 2014 Subzone Boundary (Web), Pre-Schools Location and Cycling Path zipped files into geospatial sub-folder and unzipped them. Copy the unzipped files from their respective sub-folders and place them inside geospatial sub-folder.\n\n\n1.2.2 Extracting the aspatial data set\nNow, you will extract the downloaded listing data file. At Downloads folder, cut and paste listing.csv into aspatial sub-folder."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01.html#getting-started",
    "href": "Hands_on_Ex/Hands_on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.3 Getting Started",
    "text": "1.3 Getting Started\nIn this hands-on exercise, two R packages will be used. They are:\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nTidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\npacman::p_load(sf, tidyverse)\n\nWhat we can learn from the code chunk above:\n\np_load function pf pacman package is used to install and load sf and tidyverse pacages into R environment."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01.html#importing-geospatial-data",
    "href": "Hands_on_Ex/Hands_on_Ex01.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.4 Importing Geospatial Data",
    "text": "1.4 Importing Geospatial Data\nIn this section, you will learn how to import the following geospatial data into R by using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n1.4.1 Importing polygon feature data in shapefile format\nThe code chunk below uses st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame. Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: dsn to define the data path and layer to provide the shapefile name. Also note that no extension such as .shp, .dbf, .prj and .shx are needed.\n\nmpsz = st_read(dsn = \"data\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Hands_on_Ex\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n1.4.2 Importing polyline feature data in shapefile form\nThe code chunk below uses st_read() function of sf package to import CyclingPath shapefile into R as line feature data frame.\n\ncyclingpath = st_read(dsn = \"data\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Hands_on_Ex\\data' using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe message above reveals that there are a total of 1625 features and 2 fields in cyclingpath linestring feature data frame and it is in svy21 projected coordinates system too.\n\n\n1.4.3 Importing GIS data in kml format\nThe pre-schools-location-kml is in kml format. The code chunk below will be used to import the kml into R. Notice that in the code chunk below, the complete path and the kml file extension were provided.\n\npreschool = st_read(\"data/preschools-location.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Hands_on_Ex\\data\\preschools-location.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThe message above reveals that preschool is a point feature data frame. There are a total of 1359 features and 2 fields. Different from the previous two simple feature data frame, preschool is in wgs84 coordinates system."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands_on_Ex/Hands_on_Ex01.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.5 Checking the Content of A Simple Feature Data Frame",
    "text": "1.5 Checking the Content of A Simple Feature Data Frame\nIn this sub-section, you will learn different ways to retrieve information related to the content of a simple feature data frame.\n\n1.5.1 Working with st_geometry()\nThe column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry() as shown in the code chunk below.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nNotice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.\n\n\n1.5.2 Working with glimpse()\nBeside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find glimpse() of dplyr. very handy as shown in the code chunk below.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() report reveals the data type of each fields. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n1.5.3 Working with head()\nSometimes we would like to reveal complete information of a feature object, this is the job of head() of Base R\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01.html#plotting-the-geospatial-data",
    "href": "Hands_on_Ex/Hands_on_Ex01.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.6 Plotting the Geospatial Data",
    "text": "1.6 Plotting the Geospatial Data\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find plot() of R Graphic comes in very handy as shown in the code chunk below.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01.html#working-with-projection",
    "href": "Hands_on_Ex/Hands_on_Ex01.html#working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.7 Working with Projection",
    "text": "1.7 Working with Projection\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nIn this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.\n\n1.7.1 Assigning EPSG code to a simple feature data frame\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nThis is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\nIn order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the CSR again by using the code chunk below.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now.\n\n\n1.7.2 Transforming the projection of preschool from wgs84 to svy21.\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\nGeometry set for 1359 features Geometry type: POINT Dimension: XYZ Bounding box: xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134 z_range: zmin: 0 zmax: 0 Geodetic CRS: WGS 84 First 5 geometries:\nThis is a scenario that st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathemetically.\nLet us perform the projection transformation by using the code chunk below.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n\nNext, let us display the content of preschool3414 sf data frame as shown below.\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\nNotice that it is in svy21 projected coordinate system now. Furthermore, if you refer to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01.html#importing-and-converting-an-aspatial-data",
    "href": "Hands_on_Ex/Hands_on_Ex01.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.8 Importing and Converting An Aspatial Data",
    "text": "1.8 Importing and Converting An Aspatial Data\nIn practice, it is not unusual that we will come across data such as listing of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\nIn this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.\nFor the purpose of this exercise, the listings.csv data downloaded from AirBnb will be used.\n\n1.8.1 Importing the aspatial data\nSince listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.\n\nlistings <- read_csv(\"data/listings.csv\")\n\nRows: 3037 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() of Base R instead of glimpse() is used to do the job.\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,037 × 18\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat… 46437\n 2  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 3  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4 275343 Amazing… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    52\n 5 275344 15 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 6 289234 Booking…  367042 Belinda East R… Tampin…    1.34    104. Privat…   175\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    79\n 8 324945 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 9 330089 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n10 330095 10 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n# … with 3,027 more rows, 8 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>,\n#   number_of_reviews_ltm <dbl>, license <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighbourhood_group, ³​neighbourhood, ⁴​latitude, ⁵​longitude,\n#   ⁶​room_type\n\n\nThe output reveals that listing tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\n\n1.8.2 Creating a simple feature data frame from an aspatial data frame\nThe code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n\nThings to learn from the arguments above:\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nLet us examine the content of this newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 3,037\nColumns: 17\n$ id                             <dbl> 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           <chr> \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      <chr> \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            <chr> \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  <chr> \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 46437, 81, 81, 52, 49, 175, 79, 49, 55,…\n$ minimum_nights                 <dbl> 92, 92, 92, 60, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <dbl> 20, 24, 47, 22, 14, 12, 133, 17, 12, 4,…\n$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              <dbl> 0.15, 0.17, 0.33, 0.19, 0.11, 0.09, 1.0…\n$ calculated_host_listings_count <dbl> 6, 6, 6, 46, 46, 6, 7, 46, 46, 46, 6, 7…\n$ availability_365               <dbl> 242, 242, 305, 273, 281, 242, 365, 274,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 2, 1, 0, 0, 3, 2, 1, 1, 0, 0, …\n$ license                        <chr> NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POINT (…\n\n\nTable above shows the content of listing_sf. Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01.html#geoprocessing-with-sf-package",
    "href": "Hands_on_Ex/Hands_on_Ex01.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.9 Geoprocessing with sf package",
    "text": "1.9 Geoprocessing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, you will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\n1.9.1 Buffering\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nLastly, sum() of Base R will be used to derive the total land involved\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\nMission Accomplished!\n\n\n1.9.2 Point-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\nYou can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\nThe solution:\nFirstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below.\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01.html#explorotary-data-analysis-eda",
    "href": "Hands_on_Ex/Hands_on_Ex01.html#explorotary-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.10 Explorotary Data Analysis (EDA)",
    "text": "1.10 Explorotary Data Analysis (EDA)\nIn practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.\nFirstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\nIn the code chunk below, appropriate ggplot2 functions will be used.\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nThe solution:\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html",
    "title": "Hands-on Exersise 2: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called **tmap** package.\n\n\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#getting-started",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#getting-started",
    "title": "Hands-on Exersise 2: Choropleth Mapping with R",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#importing-data-into-r",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#importing-data-into-r",
    "title": "Hands-on Exersise 2: Choropleth Mapping with R",
    "section": "2.3 Importing Data into R",
    "text": "2.3 Importing Data into R\n\n2.3.1 The Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n2.3.2 Importing Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Hands_on_Ex\\Hands_on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n2.3.3 Importing Attribute Data into R\nNext, we will import respopagsex2000to2018.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 738492 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n2.3.4 Data Preparation\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n2.3.4.1 Data wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n2.3.4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exersise 2: Choropleth Mapping with R",
    "section": "2.4 Choropleth Mapping Geospatial Data Using tmap",
    "text": "2.4 Choropleth Mapping Geospatial Data Using tmap\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n2.4.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n2.4.2 Creating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n2.4.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n2.4.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n2.4.2.3 Drawing a choropleth map using tm_fill() and *tm_border()**\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n2.4.3 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n2.4.3.1 Plotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\n2.4.3.2 Plotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6540  0.7063  0.7712  0.7657 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n2.4.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n2.4.4.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\n2.4.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n2.4.5.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.4.5.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n2.4.5.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n2.4.6 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n2.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n2.4.6.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n2.4.6.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n2.4.7 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex01/Take_Home_Ex01.html#geospatial-data-cleaning",
    "href": "Take_Home_Ex/Take_Home_Ex01/Take_Home_Ex01.html#geospatial-data-cleaning",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover geographical distribution of functional & non-functional water points in Osub State, Nigeria",
    "section": "4. Geospatial Data Cleaning",
    "text": "4. Geospatial Data Cleaning"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex01/Take_Home_Ex01.html#excluding-redundent-fields",
    "href": "Take_Home_Ex/Take_Home_Ex01/Take_Home_Ex01.html#excluding-redundent-fields",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover geographical distribution of functional & non-functional water points in Osub State, Nigeria",
    "section": "4.1 Excluding redundent fields",
    "text": "4.1 Excluding redundent fields"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex05/In_Class_Ex05.html",
    "href": "In_Class_Ex/In_Class_Ex05/In_Class_Ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "pacman:: p_load(tidyverse,tmap,sf,sfdep)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex05/In_Class_Ex05.html#running-code",
    "href": "In_Class_Ex/In_Class_Ex05/In_Class_Ex05.html#running-code",
    "title": "In Class Exercise 5",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex05/data/stores.html",
    "href": "In_Class_Ex/In_Class_Ex05/data/stores.html",
    "title": "Kelly's IS415 GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex05/data/study_area.html",
    "href": "In_Class_Ex/In_Class_Ex05/data/study_area.html",
    "title": "Kelly's IS415 GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex05/In_Class_Ex05.html#importing-data",
    "href": "In_Class_Ex/In_Class_Ex05/In_Class_Ex05.html#importing-data",
    "title": "In-class Exercise 5",
    "section": "Importing Data",
    "text": "Importing Data\n\nstudyArea <- st_read(dsn=\"data\",\n                     layer=\"study_area\") %>%\n  st_transform(crs=3829)\n\nReading layer `study_area' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstores <- st_read(dsn=\"data\",\n                     layer=\"stores\") %>%\n  st_transform(crs=3829)\n\nReading layer `stores' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex05/In_Class_Ex05.html#visualising-the-sf-layers",
    "href": "In_Class_Ex/In_Class_Ex05/In_Class_Ex05.html#visualising-the-sf-layers",
    "title": "In-class Exercise 5",
    "section": "Visualising the sf layers",
    "text": "Visualising the sf layers\n\ntmap_mode(\"view\") \n\ntmap mode set to interactive viewing\n\ntm_shape(studyArea) + \n  tm_polygons() +\ntm_shape(stores)+ \n  tm_dots(col = \"Name\", \n          size = 0.01,\n          border.col = \"black\", \n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(12,16))"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex05/In_Class_Ex05.html#local-colocation-quotients-lclq",
    "href": "In_Class_Ex/In_Class_Ex05/In_Class_Ex05.html#local-colocation-quotients-lclq",
    "title": "In-class Exercise 5",
    "section": "Local Colocation Quotients (LCLQ)",
    "text": "Local Colocation Quotients (LCLQ)\n\nnb <- include_self(\n  st_knn(st_geometry(stores),6))\n\nwt <- st_kernel_weights(nb,\n                     stores,\n                     \"gaussian\",\n                     adaptive = TRUE)\n\n\nFamilyMart <- stores %>%\n  filter(Name == \"Family Mart\")\nA <- FamilyMart$Name\n\nSevenEleven <- stores %>%\n  filter(Name == \"7-Eleven\")\nB <- SevenEleven$Name\n\n\nLCLQ <- local_colocation(A,B,nb,wt,49)\n\n\nLCLQ_stores <- cbind(stores, LCLQ)\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(studyArea) + \n  tm_polygons() + \n  tm_shape(LCLQ_stores)+\n    tm_dots(col = \"X7.Eleven\",\n            size = 0.01,\n            border.col = \"black\",\n            border.lwd = 0.5) + \n  tm_view(set.zoom.limits = c(12,16))"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex06/In_Class_Ex06.html",
    "href": "In_Class_Ex/In_Class_Ex06/In_Class_Ex06.html",
    "title": "In-class Exercise 6: Spatial Weights: sfdep methods",
    "section": "",
    "text": "Installing and Loading the R packages\n\npacman:: p_load(tidyverse,tmap,sf,sfdep)\n\n\n\nThe Data\nFor the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are:\n\nHunan, a geospatial data set in ESRI shapefile format, and\nHunan_2012, an attribute data set in csv format\n\n\n\nImporting geospatial data\n\n#st_read is a sf function\nHunan <- st_read(dsn=\"data/geospatial\",\n                     layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting aspatial data\n\n#from the package read(r) in tidyverse\nHunan_2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\") \n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCombining both data frame by using left join\nNote that one have geometric column but the other dataset doesnt have.\nTherefore, the left input file should be one with sf dataframe and right input file should be normal csv file.\n\n# there is built in intelligence to identify there is common field between the two data sets however, always check the dataset if the column name and data are similar to join\n#R is case sensitive\nHunan_GDPPC <- left_join(Hunan,Hunan_2012)%>%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n#after joining, we just retain column 1-4, 7 and 15 only\n\n\n\nPlotting a choropleth map\n\ntmap_mode(\"plot\") \n\ntmap mode set to plotting\n\ntm_shape(Hunan_GDPPC) + #define spatial data you want\n  tm_fill(\"GDPPC\", \n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by district\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha=0.2)\n\n\n\n\n\n\nIdentify area neighbours\nBefore spatial weight matrix can be derived, the neighbours need to be identified first.\n\n\nContiguity neighbours method # redundant if you have the queen’s method\n\ncn_queen <- Hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry), #create a new field call nb and store the result of st_contiguity \n                            .before=1) #put nb newly created field as the first cloumn\n\nArguments:\nGeometry - an sf or sfc object\nqueen - default true\ninspect cn_queen data set\n#Using the steps you just learned, derive a contiguity neighbour list using Rook’s method\\\n\ncn_rook <- Hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         queen = FALSE,\n         .before = 1)\n\n\n\nComputing contiguity weights\n\nContiguity weights: Queen’s method\n\nwm_q <- Hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb),\n         .before = 1)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html",
    "href": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "",
    "text": "Since late December 2019, an outbreak of a novel coronavirus disease (COVID-19; previously known as 2019-nCoV) was reported in Wuhan, China, which had subsequently affected 210 countries worldwide. In general, COVID-19 is an acute resolved disease but it can also be deadly, with a 2% case fatality rate.\nThe COVID-19 vaccination in Indonesia is an ongoing mass immunisation in response to the COVID-19 pandemic in Indonesia. On 13 January 2021, the program commenced when President Joko Widodo was vaccinated at the presidential palace. In terms of total doses given, Indonesia ranks third in Asia and fifth in the world.\n\nAccording to wikipedia, as of 5 February 2023 at 18:00 WIB (UTC+7), 204,266,655 people had received the first dose of the vaccine and 175,131,893 people had been fully vaccinated; 69,597,474 of them had been inoculated with the booster or the third dose, while 1,585,164 had received the fourth dose. Jakarta has the highest percentage of population fully vaccinated with 103.46%, followed by Bali and Special Region of Yogyakarta with 85.45% and 83.02% respectively.\n\n\nDespite its compactness, the cumulative vaccination rate are not evenly distributed within DKI Jarkata. The question is where are the sub-districts with relatively higher number of vaccination rate and how they changed over time (July 2021 to June 2022).\nExploratory Spatial Data Analysis (ESDA) hold tremendous potential to address complex problems facing society. In this study, students are tasked to apply appropriate Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) to undercover the spatio-temporal trends of COVID-19 vaccination in DKI Jakarta."
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex07/In_Class_Ex07.html",
    "href": "In_Class_Ex/In_Class_Ex07/In_Class_Ex07.html",
    "title": "In-class Exercise 7",
    "section": "",
    "text": "Installing and Loading the R packages\n\npacman:: p_load(tidyverse,tmap,sf,sfdep, plotly,zoo)\n\n\n\nThe Data\nFor the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are:\n\nHunan, a geospatial data set in ESRI shapefile format, and\nHunan_2012, an attribute data set in csv format\n\n\n\nImporting geospatial data\n\n#st_read is a sf function\nHunan <- st_read(dsn=\"data/geospatial\",\n                     layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting aspatial data\n\n#from the package read(r) in tidyverse\nGDPPC <- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\nRows: 1496 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): County\ndbl (2): Year, GDPPC\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan <- left_join(Hunan,hunan2012)%>%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\nPlotting a choropleth map\n\ntmap_mode(\"plot\") \n\ntmap mode set to plotting\n\ntm_shape(hunan) + #define spatial data you want\n  tm_fill(\"GDPPC\", \n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by district\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha=0.2)\n\n\n\n\n\n\nStep 1: Deriving contiguity weights: Queen’s method\nIn the code chunk below, queen method is used to derive the contiguity weights.\n\nwm_q <- hunan %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n\nComputing Global Moran’I\n\nmoranI <- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\nComputing Global Moran’I\n\nglobal_moran_test(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nPerforming Global Morgan’I permutation test\n\nset.seed(1234)\n\n\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n\n# run simulation at 99 will be 100\n\nComputing local Moran’s I\n\nlisa <- wm_q %>%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim=99),\n    .before = 1) %>%\n  unnest(local_moran)\n#**unnest is important! (it is a list and need to unnest it to use the value)\nlisa\n\nSimple feature collection with 88 features and 20 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 21\n         ii        eii   var_ii    z_ii    p_ii p_ii_…¹ p_fol…² skewn…³ kurtosis\n      <dbl>      <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>    <dbl>\n 1 -0.00147  0.00177    4.18e-4 -0.158  0.874      0.82    0.41  -0.812  0.652  \n 2  0.0259   0.00641    1.05e-2  0.190  0.849      0.96    0.48  -1.09   1.89   \n 3 -0.0120  -0.0374     1.02e-1  0.0796 0.937      0.76    0.38   0.824  0.0461 \n 4  0.00102 -0.0000349  4.37e-6  0.506  0.613      0.64    0.32   1.04   1.61   \n 5  0.0148  -0.00340    1.65e-3  0.449  0.654      0.5     0.25   1.64   3.96   \n 6 -0.0388  -0.00339    5.45e-3 -0.480  0.631      0.82    0.41   0.614 -0.264  \n 7  3.37    -0.198      1.41e+0  3.00   0.00266    0.08    0.04   1.46   2.74   \n 8  1.56    -0.265      8.04e-1  2.04   0.0417     0.08    0.04   0.459 -0.519  \n 9  4.42     0.0450     1.79e+0  3.27   0.00108    0.02    0.01   0.746 -0.00582\n10 -0.399   -0.0505     8.59e-2 -1.19   0.234      0.28    0.14  -0.685  0.134  \n# … with 78 more rows, 12 more variables: mean <fct>, median <fct>,\n#   pysal <fct>, nb <nb>, wt <list>, NAME_2 <chr>, ID_3 <int>, NAME_3 <chr>,\n#   ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>, geometry <POLYGON [°]>, and\n#   abbreviated variable names ¹​p_ii_sim, ²​p_folded_sim, ³​skewness\n\n\n\nii is local moran i statistic\n#**mean and pysal should be the same (use either the mean/pysal-python library that is doing the same thing)\ndont worry too much about median\n\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha=0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nhigh positive autocorrelation concentrated at the green section\n\n\nVisualising p-value of local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"p_ii\") +\n  tm_borders(alpha=0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\n\n\n\nshould use p_ii_sim, p_ii is not a good one to use!Always use the one with several trial to ensure its more stable\n\n\nVisualising local Moran’s I\nshould have another class “insignificance” to complete but is not included in this map! (think about how to do in own take-home assignment) - answer in 10.7.4 from hands on exercise\nfor our own takehome assignment no need to do lisa but conduct g star, hot and cold spot!\n\nlisa_sig <- lisa %>%\n  filter(p_ii < 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  tm_shape(lisa_sig) + \n  tm_fill(\"mean\") +\n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n#hot and cold spot area analysis\nin general, we will use local G* (perm) to ensure that it is stable by conducting simulation\n\nHCSA <- wm_q %>%\n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim=99),\n    .before = 1) %>%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 17\n    gi_star   e_gi     var_gi  p_value p_sim p_fol…¹ skewn…² kurto…³ nb    wt   \n      <dbl>  <dbl>      <dbl>    <dbl> <dbl>   <dbl>   <dbl>   <dbl> <nb>  <lis>\n 1 -0.00567 0.0115 0.00000812  9.95e-1  0.82    0.41   1.03    1.23  <int> <dbl>\n 2 -0.235   0.0110 0.00000581  8.14e-1  1       0.5    0.912   1.05  <int> <dbl>\n 3  0.298   0.0114 0.00000776  7.65e-1  0.7     0.35   0.455  -0.732 <int> <dbl>\n 4  0.145   0.0121 0.0000111   8.84e-1  0.64    0.32   0.900   0.726 <int> <dbl>\n 5  0.356   0.0113 0.0000119   7.21e-1  0.64    0.32   1.08    1.31  <int> <dbl>\n 6 -0.480   0.0116 0.00000706  6.31e-1  0.82    0.41   0.364  -0.676 <int> <dbl>\n 7  3.66    0.0116 0.00000825  2.47e-4  0.02    0.01   0.909   0.664 <int> <dbl>\n 8  2.14    0.0116 0.00000714  3.26e-2  0.16    0.08   1.13    1.48  <int> <dbl>\n 9  4.55    0.0113 0.00000656  5.28e-6  0.02    0.01   1.36    4.14  <int> <dbl>\n10  1.61    0.0109 0.00000341  1.08e-1  0.18    0.09   0.269  -0.396 <int> <dbl>\n# … with 78 more rows, 7 more variables: NAME_2 <chr>, ID_3 <int>,\n#   NAME_3 <chr>, ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>,\n#   geometry <POLYGON [°]>, and abbreviated variable names ¹​p_folded_sim,\n#   ²​skewness, ³​kurtosis\n\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n#view will be interactive, plot will be fixed\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") +\n  tm_borders(alpha=0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nVisualising p-value of HCSA\n\n#they are not useful at all as we are more interested to find out those smaller than 0.05 but all these are more than that \ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") +\n  tm_borders(alpha=0.5) \n\n\n\n\nCreating a time series cube\n\nGDPPC_st <- spacetime(GDPPC, Hunan,\n                      .loc_col = \"County\",\n                      .time_col = \"Year\")\nGDPPC_st\n\nspacetime ────\n\n\nContext:`data`\n\n\n88 locations `County`\n\n\n17 time periods `Year`\n\n\n── data context ────────────────────────────────────────────────────────────────\n\n\n# A tibble: 1,496 × 3\n    Year County    GDPPC\n * <dbl> <chr>     <dbl>\n 1  2005 Longshan   3469\n 2  2005 Changsha  24612\n 3  2005 Wangcheng 14659\n 4  2005 Ningxiang 11687\n 5  2005 Liuyang   13406\n 6  2005 Zhuzhou    8546\n 7  2005 You       10944\n 8  2005 Chaling    8040\n 9  2005 Yanling    7383\n10  2005 Liling    11688\n# … with 1,486 more rows\n\n\n\nGDPPC_nb <- GDPPC_st %>%\n  activate(\"geometry\") %>%\n  mutate(\n    nb = include_self(st_contiguity(geometry)),\n    wt = st_weights(nb)\n  ) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n\nComputing Gi\n\ngi_stars <- GDPPC_nb %>%\n  group_by(Year) %>%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt, nsim = 99)) %>%\n  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#installing-and-loading-the-r-packages",
    "href": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#installing-and-loading-the-r-packages",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "3.1 Installing and Loading the R packages",
    "text": "3.1 Installing and Loading the R packages\n\npacman::p_load(sf, tmap,tidyverse, sfdep, plotly, zoo)\n\nThe R packages installed that we will be using for analysis are:\n\nsf: used for importing, managing, and processing geospatial data\ntidyverse: a collection of packages for data science tasks\ntmap: used for creating thematic maps, such as choropleth and bubble maps\nsfdep: An interface for ‘spdep’ to integrate with ‘sf’ objects and the ‘tidyverse’\nplotly: used for creating interactive and dynamic visualisations in R\nzoo: A popular package for working with time series data"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#importing-geospatial-data",
    "href": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#importing-geospatial-data",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "4.1 Importing Geospatial Data",
    "text": "4.1 Importing Geospatial Data\n\nbd_jakarta <- st_read(dsn=\"data/geospatial\",\n                     layer=\"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\")\n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84\n\n\nFrom the output message, we learn that:\n\nGeometry type is multipolygon\n269 features and 161 fields\nAssigned CRS is WGS 84 (geographic coordinate system)\nDimension is XY\n\n\n4.1.1 Geospatial Data Pre-Processing (Cleaning)\nSimilar to our take-home assignment 1, before we can visualise our datasets and do the necessary analysis, we have to do data cleaning which is an important step in any data science task including geospatial data science. Things to check:\n\nInvalid geometries\nMissing value\n\n(1) Invalid geometries\n\nlength(which(st_is_valid(bd_jakarta) == FALSE))\n\n[1] 0\n\n\n(2) Missing value\n\nbd_jakarta[rowSums(is.na(bd_jakarta))!=0,]\n\nSimple feature collection with 2 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.8412 ymin: -6.154036 xmax: 106.8612 ymax: -6.144973\nGeodetic CRS:  WGS 84\n    OBJECT_ID KODE_DESA             DESA   KODE    PROVINSI KAB_KOTA KECAMATAN\n243     25645  31888888     DANAU SUNTER 318888 DKI JAKARTA     <NA>      <NA>\n244     25646  31888888 DANAU SUNTER DLL 318888 DKI JAKARTA     <NA>      <NA>\n    DESA_KELUR JUMLAH_PEN JUMLAH_KK LUAS_WILAY KEPADATAN PERPINDAHA JUMLAH_MEN\n243       <NA>          0         0          0         0          0          0\n244       <NA>          0         0          0         0          0          0\n    PERUBAHAN WAJIB_KTP SILAM KRISTEN KHATOLIK HINDU BUDHA KONGHUCU KEPERCAYAA\n243         0         0     0       0        0     0     0        0          0\n244         0         0     0       0        0     0     0        0          0\n    PRIA WANITA BELUM_KAWI KAWIN CERAI_HIDU CERAI_MATI U0 U5 U10 U15 U20 U25\n243    0      0          0     0          0          0  0  0   0   0   0   0\n244    0      0          0     0          0          0  0  0   0   0   0   0\n    U30 U35 U40 U45 U50 U55 U60 U65 U70 U75 TIDAK_BELU BELUM_TAMA TAMAT_SD SLTP\n243   0   0   0   0   0   0   0   0   0   0          0          0        0    0\n244   0   0   0   0   0   0   0   0   0   0          0          0        0    0\n    SLTA DIPLOMA_I DIPLOMA_II DIPLOMA_IV STRATA_II STRATA_III BELUM_TIDA\n243    0         0          0          0         0          0          0\n244    0         0          0          0         0          0          0\n    APARATUR_P TENAGA_PEN WIRASWASTA PERTANIAN NELAYAN AGAMA_DAN PELAJAR_MA\n243          0          0          0         0       0         0          0\n244          0          0          0         0       0         0          0\n    TENAGA_KES PENSIUNAN LAINNYA GENERATED KODE_DES_1 BELUM_ MENGUR_ PELAJAR_\n243          0         0       0      <NA>       <NA>      0       0        0\n244          0         0       0      <NA>       <NA>      0       0        0\n    PENSIUNA_1 PEGAWAI_ TENTARA KEPOLISIAN PERDAG_ PETANI PETERN_ NELAYAN_1\n243          0        0       0          0       0      0       0         0\n244          0        0       0          0       0      0       0         0\n    INDUSTR_ KONSTR_ TRANSP_ KARYAW_ KARYAW1 KARYAW1_1 KARYAW1_12 BURUH BURUH_\n243        0       0       0       0       0         0          0     0      0\n244        0       0       0       0       0         0          0     0      0\n    BURUH1 BURUH1_1 PEMBANT_ TUKANG TUKANG_1 TUKANG_12 TUKANG__13 TUKANG__14\n243      0        0        0      0        0         0          0          0\n244      0        0        0      0        0         0          0          0\n    TUKANG__15 TUKANG__16 TUKANG__17 PENATA PENATA_ PENATA1_1 MEKANIK SENIMAN_\n243          0          0          0      0       0         0       0        0\n244          0          0          0      0       0         0       0        0\n    TABIB PARAJI_ PERANCA_ PENTER_ IMAM_M PENDETA PASTOR WARTAWAN USTADZ JURU_M\n243     0       0        0       0      0       0      0        0      0      0\n244     0       0        0       0      0       0      0        0      0      0\n    PROMOT ANGGOTA_ ANGGOTA1 ANGGOTA1_1 PRESIDEN WAKIL_PRES ANGGOTA1_2\n243      0        0        0          0        0          0          0\n244      0        0        0          0        0          0          0\n    ANGGOTA1_3 DUTA_B GUBERNUR WAKIL_GUBE BUPATI WAKIL_BUPA WALIKOTA WAKIL_WALI\n243          0      0        0          0      0          0        0          0\n244          0      0        0          0      0          0        0          0\n    ANGGOTA1_4 ANGGOTA1_5 DOSEN GURU PILOT PENGACARA_ NOTARIS ARSITEK AKUNTA_\n243          0          0     0    0     0          0       0       0       0\n244          0          0     0    0     0          0       0       0       0\n    KONSUL_ DOKTER BIDAN PERAWAT APOTEK_ PSIKIATER PENYIA_ PENYIA1 PELAUT\n243       0      0     0       0       0         0       0       0      0\n244       0      0     0       0       0         0       0       0      0\n    PENELITI SOPIR PIALAN PARANORMAL PEDAGA_ PERANG_ KEPALA_ BIARAW_ WIRASWAST_\n243        0     0      0          0       0       0       0       0          0\n244        0     0      0          0       0       0       0       0          0\n    LAINNYA_12 LUAS_DESA KODE_DES_3 DESA_KEL_1 KODE_12\n243          0         0       <NA>       <NA>       0\n244          0         0       <NA>       <NA>       0\n                          geometry\n243 MULTIPOLYGON (((106.8612 -6...\n244 MULTIPOLYGON (((106.8504 -6...\n\n\nFrom the output generated above, we can tell that there are two particulars rows with missing values for KAB_KOTA (City), KECAMATAN (District), and DESA_KELUR (Village), as well as other fields such as OBJECT_ID 25645 and 25646. Therefore, we will need to remove them from the data.\n\n#removes rows that have an NA value in DESA_KELUR\nbd_jakarta <- na.omit(bd_jakarta,c(\"DESA_KELUR\"))\n\n\n#re-run to check if there is anymore NA value\nbd_jakarta[rowSums(is.na(bd_jakarta))!=0,]\n\nSimple feature collection with 0 features and 161 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n  [1] OBJECT_ID  KODE_DESA  DESA       KODE       PROVINSI   KAB_KOTA  \n  [7] KECAMATAN  DESA_KELUR JUMLAH_PEN JUMLAH_KK  LUAS_WILAY KEPADATAN \n [13] PERPINDAHA JUMLAH_MEN PERUBAHAN  WAJIB_KTP  SILAM      KRISTEN   \n [19] KHATOLIK   HINDU      BUDHA      KONGHUCU   KEPERCAYAA PRIA      \n [25] WANITA     BELUM_KAWI KAWIN      CERAI_HIDU CERAI_MATI U0        \n [31] U5         U10        U15        U20        U25        U30       \n [37] U35        U40        U45        U50        U55        U60       \n [43] U65        U70        U75        TIDAK_BELU BELUM_TAMA TAMAT_SD  \n [49] SLTP       SLTA       DIPLOMA_I  DIPLOMA_II DIPLOMA_IV STRATA_II \n [55] STRATA_III BELUM_TIDA APARATUR_P TENAGA_PEN WIRASWASTA PERTANIAN \n [61] NELAYAN    AGAMA_DAN  PELAJAR_MA TENAGA_KES PENSIUNAN  LAINNYA   \n [67] GENERATED  KODE_DES_1 BELUM_     MENGUR_    PELAJAR_   PENSIUNA_1\n [73] PEGAWAI_   TENTARA    KEPOLISIAN PERDAG_    PETANI     PETERN_   \n [79] NELAYAN_1  INDUSTR_   KONSTR_    TRANSP_    KARYAW_    KARYAW1   \n [85] KARYAW1_1  KARYAW1_12 BURUH      BURUH_     BURUH1     BURUH1_1  \n [91] PEMBANT_   TUKANG     TUKANG_1   TUKANG_12  TUKANG__13 TUKANG__14\n [97] TUKANG__15 TUKANG__16 TUKANG__17 PENATA     PENATA_    PENATA1_1 \n[103] MEKANIK    SENIMAN_   TABIB      PARAJI_    PERANCA_   PENTER_   \n[109] IMAM_M     PENDETA    PASTOR     WARTAWAN   USTADZ     JURU_M    \n[115] PROMOT     ANGGOTA_   ANGGOTA1   ANGGOTA1_1 PRESIDEN   WAKIL_PRES\n[121] ANGGOTA1_2 ANGGOTA1_3 DUTA_B     GUBERNUR   WAKIL_GUBE BUPATI    \n[127] WAKIL_BUPA WALIKOTA   WAKIL_WALI ANGGOTA1_4 ANGGOTA1_5 DOSEN     \n[133] GURU       PILOT      PENGACARA_ NOTARIS    ARSITEK    AKUNTA_   \n[139] KONSUL_    DOKTER     BIDAN      PERAWAT    APOTEK_    PSIKIATER \n[145] PENYIA_    PENYIA1    PELAUT     PENELITI   SOPIR      PIALAN    \n[151] PARANORMAL PEDAGA_    PERANG_    KEPALA_    BIARAW_    WIRASWAST_\n[157] LAINNYA_12 LUAS_DESA  KODE_DES_3 DESA_KEL_1 KODE_12    geometry  \n<0 rows> (or 0-length row.names)\n\n\nGreat! The data now is cleaned with no missing values! :)\n\n\n4.1.2 Verifying & Data Transformation\n\n#retrieves the coordinate system of bd_jakarta\nst_crs(bd_jakarta)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nAccording to the output message above, we learn that the current assigned coordinate system is WGS 84, the “World Geodetic System 1984”. However, in the context of this data set, it is an Indonesian-specific geospatial data set. Therefore, we should be using the national CRS of Indonesia, DGN95, the “Datum Geodesi Nasional 1995”, ESPG code 23845. Let’s rectify that:\n\n#transform WGS84 to DGN95, ESPG code 23845\nbd_jakarta <- st_transform(bd_jakarta, 23845)\nst_crs(bd_jakarta)\n\nCoordinate Reference System:\n  User input: EPSG:23845 \n  wkt:\nPROJCRS[\"DGN95 / Indonesia TM-3 zone 54.1\",\n    BASEGEOGCRS[\"DGN95\",\n        DATUM[\"Datum Geodesi Nasional 1995\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4755]],\n    CONVERSION[\"Indonesia TM-3 zone 54.1\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",139.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9999,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",200000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",1500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre.\"],\n        AREA[\"Indonesia - onshore east of 138°E.\"],\n        BBOX[-9.19,138,-1.49,141.01]],\n    ID[\"EPSG\",23845]]\n\n\nFrom the above output message, we can tell that the original coordinate system (WGS 84) has been successfully transformed to Indonesia coordinate system (DGN 95).\nNow, let’s plot the geometry to quickly visualise the data.\n\n\n4.1.3 Verifying & Removing Outer Islands\n\nplot(st_geometry(bd_jakarta))\n\n\n\n\nAs we can see, bd_jakarta includes both the mainland and the outer islands. However, in the context of this assignment, we are not interested in the outer islands. Therefore, we can eliminate them out.\nWe will first output the unique values of PROVINSE (province) and KAB_KOTA (city) fields to inspect the distribution of clusters.\n\n# outputs unique values of province and city fields\nunique(bd_jakarta$\"PROVINSI\")\n\n[1] \"DKI JAKARTA\"\n\nunique(bd_jakarta$\"KAB_KOTA\")\n\n[1] \"JAKARTA BARAT\"    \"JAKARTA PUSAT\"    \"KEPULAUAN SERIBU\" \"JAKARTA UTARA\"   \n[5] \"JAKARTA TIMUR\"    \"JAKARTA SELATAN\" \n\n\nNoticed from the output message above, the province are the same for all rows. However, as for KAB_KOTA, cities of Jakarta, realised that most of the cities have a JAKARTA prefix except for KEPULAUAN SERIBU (translated to ‘Thousand Islands’) refers to the outer islands. Just to check, we will plot the geometry of the geospatial data set once again with cluster of colours.\n\ntm_shape(bd_jakarta) +\n  tm_polygons(\"KAB_KOTA\")\n\n\n\n\nNow we can clearly identify the outer islands and they are the “orange” mini clusters spreading outside the main islands. We will then remove them from our data set:\n\nbd_jakarta <- filter(bd_jakarta , KAB_KOTA != \"KEPULAUAN SERIBU\")\n\nLet us check if they are removed by plotting the map again!\n\ntm_shape(bd_jakarta) +\n  tm_polygons(\"KAB_KOTA\")\n\n\n\n\nYes! we have successfully excluded the outer islands from the map and left us with only the mainland which are the cities that start with the “JAKARTA” prefix.\n\n\n4.1.4 Retaining relevant columns & Renaming them with translation (English)\nThere are too many columns in the date file bd_jakarta and we will need to only retain the fields that are relevant to our analysis which are the first 9 fields in the bd_jakarta data frame.\n\n# Retain only the first 9 fields of bd_jakarta\nbd_jakarta <- bd_jakarta[, 0:9]\n\nNext, we need to also rename the retained columns to English language for ease of understanding for analysis later.\n\nbd_jakarta <- bd_jakarta %>% \n  dplyr::rename(\n    Object_ID=OBJECT_ID,\n    Province=PROVINSI, \n    City=KAB_KOTA, \n    District=KECAMATAN, \n    Village_Code=KODE_DESA, \n    Village=DESA, \n    Sub_District=DESA_KELUR,\n    Code=KODE, \n    Total_Population=JUMLAH_PEN\n    )\n\nWe are done with our Geospatial data processing and now let’s move on the Aspatial data!"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#importing-aspatial-data",
    "href": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#importing-aspatial-data",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "4.2 Importing Aspatial Data",
    "text": "4.2 Importing Aspatial Data\nIn our “data/aspatial” folder, we have multiple sub-district level data of COVID-19 cases in DKI Jarkata between July 2021 to June 2022. Therefore, we would want to find a more efficient way to import all of them instead of one by one.\nIn the code chunk below, we first use list.files() function to get a list of all CSV files in the directory data/aspatial/. Then, we use the lapply() function to read each file in the list using read_csv() and store the resulting data frames in a list named data_list. Finally, we use do.call() function to combine all the data frames in the list into one large data frame named result_file.\n\ncsv_files <- list.files(path = \"data/aspatial/\", pattern = \"*.csv\")\n\n# read all CSV files into a list of data frames\ndata_list <- lapply(csv_files, function(file) {\n  read_csv(paste(\"data/aspatial/\", file, sep = \"\"))\n})\n\n\n4.2.1 Data Pre-Processing (Cleaning)\n\n#Take a quick glance of all the data sets in the list of imported aspatial files\ndata_list\n\n[[1]]\n# A tibble: 268 × 34\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ JUMLA…⁸\n           <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1            NA <NA>    8941211 TOTAL   8941211 1481006 7460205 6684941 1886300\n 2    3172051003 JAKART… PADEMA… ANCOL     23947    4518   19429   16915    4266\n 3    3173041007 JAKART… TAMBORA ANGKE     29381    5181   24200   21004    6227\n 4    3175041005 JAKART… KRAMAT… BALE K…   29074    5774   23300   20129    4237\n 5    3175031003 JAKART… JATINE… BALI M…    9752    1620    8132    7334    2202\n 6    3175101006 JAKART… CIPAYU… BAMBU …   26285    3941   22344   20353    5381\n 7    3174031002 JAKART… MAMPAN… BANGKA    21566    3889   17677   15884    3936\n 8    3175051002 JAKART… PASAR … BARU      23886    3214   20672   18991    7056\n 9    3175041004 JAKART… KRAMAT… BATU A…   47898    9150   38748   33966    8249\n10    3171071002 JAKART… TANAH … BENDUN…   21494    3692   17802   16229    5626\n# … with 258 more rows, 25 more variables: `TOTAL VAKSIN\\nDIBERIKAN` <dbl>,\n#   `LANSIA\\nDOSIS 1` <dbl>, `LANSIA\\nDOSIS 2` <dbl>, `LANSIA\\nDOSIS 3` <dbl>,\n#   `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <dbl>, `PELAYAN PUBLIK\\nDOSIS 1` <dbl>,\n#   `PELAYAN PUBLIK\\nDOSIS 2` <dbl>, `PELAYAN PUBLIK\\nDOSIS 3` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 3` <dbl>, …\n\n[[2]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n           <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1            NA <NA>    <NA>    TOTAL   8941211 4399496 4541715 1686820 6228535\n 2    3172051003 JAKART… PADEMA… ANCOL     23947   12155   11792    4268   16060\n 3    3173041007 JAKART… TAMBORA ANGKE     29381   13727   15654    4905   20559\n 4    3175041005 JAKART… KRAMAT… BALE K…   29074   18226   10848    3712   14560\n 5    3175031003 JAKART… JATINE… BALI M…    9752    4987    4765    2036    6801\n 6    3175101006 JAKART… CIPAYU… BAMBU …   26285   13716   12569    5242   17811\n 7    3174031002 JAKART… MAMPAN… BANGKA    21566   10232   11334    4089   15423\n 8    3175051002 JAKART… PASAR … BARU      23886    9999   13887    6150   20037\n 9    3175041004 JAKART… KRAMAT… BATU A…   47898   28381   19517    7375   26892\n10    3171071002 JAKART… TANAH … BENDUN…   21494    9895   11599    4662   16261\n# … with 258 more rows, 18 more variables: `LANSIA\\nDOSIS 1` <dbl>,\n#   `LANSIA\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\nDOSIS 2` <dbl>, …\n\n[[3]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n           <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1            NA <NA>    <NA>    TOTAL   8941211 1718787 7222424 6185453  1.34e7\n 2    3172051003 JAKART… PADEMA… ANCOL     23947    5514   18433   15487  3.39e4\n 3    3173041007 JAKART… TAMBORA ANGKE     29381    5968   23413   19433  4.28e4\n 4    3175041005 JAKART… KRAMAT… BALE K…   29074    6779   22295   18123  4.04e4\n 5    3175031003 JAKART… JATINE… BALI M…    9752    1916    7836    6780  1.46e4\n 6    3175101006 JAKART… CIPAYU… BAMBU …   26285    4596   21689   18730  4.04e4\n 7    3174031002 JAKART… MAMPAN… BANGKA    21566    4339   17227   14724  3.20e4\n 8    3175051002 JAKART… PASAR … BARU      23886    3769   20117   17822  3.79e4\n 9    3175041004 JAKART… KRAMAT… BATU A…   47898   10965   36933   30729  6.77e4\n10    3171071002 JAKART… TANAH … BENDUN…   21494    4174   17320   15147  3.25e4\n# … with 258 more rows, 18 more variables: `LANSIA\\nDOSIS 1` <dbl>,\n#   `LANSIA\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\nDOSIS 2` <dbl>, …\n\n[[4]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n           <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1            NA <NA>    <NA>    TOTAL   8941211 1536737 7404474 6521332  1.39e7\n 2    3172051003 JAKART… PADEMA… ANCOL     23947    4640   19307   16501  3.58e4\n 3    3173041007 JAKART… TAMBORA ANGKE     29381    5385   23996   20474  4.45e4\n 4    3175041005 JAKART… KRAMAT… BALE K…   29074    5958   23116   19476  4.26e4\n 5    3175031003 JAKART… JATINE… BALI M…    9752    1674    8078    7179  1.53e4\n 6    3175101006 JAKART… CIPAYU… BAMBU …   26285    4075   22210   19982  4.22e4\n 7    3174031002 JAKART… MAMPAN… BANGKA    21566    3989   17577   15535  3.31e4\n 8    3175051002 JAKART… PASAR … BARU      23886    3392   20494   18590  3.91e4\n 9    3175041004 JAKART… KRAMAT… BATU A…   47898    9505   38393   33001  7.14e4\n10    3171071002 JAKART… TANAH … BENDUN…   21494    3811   17683   15879  3.36e4\n# … with 258 more rows, 18 more variables: `LANSIA\\nDOSIS 1` <dbl>,\n#   `LANSIA\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\nDOSIS 2` <dbl>, …\n\n[[5]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n           <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1            NA <NA>    <NA>    TOTAL   8941211 1620250 7320961 6375344  1.37e7\n 2    3172051003 JAKART… PADEMA… ANCOL     23947    5049   18898   16011  3.49e4\n 3    3173041007 JAKART… TAMBORA ANGKE     29381    5616   23765   20035  4.38e4\n 4    3175041005 JAKART… KRAMAT… BALE K…   29074    6320   22754   18951  4.17e4\n 5    3175031003 JAKART… JATINE… BALI M…    9752    1780    7972    7009  1.50e4\n 6    3175101006 JAKART… CIPAYU… BAMBU …   26285    4368   21917   19414  4.13e4\n 7    3174031002 JAKART… MAMPAN… BANGKA    21566    4167   17399   15151  3.26e4\n 8    3175051002 JAKART… PASAR … BARU      23886    3576   20310   18249  3.86e4\n 9    3175041004 JAKART… KRAMAT… BATU A…   47898   10137   37761   32059  6.98e4\n10    3171071002 JAKART… TANAH … BENDUN…   21494    3989   17505   15548  3.31e4\n# … with 258 more rows, 18 more variables: `LANSIA\\nDOSIS 1` <dbl>,\n#   `LANSIA\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\nDOSIS 2` <dbl>, …\n\n[[6]]\n# A tibble: 268 × 21\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n           <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1            NA <NA>    <NA>    TOTAL   7739060 5041111 2696017 1181740 3877757\n 2    3172051003 JAKART… PADEMA… ANCOL     20393   13272    7114    3287   10401\n 3    3173041007 JAKART… TAMBORA ANGKE     25785   16477    9299    3221   12520\n 4    3175041005 JAKART… KRAMAT… BALE K…   25158   18849    6301    2644    8945\n 5    3175031003 JAKART… JATINE… BALI M…    8683    5743    2937    1517    4454\n 6    3175101006 JAKART… CIPAYU… BAMBU …   22768   15407    7357    3985   11342\n 7    3174031002 JAKART… MAMPAN… BANGKA    18930   12503    6421    2704    9125\n 8    3175051002 JAKART… PASAR … BARU      20267   11268    8982    4674   13656\n 9    3175041004 JAKART… KRAMAT… BATU A…   41389   30358   11020    5254   16274\n10    3171071002 JAKART… TANAH … BENDUN…   19008   11502    7499    3566   11065\n# … with 258 more rows, 12 more variables: `LANSIA\\nDOSIS 1` <dbl>,\n#   `LANSIA\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\nDOSIS 2` <dbl>, …\n\n[[7]]\n# A tibble: 268 × 34\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ JUMLA…⁸\n           <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1            NA <NA>    <NA>    TOTAL   8941211 1444901 7496310 6744379 2894577\n 2    3172051003 JAKART… PADEMA… ANCOL     23947    4440   19507   17077    7041\n 3    3173041007 JAKART… TAMBORA ANGKE     29381    5083   24298   21186    9520\n 4    3175041005 JAKART… KRAMAT… BALE K…   29074    5671   23403   20374    7055\n 5    3175031003 JAKART… JATINE… BALI M…    9752    1588    8164    7414    3428\n 6    3175101006 JAKART… CIPAYU… BAMBU …   26285    3824   22461   20532    8724\n 7    3174031002 JAKART… MAMPAN… BANGKA    21566    3803   17763   15995    5848\n 8    3175051002 JAKART… PASAR … BARU      23886    3146   20740   19139    9808\n 9    3175041004 JAKART… KRAMAT… BATU A…   47898    8984   38914   34345   13022\n10    3171071002 JAKART… TANAH … BENDUN…   21494    3607   17887   16350    8118\n# … with 258 more rows, 25 more variables: `TOTAL VAKSIN\\nDIBERIKAN` <dbl>,\n#   `LANSIA\\nDOSIS 1` <dbl>, `LANSIA\\nDOSIS 2` <dbl>, `LANSIA\\nDOSIS 3` <dbl>,\n#   `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <dbl>, `PELAYAN PUBLIK\\nDOSIS 1` <dbl>,\n#   `PELAYAN PUBLIK\\nDOSIS 2` <dbl>, `PELAYAN PUBLIK\\nDOSIS 3` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 3` <dbl>, …\n\n[[8]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n           <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1            NA <NA>    <NA>    TOTAL   8941211 1516200 7425011 6597093  1.40e7\n 2    3172051003 JAKART… PADEMA… ANCOL     23947    4590   19357   16698  3.61e4\n 3    3173041007 JAKART… TAMBORA ANGKE     29381    5315   24066   20748  4.48e4\n 4    3175041005 JAKART… KRAMAT… BALE K…   29074    5897   23177   19784  4.30e4\n 5    3175031003 JAKART… JATINE… BALI M…    9752    1649    8103    7250  1.54e4\n 6    3175101006 JAKART… CIPAYU… BAMBU …   26285    4029   22256   20167  4.24e4\n 7    3174031002 JAKART… MAMPAN… BANGKA    21566    3946   17620   15681  3.33e4\n 8    3175051002 JAKART… PASAR … BARU      23886    3341   20545   18766  3.93e4\n 9    3175041004 JAKART… KRAMAT… BATU A…   47898    9376   38522   33413  7.19e4\n10    3171071002 JAKART… TANAH … BENDUN…   21494    3771   17723   16057  3.38e4\n# … with 258 more rows, 18 more variables: `LANSIA\\nDOSIS 1` <dbl>,\n#   `LANSIA\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\nDOSIS 2` <dbl>, …\n\n[[9]]\n# A tibble: 268 × 34\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ JUMLA…⁸\n           <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1            NA <NA>    <NA>    TOTAL   8941211 1455001 7486210 6728547 2723453\n 2    3172051003 JAKART… PADEMA… ANCOL     23947    4456   19491   17034    6578\n 3    3173041007 JAKART… TAMBORA ANGKE     29381    5106   24275   21139    8926\n 4    3175041005 JAKART… KRAMAT… BALE K…   29074    5707   23367   20319    6499\n 5    3175031003 JAKART… JATINE… BALI M…    9752    1599    8153    7396    3227\n 6    3175101006 JAKART… CIPAYU… BAMBU …   26285    3860   22425   20486    8176\n 7    3174031002 JAKART… MAMPAN… BANGKA    21566    3821   17745   15961    5495\n 8    3175051002 JAKART… PASAR … BARU      23886    3163   20723   19110    9341\n 9    3175041004 JAKART… KRAMAT… BATU A…   47898    9045   38853   34247   12119\n10    3171071002 JAKART… TANAH … BENDUN…   21494    3634   17860   16312    7657\n# … with 258 more rows, 25 more variables: `TOTAL VAKSIN\\nDIBERIKAN` <dbl>,\n#   `LANSIA\\nDOSIS 1` <dbl>, `LANSIA\\nDOSIS 2` <dbl>, `LANSIA\\nDOSIS 3` <dbl>,\n#   `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <dbl>, `PELAYAN PUBLIK\\nDOSIS 1` <dbl>,\n#   `PELAYAN PUBLIK\\nDOSIS 2` <dbl>, `PELAYAN PUBLIK\\nDOSIS 3` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 3` <dbl>, …\n\n[[10]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n           <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1            NA <NA>    <NA>    TOTAL   8941211 1875655 7065556 5735263  1.28e7\n 2    3172051003 JAKART… PADEMA… ANCOL     23947    5965   17982   14518  3.25e4\n 3    3173041007 JAKART… TAMBORA ANGKE     29381    6538   22843   18195  4.10e4\n 4    3175041005 JAKART… KRAMAT… BALE K…   29074    7561   21513   16465  3.80e4\n 5    3175031003 JAKART… JATINE… BALI M…    9752    2118    7634    6290  1.39e4\n 6    3175101006 JAKART… CIPAYU… BAMBU …   26285    5002   21283   17298  3.86e4\n 7    3174031002 JAKART… MAMPAN… BANGKA    21566    4732   16834   13587  3.04e4\n 8    3175051002 JAKART… PASAR … BARU      23886    4080   19806   16707  3.65e4\n 9    3175041004 JAKART… KRAMAT… BATU A…   47898   12177   35721   27978  6.37e4\n10    3171071002 JAKART… TANAH … BENDUN…   21494    4486   17008   14194  3.12e4\n# … with 258 more rows, 18 more variables: `LANSIA\\nDOSIS 1` <dbl>,\n#   `LANSIA\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\nDOSIS 2` <dbl>, …\n\n[[11]]\n# A tibble: 314 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 <NA>          <NA>    <NA>    TOTAL   8941211 2221074 6720137 5180829 119009…\n 2 3172051003    JAKART… PADEMA… ANCOL   23947   6647    17300   13405   30705  \n 3 3173041007    JAKART… TAMBORA ANGKE   29381   7559    21822   16471   38293  \n 4 3175041005    JAKART… KRAMAT… BALE K… 29074   8660    20414   14425   34839  \n 5 3175031003    JAKART… JATINE… BALI M… 9752    2496    7256    5665    12921  \n 6 3175101006    JAKART… CIPAYU… BAMBU … 26285   6055    20230   15400   35630  \n 7 3174031002    JAKART… MAMPAN… BANGKA  21566   5745    15821   12175   27996  \n 8 3175051002    JAKART… PASAR … BARU    23886   4873    19013   15558   34571  \n 9 3175041004    JAKART… KRAMAT… BATU A… 47898   14035   33863   24757   58620  \n10 3171071002    JAKART… TANAH … BENDUN… 21494   5209    16285   12784   29069  \n# … with 304 more rows, 18 more variables: `LANSIA\\nDOSIS 1` <chr>,\n#   `LANSIA\\nDOSIS 2` <chr>, `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <chr>,\n#   `PELAYAN PUBLIK\\nDOSIS 1` <chr>, `PELAYAN PUBLIK\\nDOSIS 2` <chr>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <chr>,\n#   `GOTONG ROYONG\\nDOSIS 1` <chr>, `GOTONG ROYONG\\nDOSIS 2` <chr>,\n#   `GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN` <chr>,\n#   `TENAGA KESEHATAN\\nDOSIS 1` <chr>, `TENAGA KESEHATAN\\nDOSIS 2` <chr>, …\n\n[[12]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n           <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1            NA <NA>    <NA>    TOTAL   8941211 3259430 5681781 3477617 9159398\n 2    3172051003 JAKART… PADEMA… ANCOL     23947    9138   14809    9230   24039\n 3    3173041007 JAKART… TAMBORA ANGKE     29381   10347   19034   10733   29767\n 4    3175041005 JAKART… KRAMAT… BALE K…   29074   12455   16619    7968   24587\n 5    3175031003 JAKART… JATINE… BALI M…    9752    3689    6063    3777    9840\n 6    3175101006 JAKART… CIPAYU… BAMBU …   26285    9350   16935   10591   27526\n 7    3174031002 JAKART… MAMPAN… BANGKA    21566    8338   13228    8196   21424\n 8    3175051002 JAKART… PASAR … BARU      23886    7676   16210   11491   27701\n 9    3175041004 JAKART… KRAMAT… BATU A…   47898   19816   28082   15664   43746\n10    3171071002 JAKART… TANAH … BENDUN…   21494    8012   13482    8777   22259\n# … with 258 more rows, 18 more variables: `LANSIA\\nDOSIS 1` <dbl>,\n#   `LANSIA\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\nDOSIS 2` <dbl>, …\n\n\nA total of 12 aspatial data files imported and among these data files, there are three variety of column number (34,27, and 21 variables).\n\n\n\nTherefore, we will use the following code line to see the variety in columns for all the data sets.\n\n#view column names in each data file\nlapply(data_list, colnames)\n\n[[1]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"JUMLAH\\nDOSIS 3\"                         \n[10] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[11] \"LANSIA\\nDOSIS 1\"                         \n[12] \"LANSIA\\nDOSIS 2\"                         \n[13] \"LANSIA\\nDOSIS 3\"                         \n[14] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[15] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[16] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[17] \"PELAYAN PUBLIK\\nDOSIS 3\"                 \n[18] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[19] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[20] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[21] \"GOTONG ROYONG\\nDOSIS 3\"                  \n[22] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[23] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[24] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[25] \"TENAGA KESEHATAN\\nDOSIS 3\"               \n[26] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n[27] \"TAHAPAN 3\\nDOSIS 1\"                      \n[28] \"TAHAPAN 3\\nDOSIS 2\"                      \n[29] \"TAHAPAN 3\\nDOSIS 3\"                      \n[30] \"TAHAPAN 3 TOTAL\\nVAKSIN DIBERIKAN\"       \n[31] \"REMAJA\\nDOSIS 1\"                         \n[32] \"REMAJA\\nDOSIS 2\"                         \n[33] \"REMAJA\\nDOSIS 3\"                         \n[34] \"REMAJA TOTAL\\nVAKSIN DIBERIKAN\"          \n\n[[2]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[10] \"LANSIA\\nDOSIS 1\"                         \n[11] \"LANSIA\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\nDOSIS 1\"                         \n[26] \"REMAJA\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\nVAKSIN DIBERIKAN\"          \n\n[[3]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[10] \"LANSIA\\nDOSIS 1\"                         \n[11] \"LANSIA\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\nDOSIS 1\"                         \n[26] \"REMAJA\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\nVAKSIN DIBERIKAN\"          \n\n[[4]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[10] \"LANSIA\\nDOSIS 1\"                         \n[11] \"LANSIA\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\nDOSIS 1\"                         \n[26] \"REMAJA\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\nVAKSIN DIBERIKAN\"          \n\n[[5]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[10] \"LANSIA\\nDOSIS 1\"                         \n[11] \"LANSIA\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\nDOSIS 1\"                         \n[26] \"REMAJA\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\nVAKSIN DIBERIKAN\"          \n\n[[6]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[10] \"LANSIA\\nDOSIS 1\"                         \n[11] \"LANSIA\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n\n[[7]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"JUMLAH\\nDOSIS 3\"                         \n[10] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[11] \"LANSIA\\nDOSIS 1\"                         \n[12] \"LANSIA\\nDOSIS 2\"                         \n[13] \"LANSIA\\nDOSIS 3\"                         \n[14] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[15] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[16] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[17] \"PELAYAN PUBLIK\\nDOSIS 3\"                 \n[18] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[19] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[20] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[21] \"GOTONG ROYONG\\nDOSIS 3\"                  \n[22] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[23] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[24] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[25] \"TENAGA KESEHATAN\\nDOSIS 3\"               \n[26] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n[27] \"TAHAPAN 3\\nDOSIS 1\"                      \n[28] \"TAHAPAN 3\\nDOSIS 2\"                      \n[29] \"TAHAPAN 3\\nDOSIS 3\"                      \n[30] \"TAHAPAN 3 TOTAL\\nVAKSIN DIBERIKAN\"       \n[31] \"REMAJA\\nDOSIS 1\"                         \n[32] \"REMAJA\\nDOSIS 2\"                         \n[33] \"REMAJA\\nDOSIS 3\"                         \n[34] \"REMAJA TOTAL\\nVAKSIN DIBERIKAN\"          \n\n[[8]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[10] \"LANSIA\\nDOSIS 1\"                         \n[11] \"LANSIA\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\nDOSIS 1\"                         \n[26] \"REMAJA\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\nVAKSIN DIBERIKAN\"          \n\n[[9]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"JUMLAH\\nDOSIS 3\"                         \n[10] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[11] \"LANSIA\\nDOSIS 1\"                         \n[12] \"LANSIA\\nDOSIS 2\"                         \n[13] \"LANSIA\\nDOSIS 3\"                         \n[14] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[15] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[16] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[17] \"PELAYAN PUBLIK\\nDOSIS 3\"                 \n[18] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[19] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[20] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[21] \"GOTONG ROYONG\\nDOSIS 3\"                  \n[22] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[23] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[24] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[25] \"TENAGA KESEHATAN\\nDOSIS 3\"               \n[26] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n[27] \"TAHAPAN 3\\nDOSIS 1\"                      \n[28] \"TAHAPAN 3\\nDOSIS 2\"                      \n[29] \"TAHAPAN 3\\nDOSIS 3\"                      \n[30] \"TAHAPAN 3 TOTAL\\nVAKSIN DIBERIKAN\"       \n[31] \"REMAJA\\nDOSIS 1\"                         \n[32] \"REMAJA\\nDOSIS 2\"                         \n[33] \"REMAJA\\nDOSIS 3\"                         \n[34] \"REMAJA TOTAL\\nVAKSIN DIBERIKAN\"          \n\n[[10]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[10] \"LANSIA\\nDOSIS 1\"                         \n[11] \"LANSIA\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\nDOSIS 1\"                         \n[26] \"REMAJA\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\nVAKSIN DIBERIKAN\"          \n\n[[11]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[10] \"LANSIA\\nDOSIS 1\"                         \n[11] \"LANSIA\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\nDOSIS 1\"                         \n[26] \"REMAJA\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\nVAKSIN DIBERIKAN\"          \n\n[[12]]\n [1] \"KODE KELURAHAN\"                          \n [2] \"WILAYAH KOTA\"                            \n [3] \"KECAMATAN\"                               \n [4] \"KELURAHAN\"                               \n [5] \"SASARAN\"                                 \n [6] \"BELUM VAKSIN\"                            \n [7] \"JUMLAH\\nDOSIS 1\"                         \n [8] \"JUMLAH\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\nDIBERIKAN\"                 \n[10] \"LANSIA\\nDOSIS 1\"                         \n[11] \"LANSIA\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\nDOSIS 1\"                         \n[26] \"REMAJA\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\nVAKSIN DIBERIKAN\"          \n\n\n\nI took out 3 samples out of the 12 data files to show the difference in number of variables. I realised the differences were due to column names such as: ” DOSIS 3”. The reason could be due to the government’s increasing immunization rates for various demographic groups and the quantity of vaccinations distributed across the country.\nHowever, the primary interest in this study is to analyse COVID-19 vaccination trends at the sub-district level, DKI Jakarta. Therefore, the breakdown of different demographics vaccination progress are less of our concern and we should eliminate them from the data sets.\nOur columns of interest (those that are relevant to our analysis and we will keep) are as follows (as highlighted in blue in the above screenshot as well) -> they are common in all data files therefore we can extract them:\n\nKode Kelurahan (Village Code)\nWilayah Kota (City Area)\nKecamatan (District)\nKelurahan (Sub-District)\nSasaran (Target)\nBelum Vaksin (Not Yet Vaccinated)\nTotal Vaksin Diberikan (Total Vaccine Given)\n\nNow that we know our requirements, we can process the data step-by-step:\nStep 1: Retain only the 7 relevant columns for all 12 data sets imported earlier\nIn this code, the map() function iterates through each data frame in the list my_data and applies the select() function to select the stated column names. The resulting list of data frames is stored in the variable my_data_same_columns.\n\nmy_data_same_columns <- map(data_list, ~select(.x, \"KODE KELURAHAN\", \"WILAYAH KOTA\", \"KECAMATAN\",\"SASARAN\",\"KELURAHAN\",\"BELUM VAKSIN\",\"TOTAL VAKSIN\\nDIBERIKAN\"))\n\nmy_data_same_columns\n\n[[1]]\n# A tibble: 268 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n              <dbl> <chr>           <chr>          <dbl> <chr>     <dbl>   <dbl>\n 1               NA <NA>            8941211      8941211 TOTAL   1481006  1.60e7\n 2       3172051003 JAKARTA UTARA   PADEMANGAN     23947 ANCOL      4518  4.06e4\n 3       3173041007 JAKARTA BARAT   TAMBORA        29381 ANGKE      5181  5.14e4\n 4       3175041005 JAKARTA TIMUR   KRAMAT JATI    29074 BALE K…    5774  4.77e4\n 5       3175031003 JAKARTA TIMUR   JATINEGARA      9752 BALI M…    1620  1.77e4\n 6       3175101006 JAKARTA TIMUR   CIPAYUNG       26285 BAMBU …    3941  4.81e4\n 7       3174031002 JAKARTA SELATAN MAMPANG PRA…   21566 BANGKA     3889  3.75e4\n 8       3175051002 JAKARTA TIMUR   PASAR REBO     23886 BARU       3214  4.67e4\n 9       3175041004 JAKARTA TIMUR   KRAMAT JATI    47898 BATU A…    9150  8.10e4\n10       3171071002 JAKARTA PUSAT   TANAH ABANG    21494 BENDUN…    3692  3.97e4\n# … with 258 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n[[2]]\n# A tibble: 268 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n              <dbl> <chr>           <chr>          <dbl> <chr>     <dbl>   <dbl>\n 1               NA <NA>            <NA>         8941211 TOTAL   4399496 6228535\n 2       3172051003 JAKARTA UTARA   PADEMANGAN     23947 ANCOL     12155   16060\n 3       3173041007 JAKARTA BARAT   TAMBORA        29381 ANGKE     13727   20559\n 4       3175041005 JAKARTA TIMUR   KRAMAT JATI    29074 BALE K…   18226   14560\n 5       3175031003 JAKARTA TIMUR   JATINEGARA      9752 BALI M…    4987    6801\n 6       3175101006 JAKARTA TIMUR   CIPAYUNG       26285 BAMBU …   13716   17811\n 7       3174031002 JAKARTA SELATAN MAMPANG PRA…   21566 BANGKA    10232   15423\n 8       3175051002 JAKARTA TIMUR   PASAR REBO     23886 BARU       9999   20037\n 9       3175041004 JAKARTA TIMUR   KRAMAT JATI    47898 BATU A…   28381   26892\n10       3171071002 JAKARTA PUSAT   TANAH ABANG    21494 BENDUN…    9895   16261\n# … with 258 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n[[3]]\n# A tibble: 268 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n              <dbl> <chr>           <chr>          <dbl> <chr>     <dbl>   <dbl>\n 1               NA <NA>            <NA>         8941211 TOTAL   1718787  1.34e7\n 2       3172051003 JAKARTA UTARA   PADEMANGAN     23947 ANCOL      5514  3.39e4\n 3       3173041007 JAKARTA BARAT   TAMBORA        29381 ANGKE      5968  4.28e4\n 4       3175041005 JAKARTA TIMUR   KRAMAT JATI    29074 BALE K…    6779  4.04e4\n 5       3175031003 JAKARTA TIMUR   JATINEGARA      9752 BALI M…    1916  1.46e4\n 6       3175101006 JAKARTA TIMUR   CIPAYUNG       26285 BAMBU …    4596  4.04e4\n 7       3174031002 JAKARTA SELATAN MAMPANG PRA…   21566 BANGKA     4339  3.20e4\n 8       3175051002 JAKARTA TIMUR   PASAR REBO     23886 BARU       3769  3.79e4\n 9       3175041004 JAKARTA TIMUR   KRAMAT JATI    47898 BATU A…   10965  6.77e4\n10       3171071002 JAKARTA PUSAT   TANAH ABANG    21494 BENDUN…    4174  3.25e4\n# … with 258 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n[[4]]\n# A tibble: 268 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n              <dbl> <chr>           <chr>          <dbl> <chr>     <dbl>   <dbl>\n 1               NA <NA>            <NA>         8941211 TOTAL   1536737  1.39e7\n 2       3172051003 JAKARTA UTARA   PADEMANGAN     23947 ANCOL      4640  3.58e4\n 3       3173041007 JAKARTA BARAT   TAMBORA        29381 ANGKE      5385  4.45e4\n 4       3175041005 JAKARTA TIMUR   KRAMAT JATI    29074 BALE K…    5958  4.26e4\n 5       3175031003 JAKARTA TIMUR   JATINEGARA      9752 BALI M…    1674  1.53e4\n 6       3175101006 JAKARTA TIMUR   CIPAYUNG       26285 BAMBU …    4075  4.22e4\n 7       3174031002 JAKARTA SELATAN MAMPANG PRA…   21566 BANGKA     3989  3.31e4\n 8       3175051002 JAKARTA TIMUR   PASAR REBO     23886 BARU       3392  3.91e4\n 9       3175041004 JAKARTA TIMUR   KRAMAT JATI    47898 BATU A…    9505  7.14e4\n10       3171071002 JAKARTA PUSAT   TANAH ABANG    21494 BENDUN…    3811  3.36e4\n# … with 258 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n[[5]]\n# A tibble: 268 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n              <dbl> <chr>           <chr>          <dbl> <chr>     <dbl>   <dbl>\n 1               NA <NA>            <NA>         8941211 TOTAL   1620250  1.37e7\n 2       3172051003 JAKARTA UTARA   PADEMANGAN     23947 ANCOL      5049  3.49e4\n 3       3173041007 JAKARTA BARAT   TAMBORA        29381 ANGKE      5616  4.38e4\n 4       3175041005 JAKARTA TIMUR   KRAMAT JATI    29074 BALE K…    6320  4.17e4\n 5       3175031003 JAKARTA TIMUR   JATINEGARA      9752 BALI M…    1780  1.50e4\n 6       3175101006 JAKARTA TIMUR   CIPAYUNG       26285 BAMBU …    4368  4.13e4\n 7       3174031002 JAKARTA SELATAN MAMPANG PRA…   21566 BANGKA     4167  3.26e4\n 8       3175051002 JAKARTA TIMUR   PASAR REBO     23886 BARU       3576  3.86e4\n 9       3175041004 JAKARTA TIMUR   KRAMAT JATI    47898 BATU A…   10137  6.98e4\n10       3171071002 JAKARTA PUSAT   TANAH ABANG    21494 BENDUN…    3989  3.31e4\n# … with 258 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n[[6]]\n# A tibble: 268 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n              <dbl> <chr>           <chr>          <dbl> <chr>     <dbl>   <dbl>\n 1               NA <NA>            <NA>         7739060 TOTAL   5041111 3877757\n 2       3172051003 JAKARTA UTARA   PADEMANGAN     20393 ANCOL     13272   10401\n 3       3173041007 JAKARTA BARAT   TAMBORA        25785 ANGKE     16477   12520\n 4       3175041005 JAKARTA TIMUR   KRAMAT JATI    25158 BALE K…   18849    8945\n 5       3175031003 JAKARTA TIMUR   JATINEGARA      8683 BALI M…    5743    4454\n 6       3175101006 JAKARTA TIMUR   CIPAYUNG       22768 BAMBU …   15407   11342\n 7       3174031002 JAKARTA SELATAN MAMPANG PRA…   18930 BANGKA    12503    9125\n 8       3175051002 JAKARTA TIMUR   PASAR REBO     20267 BARU      11268   13656\n 9       3175041004 JAKARTA TIMUR   KRAMAT JATI    41389 BATU A…   30358   16274\n10       3171071002 JAKARTA PUSAT   TANAH ABANG    19008 BENDUN…   11502   11065\n# … with 258 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n[[7]]\n# A tibble: 268 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n              <dbl> <chr>           <chr>          <dbl> <chr>     <dbl>   <dbl>\n 1               NA <NA>            <NA>         8941211 TOTAL   1444901  1.71e7\n 2       3172051003 JAKARTA UTARA   PADEMANGAN     23947 ANCOL      4440  4.36e4\n 3       3173041007 JAKARTA BARAT   TAMBORA        29381 ANGKE      5083  5.50e4\n 4       3175041005 JAKARTA TIMUR   KRAMAT JATI    29074 BALE K…    5671  5.08e4\n 5       3175031003 JAKARTA TIMUR   JATINEGARA      9752 BALI M…    1588  1.90e4\n 6       3175101006 JAKARTA TIMUR   CIPAYUNG       26285 BAMBU …    3824  5.17e4\n 7       3174031002 JAKARTA SELATAN MAMPANG PRA…   21566 BANGKA     3803  3.96e4\n 8       3175051002 JAKARTA TIMUR   PASAR REBO     23886 BARU       3146  4.97e4\n 9       3175041004 JAKARTA TIMUR   KRAMAT JATI    47898 BATU A…    8984  8.63e4\n10       3171071002 JAKARTA PUSAT   TANAH ABANG    21494 BENDUN…    3607  4.24e4\n# … with 258 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n[[8]]\n# A tibble: 268 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n              <dbl> <chr>           <chr>          <dbl> <chr>     <dbl>   <dbl>\n 1               NA <NA>            <NA>         8941211 TOTAL   1516200  1.40e7\n 2       3172051003 JAKARTA UTARA   PADEMANGAN     23947 ANCOL      4590  3.61e4\n 3       3173041007 JAKARTA BARAT   TAMBORA        29381 ANGKE      5315  4.48e4\n 4       3175041005 JAKARTA TIMUR   KRAMAT JATI    29074 BALE K…    5897  4.30e4\n 5       3175031003 JAKARTA TIMUR   JATINEGARA      9752 BALI M…    1649  1.54e4\n 6       3175101006 JAKARTA TIMUR   CIPAYUNG       26285 BAMBU …    4029  4.24e4\n 7       3174031002 JAKARTA SELATAN MAMPANG PRA…   21566 BANGKA     3946  3.33e4\n 8       3175051002 JAKARTA TIMUR   PASAR REBO     23886 BARU       3341  3.93e4\n 9       3175041004 JAKARTA TIMUR   KRAMAT JATI    47898 BATU A…    9376  7.19e4\n10       3171071002 JAKARTA PUSAT   TANAH ABANG    21494 BENDUN…    3771  3.38e4\n# … with 258 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n[[9]]\n# A tibble: 268 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n              <dbl> <chr>           <chr>          <dbl> <chr>     <dbl>   <dbl>\n 1               NA <NA>            <NA>         8941211 TOTAL   1455001  1.69e7\n 2       3172051003 JAKARTA UTARA   PADEMANGAN     23947 ANCOL      4456  4.31e4\n 3       3173041007 JAKARTA BARAT   TAMBORA        29381 ANGKE      5106  5.43e4\n 4       3175041005 JAKARTA TIMUR   KRAMAT JATI    29074 BALE K…    5707  5.02e4\n 5       3175031003 JAKARTA TIMUR   JATINEGARA      9752 BALI M…    1599  1.88e4\n 6       3175101006 JAKARTA TIMUR   CIPAYUNG       26285 BAMBU …    3860  5.11e4\n 7       3174031002 JAKARTA SELATAN MAMPANG PRA…   21566 BANGKA     3821  3.92e4\n 8       3175051002 JAKARTA TIMUR   PASAR REBO     23886 BARU       3163  4.92e4\n 9       3175041004 JAKARTA TIMUR   KRAMAT JATI    47898 BATU A…    9045  8.52e4\n10       3171071002 JAKARTA PUSAT   TANAH ABANG    21494 BENDUN…    3634  4.18e4\n# … with 258 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n[[10]]\n# A tibble: 268 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n              <dbl> <chr>           <chr>          <dbl> <chr>     <dbl>   <dbl>\n 1               NA <NA>            <NA>         8941211 TOTAL   1875655  1.28e7\n 2       3172051003 JAKARTA UTARA   PADEMANGAN     23947 ANCOL      5965  3.25e4\n 3       3173041007 JAKARTA BARAT   TAMBORA        29381 ANGKE      6538  4.10e4\n 4       3175041005 JAKARTA TIMUR   KRAMAT JATI    29074 BALE K…    7561  3.80e4\n 5       3175031003 JAKARTA TIMUR   JATINEGARA      9752 BALI M…    2118  1.39e4\n 6       3175101006 JAKARTA TIMUR   CIPAYUNG       26285 BAMBU …    5002  3.86e4\n 7       3174031002 JAKARTA SELATAN MAMPANG PRA…   21566 BANGKA     4732  3.04e4\n 8       3175051002 JAKARTA TIMUR   PASAR REBO     23886 BARU       4080  3.65e4\n 9       3175041004 JAKARTA TIMUR   KRAMAT JATI    47898 BATU A…   12177  6.37e4\n10       3171071002 JAKARTA PUSAT   TANAH ABANG    21494 BENDUN…    4486  3.12e4\n# … with 258 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n[[11]]\n# A tibble: 314 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n   <chr>            <chr>           <chr>        <chr>   <chr>   <chr>   <chr>  \n 1 <NA>             <NA>            <NA>         8941211 TOTAL   2221074 119009…\n 2 3172051003       JAKARTA UTARA   PADEMANGAN   23947   ANCOL   6647    30705  \n 3 3173041007       JAKARTA BARAT   TAMBORA      29381   ANGKE   7559    38293  \n 4 3175041005       JAKARTA TIMUR   KRAMAT JATI  29074   BALE K… 8660    34839  \n 5 3175031003       JAKARTA TIMUR   JATINEGARA   9752    BALI M… 2496    12921  \n 6 3175101006       JAKARTA TIMUR   CIPAYUNG     26285   BAMBU … 6055    35630  \n 7 3174031002       JAKARTA SELATAN MAMPANG PRA… 21566   BANGKA  5745    27996  \n 8 3175051002       JAKARTA TIMUR   PASAR REBO   23886   BARU    4873    34571  \n 9 3175041004       JAKARTA TIMUR   KRAMAT JATI  47898   BATU A… 14035   58620  \n10 3171071002       JAKARTA PUSAT   TANAH ABANG  21494   BENDUN… 5209    29069  \n# … with 304 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n[[12]]\n# A tibble: 268 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN    SASARAN KELUR…¹ BELUM…² TOTAL…³\n              <dbl> <chr>           <chr>          <dbl> <chr>     <dbl>   <dbl>\n 1               NA <NA>            <NA>         8941211 TOTAL   3259430 9159398\n 2       3172051003 JAKARTA UTARA   PADEMANGAN     23947 ANCOL      9138   24039\n 3       3173041007 JAKARTA BARAT   TAMBORA        29381 ANGKE     10347   29767\n 4       3175041005 JAKARTA TIMUR   KRAMAT JATI    29074 BALE K…   12455   24587\n 5       3175031003 JAKARTA TIMUR   JATINEGARA      9752 BALI M…    3689    9840\n 6       3175101006 JAKARTA TIMUR   CIPAYUNG       26285 BAMBU …    9350   27526\n 7       3174031002 JAKARTA SELATAN MAMPANG PRA…   21566 BANGKA     8338   21424\n 8       3175051002 JAKARTA TIMUR   PASAR REBO     23886 BARU       7676   27701\n 9       3175041004 JAKARTA TIMUR   KRAMAT JATI    47898 BATU A…   19816   43746\n10       3171071002 JAKARTA PUSAT   TANAH ABANG    21494 BENDUN…    8012   22259\n# … with 258 more rows, and abbreviated variable names ¹​KELURAHAN,\n#   ²​`BELUM VAKSIN`, ³​`TOTAL VAKSIN\\nDIBERIKAN`\n\n\nNow, all the data files have 7 same columns.\nStep 2: Rename Columns with translation (English headers)\n\n# Define a named vector of new column names\nnew_names <- c(\"Village_Code\" = \"KODE KELURAHAN\", \"City_Area\" = \"WILAYAH KOTA\", \"District\" = \"KECAMATAN\", \"Sub_District\"=\"KELURAHAN\", \"Target\" = \"SASARAN\", \"Unvaccinated\" = \"BELUM VAKSIN\", \"Vaccinated\" = \"TOTAL VAKSIN\\nDIBERIKAN\")\n\n# Use map to rename columns in each data frame in the list\nrenamed_list <- map(my_data_same_columns, ~rename(.x, !!!new_names))\n\n# View the renamed data frames in the list\nglimpse(renamed_list)\n\nList of 12\n $ : tibble [268 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: num [1:268] NA 3.17e+09 3.17e+09 3.18e+09 3.18e+09 ...\n  ..$ City_Area   : chr [1:268] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:268] \"8941211\" \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : num [1:268] 8941211 23947 29381 29074 9752 ...\n  ..$ Sub_District: chr [1:268] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: num [1:268] 1481006 4518 5181 5774 1620 ...\n  ..$ Vaccinated  : num [1:268] 16031446 40610 51431 47666 17668 ...\n $ : tibble [268 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: num [1:268] NA 3.17e+09 3.17e+09 3.18e+09 3.18e+09 ...\n  ..$ City_Area   : chr [1:268] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:268] NA \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : num [1:268] 8941211 23947 29381 29074 9752 ...\n  ..$ Sub_District: chr [1:268] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: num [1:268] 4399496 12155 13727 18226 4987 ...\n  ..$ Vaccinated  : num [1:268] 6228535 16060 20559 14560 6801 ...\n $ : tibble [268 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: num [1:268] NA 3.17e+09 3.17e+09 3.18e+09 3.18e+09 ...\n  ..$ City_Area   : chr [1:268] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:268] NA \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : num [1:268] 8941211 23947 29381 29074 9752 ...\n  ..$ Sub_District: chr [1:268] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: num [1:268] 1718787 5514 5968 6779 1916 ...\n  ..$ Vaccinated  : num [1:268] 13407877 33920 42846 40418 14616 ...\n $ : tibble [268 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: num [1:268] NA 3.17e+09 3.17e+09 3.18e+09 3.18e+09 ...\n  ..$ City_Area   : chr [1:268] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:268] NA \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : num [1:268] 8941211 23947 29381 29074 9752 ...\n  ..$ Sub_District: chr [1:268] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: num [1:268] 1536737 4640 5385 5958 1674 ...\n  ..$ Vaccinated  : num [1:268] 13925806 35808 44470 42592 15257 ...\n $ : tibble [268 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: num [1:268] NA 3.17e+09 3.17e+09 3.18e+09 3.18e+09 ...\n  ..$ City_Area   : chr [1:268] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:268] NA \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : num [1:268] 8941211 23947 29381 29074 9752 ...\n  ..$ Sub_District: chr [1:268] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: num [1:268] 1620250 5049 5616 6320 1780 ...\n  ..$ Vaccinated  : num [1:268] 13696305 34909 43800 41705 14981 ...\n $ : tibble [268 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: num [1:268] NA 3.17e+09 3.17e+09 3.18e+09 3.18e+09 ...\n  ..$ City_Area   : chr [1:268] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:268] NA \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : num [1:268] 7739060 20393 25785 25158 8683 ...\n  ..$ Sub_District: chr [1:268] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: num [1:268] 5041111 13272 16477 18849 5743 ...\n  ..$ Vaccinated  : num [1:268] 3877757 10401 12520 8945 4454 ...\n $ : tibble [268 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: num [1:268] NA 3.17e+09 3.17e+09 3.18e+09 3.18e+09 ...\n  ..$ City_Area   : chr [1:268] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:268] NA \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : num [1:268] 8941211 23947 29381 29074 9752 ...\n  ..$ Sub_District: chr [1:268] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: num [1:268] 1444901 4440 5083 5671 1588 ...\n  ..$ Vaccinated  : num [1:268] 17135266 43625 55004 50832 19006 ...\n $ : tibble [268 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: num [1:268] NA 3.17e+09 3.17e+09 3.18e+09 3.18e+09 ...\n  ..$ City_Area   : chr [1:268] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:268] NA \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : num [1:268] 8941211 23947 29381 29074 9752 ...\n  ..$ Sub_District: chr [1:268] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: num [1:268] 1516200 4590 5315 5897 1649 ...\n  ..$ Vaccinated  : num [1:268] 14022104 36055 44814 42961 15353 ...\n $ : tibble [268 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: num [1:268] NA 3.17e+09 3.17e+09 3.18e+09 3.18e+09 ...\n  ..$ City_Area   : chr [1:268] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:268] NA \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : num [1:268] 8941211 23947 29381 29074 9752 ...\n  ..$ Sub_District: chr [1:268] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: num [1:268] 1455001 4456 5106 5707 1599 ...\n  ..$ Vaccinated  : num [1:268] 16938210 43103 54340 50185 18776 ...\n $ : tibble [268 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: num [1:268] NA 3.17e+09 3.17e+09 3.18e+09 3.18e+09 ...\n  ..$ City_Area   : chr [1:268] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:268] NA \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : num [1:268] 8941211 23947 29381 29074 9752 ...\n  ..$ Sub_District: chr [1:268] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: num [1:268] 1875655 5965 6538 7561 2118 ...\n  ..$ Vaccinated  : num [1:268] 12800819 32500 41038 37978 13924 ...\n $ : tibble [314 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: chr [1:314] NA \"3172051003\" \"3173041007\" \"3175041005\" ...\n  ..$ City_Area   : chr [1:314] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:314] NA \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : chr [1:314] \"8941211\" \"23947\" \"29381\" \"29074\" ...\n  ..$ Sub_District: chr [1:314] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: chr [1:314] \"2221074\" \"6647\" \"7559\" \"8660\" ...\n  ..$ Vaccinated  : chr [1:314] \"11900966\" \"30705\" \"38293\" \"34839\" ...\n $ : tibble [268 × 7] (S3: tbl_df/tbl/data.frame)\n  ..$ Village_Code: num [1:268] NA 3.17e+09 3.17e+09 3.18e+09 3.18e+09 ...\n  ..$ City_Area   : chr [1:268] NA \"JAKARTA UTARA\" \"JAKARTA BARAT\" \"JAKARTA TIMUR\" ...\n  ..$ District    : chr [1:268] NA \"PADEMANGAN\" \"TAMBORA\" \"KRAMAT JATI\" ...\n  ..$ Target      : num [1:268] 8941211 23947 29381 29074 9752 ...\n  ..$ Sub_District: chr [1:268] \"TOTAL\" \"ANCOL\" \"ANGKE\" \"BALE KAMBANG\" ...\n  ..$ Unvaccinated: num [1:268] 3259430 9138 10347 12455 3689 ...\n  ..$ Vaccinated  : num [1:268] 9159398 24039 29767 24587 9840 ...\n\n\nStep 3: Create the date column to identify each file of different months in the list\n\ndate_value_1 <- \"April 01, 2022\"\nrenamed_list_1 <- renamed_list[[1]]\nrenamed_list_1$date <- as.Date(date_value_1, format = \"%B %d, %Y\")\n\nrenamed_list_1\n\n# A tibble: 268 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1           NA <NA>           8941211 8.94e6 TOTAL   1481006  1.60e7 2022-04-01\n 2   3172051003 JAKARTA UTARA  PADEMA… 2.39e4 ANCOL      4518  4.06e4 2022-04-01\n 3   3173041007 JAKARTA BARAT  TAMBORA 2.94e4 ANGKE      5181  5.14e4 2022-04-01\n 4   3175041005 JAKARTA TIMUR  KRAMAT… 2.91e4 BALE K…    5774  4.77e4 2022-04-01\n 5   3175031003 JAKARTA TIMUR  JATINE… 9.75e3 BALI M…    1620  1.77e4 2022-04-01\n 6   3175101006 JAKARTA TIMUR  CIPAYU… 2.63e4 BAMBU …    3941  4.81e4 2022-04-01\n 7   3174031002 JAKARTA SELAT… MAMPAN… 2.16e4 BANGKA     3889  3.75e4 2022-04-01\n 8   3175051002 JAKARTA TIMUR  PASAR … 2.39e4 BARU       3214  4.67e4 2022-04-01\n 9   3175041004 JAKARTA TIMUR  KRAMAT… 4.79e4 BATU A…    9150  8.10e4 2022-04-01\n10   3171071002 JAKARTA PUSAT  TANAH … 2.15e4 BENDUN…    3692  3.97e4 2022-04-01\n# … with 258 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\ndate_value_2 <- \"August 01, 2021\"\nrenamed_list_2 <- renamed_list[[2]]\nrenamed_list_2$date <- as.Date(date_value_2, format = \"%B %d, %Y\")\n\nrenamed_list_2\n\n# A tibble: 268 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1           NA <NA>           <NA>    8.94e6 TOTAL   4399496 6228535 2021-08-01\n 2   3172051003 JAKARTA UTARA  PADEMA… 2.39e4 ANCOL     12155   16060 2021-08-01\n 3   3173041007 JAKARTA BARAT  TAMBORA 2.94e4 ANGKE     13727   20559 2021-08-01\n 4   3175041005 JAKARTA TIMUR  KRAMAT… 2.91e4 BALE K…   18226   14560 2021-08-01\n 5   3175031003 JAKARTA TIMUR  JATINE… 9.75e3 BALI M…    4987    6801 2021-08-01\n 6   3175101006 JAKARTA TIMUR  CIPAYU… 2.63e4 BAMBU …   13716   17811 2021-08-01\n 7   3174031002 JAKARTA SELAT… MAMPAN… 2.16e4 BANGKA    10232   15423 2021-08-01\n 8   3175051002 JAKARTA TIMUR  PASAR … 2.39e4 BARU       9999   20037 2021-08-01\n 9   3175041004 JAKARTA TIMUR  KRAMAT… 4.79e4 BATU A…   28381   26892 2021-08-01\n10   3171071002 JAKARTA PUSAT  TANAH … 2.15e4 BENDUN…    9895   16261 2021-08-01\n# … with 258 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\ndate_value_3 <- \"December 01, 2021\"\nrenamed_list_3 <- renamed_list[[3]]\nrenamed_list_3$date <- as.Date(date_value_3, format = \"%B %d, %Y\")\n\nrenamed_list_3\n\n# A tibble: 268 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1           NA <NA>           <NA>    8.94e6 TOTAL   1718787  1.34e7 2021-12-01\n 2   3172051003 JAKARTA UTARA  PADEMA… 2.39e4 ANCOL      5514  3.39e4 2021-12-01\n 3   3173041007 JAKARTA BARAT  TAMBORA 2.94e4 ANGKE      5968  4.28e4 2021-12-01\n 4   3175041005 JAKARTA TIMUR  KRAMAT… 2.91e4 BALE K…    6779  4.04e4 2021-12-01\n 5   3175031003 JAKARTA TIMUR  JATINE… 9.75e3 BALI M…    1916  1.46e4 2021-12-01\n 6   3175101006 JAKARTA TIMUR  CIPAYU… 2.63e4 BAMBU …    4596  4.04e4 2021-12-01\n 7   3174031002 JAKARTA SELAT… MAMPAN… 2.16e4 BANGKA     4339  3.20e4 2021-12-01\n 8   3175051002 JAKARTA TIMUR  PASAR … 2.39e4 BARU       3769  3.79e4 2021-12-01\n 9   3175041004 JAKARTA TIMUR  KRAMAT… 4.79e4 BATU A…   10965  6.77e4 2021-12-01\n10   3171071002 JAKARTA PUSAT  TANAH … 2.15e4 BENDUN…    4174  3.25e4 2021-12-01\n# … with 258 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\ndate_value_4 <- \"February 01, 2022\"\nrenamed_list_4 <- renamed_list[[4]]\nrenamed_list_4$date <- as.Date(date_value_4, format = \"%B %d, %Y\")\n\nrenamed_list_4\n\n# A tibble: 268 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1           NA <NA>           <NA>    8.94e6 TOTAL   1536737  1.39e7 2022-02-01\n 2   3172051003 JAKARTA UTARA  PADEMA… 2.39e4 ANCOL      4640  3.58e4 2022-02-01\n 3   3173041007 JAKARTA BARAT  TAMBORA 2.94e4 ANGKE      5385  4.45e4 2022-02-01\n 4   3175041005 JAKARTA TIMUR  KRAMAT… 2.91e4 BALE K…    5958  4.26e4 2022-02-01\n 5   3175031003 JAKARTA TIMUR  JATINE… 9.75e3 BALI M…    1674  1.53e4 2022-02-01\n 6   3175101006 JAKARTA TIMUR  CIPAYU… 2.63e4 BAMBU …    4075  4.22e4 2022-02-01\n 7   3174031002 JAKARTA SELAT… MAMPAN… 2.16e4 BANGKA     3989  3.31e4 2022-02-01\n 8   3175051002 JAKARTA TIMUR  PASAR … 2.39e4 BARU       3392  3.91e4 2022-02-01\n 9   3175041004 JAKARTA TIMUR  KRAMAT… 4.79e4 BATU A…    9505  7.14e4 2022-02-01\n10   3171071002 JAKARTA PUSAT  TANAH … 2.15e4 BENDUN…    3811  3.36e4 2022-02-01\n# … with 258 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\ndate_value_5 <- \"January 01, 2022\"\nrenamed_list_5 <- renamed_list[[5]]\nrenamed_list_5$date <- as.Date(date_value_5, format = \"%B %d, %Y\")\n\nrenamed_list_5\n\n# A tibble: 268 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1           NA <NA>           <NA>    8.94e6 TOTAL   1620250  1.37e7 2022-01-01\n 2   3172051003 JAKARTA UTARA  PADEMA… 2.39e4 ANCOL      5049  3.49e4 2022-01-01\n 3   3173041007 JAKARTA BARAT  TAMBORA 2.94e4 ANGKE      5616  4.38e4 2022-01-01\n 4   3175041005 JAKARTA TIMUR  KRAMAT… 2.91e4 BALE K…    6320  4.17e4 2022-01-01\n 5   3175031003 JAKARTA TIMUR  JATINE… 9.75e3 BALI M…    1780  1.50e4 2022-01-01\n 6   3175101006 JAKARTA TIMUR  CIPAYU… 2.63e4 BAMBU …    4368  4.13e4 2022-01-01\n 7   3174031002 JAKARTA SELAT… MAMPAN… 2.16e4 BANGKA     4167  3.26e4 2022-01-01\n 8   3175051002 JAKARTA TIMUR  PASAR … 2.39e4 BARU       3576  3.86e4 2022-01-01\n 9   3175041004 JAKARTA TIMUR  KRAMAT… 4.79e4 BATU A…   10137  6.98e4 2022-01-01\n10   3171071002 JAKARTA PUSAT  TANAH … 2.15e4 BENDUN…    3989  3.31e4 2022-01-01\n# … with 258 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\ndate_value_6 <- \"July 01, 2021\"\nrenamed_list_6 <- renamed_list[[6]]\nrenamed_list_6$date <- as.Date(date_value_6, format = \"%B %d, %Y\")\n\nrenamed_list_6\n\n# A tibble: 268 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1           NA <NA>           <NA>    7.74e6 TOTAL   5041111 3877757 2021-07-01\n 2   3172051003 JAKARTA UTARA  PADEMA… 2.04e4 ANCOL     13272   10401 2021-07-01\n 3   3173041007 JAKARTA BARAT  TAMBORA 2.58e4 ANGKE     16477   12520 2021-07-01\n 4   3175041005 JAKARTA TIMUR  KRAMAT… 2.52e4 BALE K…   18849    8945 2021-07-01\n 5   3175031003 JAKARTA TIMUR  JATINE… 8.68e3 BALI M…    5743    4454 2021-07-01\n 6   3175101006 JAKARTA TIMUR  CIPAYU… 2.28e4 BAMBU …   15407   11342 2021-07-01\n 7   3174031002 JAKARTA SELAT… MAMPAN… 1.89e4 BANGKA    12503    9125 2021-07-01\n 8   3175051002 JAKARTA TIMUR  PASAR … 2.03e4 BARU      11268   13656 2021-07-01\n 9   3175041004 JAKARTA TIMUR  KRAMAT… 4.14e4 BATU A…   30358   16274 2021-07-01\n10   3171071002 JAKARTA PUSAT  TANAH … 1.90e4 BENDUN…   11502   11065 2021-07-01\n# … with 258 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\ndate_value_7 <- \"June 01, 2022\"\nrenamed_list_7 <- renamed_list[[7]]\nrenamed_list_7$date <- as.Date(date_value_7, format = \"%B %d, %Y\")\n\nrenamed_list_7\n\n# A tibble: 268 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1           NA <NA>           <NA>    8.94e6 TOTAL   1444901  1.71e7 2022-06-01\n 2   3172051003 JAKARTA UTARA  PADEMA… 2.39e4 ANCOL      4440  4.36e4 2022-06-01\n 3   3173041007 JAKARTA BARAT  TAMBORA 2.94e4 ANGKE      5083  5.50e4 2022-06-01\n 4   3175041005 JAKARTA TIMUR  KRAMAT… 2.91e4 BALE K…    5671  5.08e4 2022-06-01\n 5   3175031003 JAKARTA TIMUR  JATINE… 9.75e3 BALI M…    1588  1.90e4 2022-06-01\n 6   3175101006 JAKARTA TIMUR  CIPAYU… 2.63e4 BAMBU …    3824  5.17e4 2022-06-01\n 7   3174031002 JAKARTA SELAT… MAMPAN… 2.16e4 BANGKA     3803  3.96e4 2022-06-01\n 8   3175051002 JAKARTA TIMUR  PASAR … 2.39e4 BARU       3146  4.97e4 2022-06-01\n 9   3175041004 JAKARTA TIMUR  KRAMAT… 4.79e4 BATU A…    8984  8.63e4 2022-06-01\n10   3171071002 JAKARTA PUSAT  TANAH … 2.15e4 BENDUN…    3607  4.24e4 2022-06-01\n# … with 258 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\ndate_value_8 <- \"March 01, 2022\"\nrenamed_list_8 <- renamed_list[[8]]\nrenamed_list_8$date <- as.Date(date_value_8, format = \"%B %d, %Y\")\n\nrenamed_list_8\n\n# A tibble: 268 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1           NA <NA>           <NA>    8.94e6 TOTAL   1516200  1.40e7 2022-03-01\n 2   3172051003 JAKARTA UTARA  PADEMA… 2.39e4 ANCOL      4590  3.61e4 2022-03-01\n 3   3173041007 JAKARTA BARAT  TAMBORA 2.94e4 ANGKE      5315  4.48e4 2022-03-01\n 4   3175041005 JAKARTA TIMUR  KRAMAT… 2.91e4 BALE K…    5897  4.30e4 2022-03-01\n 5   3175031003 JAKARTA TIMUR  JATINE… 9.75e3 BALI M…    1649  1.54e4 2022-03-01\n 6   3175101006 JAKARTA TIMUR  CIPAYU… 2.63e4 BAMBU …    4029  4.24e4 2022-03-01\n 7   3174031002 JAKARTA SELAT… MAMPAN… 2.16e4 BANGKA     3946  3.33e4 2022-03-01\n 8   3175051002 JAKARTA TIMUR  PASAR … 2.39e4 BARU       3341  3.93e4 2022-03-01\n 9   3175041004 JAKARTA TIMUR  KRAMAT… 4.79e4 BATU A…    9376  7.19e4 2022-03-01\n10   3171071002 JAKARTA PUSAT  TANAH … 2.15e4 BENDUN…    3771  3.38e4 2022-03-01\n# … with 258 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\ndate_value_9 <- \"May 01, 2022\"\nrenamed_list_9 <- renamed_list[[9]]\nrenamed_list_9$date <- as.Date(date_value_9, format = \"%B %d, %Y\")\n\nrenamed_list_9\n\n# A tibble: 268 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1           NA <NA>           <NA>    8.94e6 TOTAL   1455001  1.69e7 2022-05-01\n 2   3172051003 JAKARTA UTARA  PADEMA… 2.39e4 ANCOL      4456  4.31e4 2022-05-01\n 3   3173041007 JAKARTA BARAT  TAMBORA 2.94e4 ANGKE      5106  5.43e4 2022-05-01\n 4   3175041005 JAKARTA TIMUR  KRAMAT… 2.91e4 BALE K…    5707  5.02e4 2022-05-01\n 5   3175031003 JAKARTA TIMUR  JATINE… 9.75e3 BALI M…    1599  1.88e4 2022-05-01\n 6   3175101006 JAKARTA TIMUR  CIPAYU… 2.63e4 BAMBU …    3860  5.11e4 2022-05-01\n 7   3174031002 JAKARTA SELAT… MAMPAN… 2.16e4 BANGKA     3821  3.92e4 2022-05-01\n 8   3175051002 JAKARTA TIMUR  PASAR … 2.39e4 BARU       3163  4.92e4 2022-05-01\n 9   3175041004 JAKARTA TIMUR  KRAMAT… 4.79e4 BATU A…    9045  8.52e4 2022-05-01\n10   3171071002 JAKARTA PUSAT  TANAH … 2.15e4 BENDUN…    3634  4.18e4 2022-05-01\n# … with 258 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\ndate_value_10 <- \"November 01, 2021\"\nrenamed_list_10 <- renamed_list[[10]]\nrenamed_list_10$date <- as.Date(date_value_10, format = \"%B %d, %Y\")\n\nrenamed_list_10\n\n# A tibble: 268 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1           NA <NA>           <NA>    8.94e6 TOTAL   1875655  1.28e7 2021-11-01\n 2   3172051003 JAKARTA UTARA  PADEMA… 2.39e4 ANCOL      5965  3.25e4 2021-11-01\n 3   3173041007 JAKARTA BARAT  TAMBORA 2.94e4 ANGKE      6538  4.10e4 2021-11-01\n 4   3175041005 JAKARTA TIMUR  KRAMAT… 2.91e4 BALE K…    7561  3.80e4 2021-11-01\n 5   3175031003 JAKARTA TIMUR  JATINE… 9.75e3 BALI M…    2118  1.39e4 2021-11-01\n 6   3175101006 JAKARTA TIMUR  CIPAYU… 2.63e4 BAMBU …    5002  3.86e4 2021-11-01\n 7   3174031002 JAKARTA SELAT… MAMPAN… 2.16e4 BANGKA     4732  3.04e4 2021-11-01\n 8   3175051002 JAKARTA TIMUR  PASAR … 2.39e4 BARU       4080  3.65e4 2021-11-01\n 9   3175041004 JAKARTA TIMUR  KRAMAT… 4.79e4 BATU A…   12177  6.37e4 2021-11-01\n10   3171071002 JAKARTA PUSAT  TANAH … 2.15e4 BENDUN…    4486  3.12e4 2021-11-01\n# … with 258 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\ndate_value_11 <- \"October 01, 2021\"\nrenamed_list_11 <- renamed_list[[11]]\nrenamed_list_11$date <- as.Date(date_value_11, format = \"%B %d, %Y\")\n\nrenamed_list_11\n\n# A tibble: 314 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n   <chr>        <chr>          <chr>   <chr>  <chr>   <chr>   <chr>   <date>    \n 1 <NA>         <NA>           <NA>    89412… TOTAL   2221074 119009… 2021-10-01\n 2 3172051003   JAKARTA UTARA  PADEMA… 23947  ANCOL   6647    30705   2021-10-01\n 3 3173041007   JAKARTA BARAT  TAMBORA 29381  ANGKE   7559    38293   2021-10-01\n 4 3175041005   JAKARTA TIMUR  KRAMAT… 29074  BALE K… 8660    34839   2021-10-01\n 5 3175031003   JAKARTA TIMUR  JATINE… 9752   BALI M… 2496    12921   2021-10-01\n 6 3175101006   JAKARTA TIMUR  CIPAYU… 26285  BAMBU … 6055    35630   2021-10-01\n 7 3174031002   JAKARTA SELAT… MAMPAN… 21566  BANGKA  5745    27996   2021-10-01\n 8 3175051002   JAKARTA TIMUR  PASAR … 23886  BARU    4873    34571   2021-10-01\n 9 3175041004   JAKARTA TIMUR  KRAMAT… 47898  BATU A… 14035   58620   2021-10-01\n10 3171071002   JAKARTA PUSAT  TANAH … 21494  BENDUN… 5209    29069   2021-10-01\n# … with 304 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\ndate_value_12 <- \"September 01, 2021\"\nrenamed_list_12 <- renamed_list[[12]]\nrenamed_list_12$date <- as.Date(date_value_12, format = \"%B %d, %Y\")\n\nrenamed_list_12\n\n# A tibble: 268 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1           NA <NA>           <NA>    8.94e6 TOTAL   3259430 9159398 2021-09-01\n 2   3172051003 JAKARTA UTARA  PADEMA… 2.39e4 ANCOL      9138   24039 2021-09-01\n 3   3173041007 JAKARTA BARAT  TAMBORA 2.94e4 ANGKE     10347   29767 2021-09-01\n 4   3175041005 JAKARTA TIMUR  KRAMAT… 2.91e4 BALE K…   12455   24587 2021-09-01\n 5   3175031003 JAKARTA TIMUR  JATINE… 9.75e3 BALI M…    3689    9840 2021-09-01\n 6   3175101006 JAKARTA TIMUR  CIPAYU… 2.63e4 BAMBU …    9350   27526 2021-09-01\n 7   3174031002 JAKARTA SELAT… MAMPAN… 2.16e4 BANGKA     8338   21424 2021-09-01\n 8   3175051002 JAKARTA TIMUR  PASAR … 2.39e4 BARU       7676   27701 2021-09-01\n 9   3175041004 JAKARTA TIMUR  KRAMAT… 4.79e4 BATU A…   19816   43746 2021-09-01\n10   3171071002 JAKARTA PUSAT  TANAH … 2.15e4 BENDUN…    8012   22259 2021-09-01\n# … with 258 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\n\nStep 4: Changing data type + Joining all the Aspatial CSV files together\nNote that I am unable to join renamed_list_9 data set because of the data type as shown below -> quantitative data should be categorize as number instead of char. Therefore, there is a conflict when joining with the other data files.\nTo resolve the issue, we will need to change the data type of village code, target, unvaccinated, and vaccinated data fields to numeric type before joining.\n\n\n#Convert the respective variables to numeric data type \n\nrenamed_list_11 <- renamed_list_11 %>% \n  filter(!str_detect(Village_Code, \"\\\\D\")) %>% \n  mutate(Village_Code = as.numeric(Village_Code), Target = as.numeric(Target), Unvaccinated = as.numeric(Unvaccinated), Vaccinated = as.numeric(Vaccinated))\n\nrenamed_list_11\n\n# A tibble: 311 × 8\n   Village_Code City_Area      Distr…¹ Target Sub_D…² Unvac…³ Vacci…⁴ date      \n          <dbl> <chr>          <chr>    <dbl> <chr>     <dbl>   <dbl> <date>    \n 1   3172051003 JAKARTA UTARA  PADEMA…  23947 ANCOL      6647   30705 2021-10-01\n 2   3173041007 JAKARTA BARAT  TAMBORA  29381 ANGKE      7559   38293 2021-10-01\n 3   3175041005 JAKARTA TIMUR  KRAMAT…  29074 BALE K…    8660   34839 2021-10-01\n 4   3175031003 JAKARTA TIMUR  JATINE…   9752 BALI M…    2496   12921 2021-10-01\n 5   3175101006 JAKARTA TIMUR  CIPAYU…  26285 BAMBU …    6055   35630 2021-10-01\n 6   3174031002 JAKARTA SELAT… MAMPAN…  21566 BANGKA     5745   27996 2021-10-01\n 7   3175051002 JAKARTA TIMUR  PASAR …  23886 BARU       4873   34571 2021-10-01\n 8   3175041004 JAKARTA TIMUR  KRAMAT…  47898 BATU A…   14035   58620 2021-10-01\n 9   3171071002 JAKARTA PUSAT  TANAH …  21494 BENDUN…    5209   29069 2021-10-01\n10   3175031002 JAKARTA TIMUR  JATINE…  36689 BIDARA…   10559   45344 2021-10-01\n# … with 301 more rows, and abbreviated variable names ¹​District,\n#   ²​Sub_District, ³​Unvaccinated, ⁴​Vaccinated\n\n\n\nNow that we have converted the data type in renamed_list_11, we can proceed to join all the Aspatial cleaned data files!\n\ncombined_df <- bind_rows(renamed_list_1,renamed_list_2,renamed_list_3,renamed_list_4,renamed_list_5,renamed_list_6,renamed_list_7, renamed_list_8,renamed_list_9,renamed_list_10,renamed_list_11, renamed_list_12)\n\n\nThe combined data file has a total of 3259 observations (rows) and 8 variables (columns).\nStep 5: Removing “TOTAL” in Sub_district column\nNext, since we are interested in finding out the vaccine rate in the different sub_district in Jakarta, we will then remove away the “TOTAL” row in each month of data file to avoid visualisation noise later when we plot the maps.\n\n# remove \"TOTAL\" in sub-district column\n\nTOTAL_removed_combined_df <- combined_df[combined_df$`Sub_District` != \"TOTAL\", ]"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#identifying-mismatched-records",
    "href": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#identifying-mismatched-records",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "5.1 Identifying Mismatched Records**",
    "text": "5.1 Identifying Mismatched Records**"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#mapping-monthly-cumulative-vaccinate-rate-for-12-months",
    "href": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#mapping-monthly-cumulative-vaccinate-rate-for-12-months",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "6.1 Mapping: Monthly Cumulative Vaccinate Rate (for 12 months)",
    "text": "6.1 Mapping: Monthly Cumulative Vaccinate Rate (for 12 months)\nPrepare the monthly vaccination rate maps by using appropriate tmap functions.\n\n# Testing for one month\ntmap_mode(\"plot\")\ntm_shape(vaccine_rate)+\n  tm_fill(\"2021-07-01\", \n          n= 6,\n          style = \"jenks\", \n          title = \"Vaccine Rate\") +\n  tm_layout(main.title = \"Distribution of COVID-19 Case Rate in July 2021\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.5, \n            legend.width = 0.4,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n# A function to prepare for plotting 12 months maps\njenks_plot <- function(df, varname) {\n  tm_shape(vaccine_rate) +\n    tm_polygons() +\n  tm_shape(df) +\n    tm_fill(varname, \n          n= 6,\n          style = \"jenks\", \n          title = \"Vaccine Rate\") +\n    tm_layout(main.title = varname,\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          legend.height = 0.45, \n          legend.width = 0.35,\n          frame = TRUE) +\n    tm_borders(alpha = 0.5)\n}\n\n\n# split it up into multiple arranges to make it easier to see\ntmap_mode(\"plot\")\ntmap_arrange(jenks_plot(vaccine_rate, \"2021-07-01\"),\n             jenks_plot(vaccine_rate, \"2021-08-01\"),\n             jenks_plot(vaccine_rate, \"2021-09-01\"),\n             jenks_plot(vaccine_rate, \"2021-10-01\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(vaccine_rate, \"2021-11-01\"),\n             jenks_plot(vaccine_rate, \"2021-12-01\"),\n             jenks_plot(vaccine_rate, \"2022-01-01\"),\n             jenks_plot(vaccine_rate, \"2022-02-01\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(vaccine_rate, \"2022-03-01\"),\n             jenks_plot(vaccine_rate, \"2022-04-01\"),\n             jenks_plot(vaccine_rate, \"2022-05-01\"),\n             jenks_plot(vaccine_rate, \"2022-06-01\"))\n\n\n\n\nNow, let’s do some analysis of the spatial patterns for the 12 months vaccine rate."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#describe-the-spatial-patterns-revealed-by-the-choropleth-maps",
    "href": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#describe-the-spatial-patterns-revealed-by-the-choropleth-maps",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "6.2 Describe the Spatial Patterns Revealed by the Choropleth Maps",
    "text": "6.2 Describe the Spatial Patterns Revealed by the Choropleth Maps"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#analysis-of-the-spatial-patterns-revealed-by-the-choropleth-maps",
    "href": "Take_Home_Ex/Take_Home_Ex02/Take_Home_Ex02.html#analysis-of-the-spatial-patterns-revealed-by-the-choropleth-maps",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "6.2 Analysis of the Spatial Patterns Revealed by the Choropleth Maps",
    "text": "6.2 Analysis of the Spatial Patterns Revealed by the Choropleth Maps\nblah blah blah\n\nAnalyse the grow in vaccine rate across time (change darker overtime)\ntop 3 districts with the highest vaccine rate"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "",
    "text": "Since late December 2019, an outbreak of a novel coronavirus disease (COVID-19; previously known as 2019-nCoV) was reported in Wuhan, China, which had subsequently affected 210 countries worldwide. In general, COVID-19 is an acute resolved disease but it can also be deadly, with a 2% case fatality rate.\nThe COVID-19 vaccination in Indonesia is an ongoing mass immunisation in response to the COVID-19 pandemic in Indonesia. On 13 January 2021, the program commenced when President Joko Widodo was vaccinated at the presidential palace. In terms of total doses given, Indonesia ranks third in Asia and fifth in the world.\n\nAccording to wikipedia, as of 5 February 2023 at 18:00 WIB (UTC+7), 204,266,655 people had received the first dose of the vaccine and 175,131,893 people had been fully vaccinated; 69,597,474 of them had been inoculated with the booster or the third dose, while 1,585,164 had received the fourth dose. Jakarta has the highest percentage of population fully vaccinated with 103.46%, followed by Bali and Special Region of Yogyakarta with 85.45% and 83.02% respectively.\n\n\nDespite its compactness, the cumulative vaccination rate are not evenly distributed within DKI Jarkata. The question is where are the sub-districts with relatively higher number of vaccination rate and how they changed over time (July 2021 to June 2022).\nExploratory Spatial Data Analysis (ESDA) hold tremendous potential to address complex problems facing society. In this study, students are tasked to apply appropriate Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) to undercover the spatio-temporal trends of COVID-19 vaccination in DKI Jakarta."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#installing-and-loading-the-r-packages",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#installing-and-loading-the-r-packages",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "3.1 Installing and Loading the R packages",
    "text": "3.1 Installing and Loading the R packages\n\npacman::p_load(sf,tmap,tidyverse,sfdep,plotly,zoo,readxl,Kendall)\n\nThe R packages installed that we will be using for analysis are:\n\nsf: used for importing, managing, and processing geospatial data\ntmap: used for creating thematic maps, such as choropleth and bubble maps\ntidyverse: a collection of packages for data science tasks\nsfdep: An interface for ‘spdep’ to integrate with ‘sf’ objects and the ‘tidyverse’\nplotly: used for creating interactive and dynamic visualisations in R\nzoo: A popular package for working with time series data\nreadxl: read excel files (.xlsx)\nKendall: provide a set of tools for working with Kendall’s rank correlation coefficient"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#importing-geospatial-data",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#importing-geospatial-data",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "4.1 Importing Geospatial Data",
    "text": "4.1 Importing Geospatial Data\n\nbd_jakarta <- st_read(dsn=\"data/geospatial\",\n                     layer=\"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\")\n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex02_EndMonths\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84\n\n\nFrom the output message, we learn that:\n\nGeometry type is multipolygon\n269 features and 161 fields\nAssigned CRS is WGS 84 (geographic coordinate system)\nDimension is XY\n\n\n4.1.1 Geospatial Data Pre-Processing (Cleaning)\nSimilar to our take-home assignment 1, before we can visualise our datasets and do the necessary analysis, we have to do data cleaning which is an important step in any data science task including geospatial data science. Things to check:\n\nInvalid geometries\nMissing value\n\n(1) Invalid geometries\n\nlength(which(st_is_valid(bd_jakarta) == FALSE))\n\n[1] 0\n\n\n(2) Missing value\n\nbd_jakarta[rowSums(is.na(bd_jakarta))!=0,]\n\nSimple feature collection with 2 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.8412 ymin: -6.154036 xmax: 106.8612 ymax: -6.144973\nGeodetic CRS:  WGS 84\n    OBJECT_ID KODE_DESA             DESA   KODE    PROVINSI KAB_KOTA KECAMATAN\n243     25645  31888888     DANAU SUNTER 318888 DKI JAKARTA     <NA>      <NA>\n244     25646  31888888 DANAU SUNTER DLL 318888 DKI JAKARTA     <NA>      <NA>\n    DESA_KELUR JUMLAH_PEN JUMLAH_KK LUAS_WILAY KEPADATAN PERPINDAHA JUMLAH_MEN\n243       <NA>          0         0          0         0          0          0\n244       <NA>          0         0          0         0          0          0\n    PERUBAHAN WAJIB_KTP SILAM KRISTEN KHATOLIK HINDU BUDHA KONGHUCU KEPERCAYAA\n243         0         0     0       0        0     0     0        0          0\n244         0         0     0       0        0     0     0        0          0\n    PRIA WANITA BELUM_KAWI KAWIN CERAI_HIDU CERAI_MATI U0 U5 U10 U15 U20 U25\n243    0      0          0     0          0          0  0  0   0   0   0   0\n244    0      0          0     0          0          0  0  0   0   0   0   0\n    U30 U35 U40 U45 U50 U55 U60 U65 U70 U75 TIDAK_BELU BELUM_TAMA TAMAT_SD SLTP\n243   0   0   0   0   0   0   0   0   0   0          0          0        0    0\n244   0   0   0   0   0   0   0   0   0   0          0          0        0    0\n    SLTA DIPLOMA_I DIPLOMA_II DIPLOMA_IV STRATA_II STRATA_III BELUM_TIDA\n243    0         0          0          0         0          0          0\n244    0         0          0          0         0          0          0\n    APARATUR_P TENAGA_PEN WIRASWASTA PERTANIAN NELAYAN AGAMA_DAN PELAJAR_MA\n243          0          0          0         0       0         0          0\n244          0          0          0         0       0         0          0\n    TENAGA_KES PENSIUNAN LAINNYA GENERATED KODE_DES_1 BELUM_ MENGUR_ PELAJAR_\n243          0         0       0      <NA>       <NA>      0       0        0\n244          0         0       0      <NA>       <NA>      0       0        0\n    PENSIUNA_1 PEGAWAI_ TENTARA KEPOLISIAN PERDAG_ PETANI PETERN_ NELAYAN_1\n243          0        0       0          0       0      0       0         0\n244          0        0       0          0       0      0       0         0\n    INDUSTR_ KONSTR_ TRANSP_ KARYAW_ KARYAW1 KARYAW1_1 KARYAW1_12 BURUH BURUH_\n243        0       0       0       0       0         0          0     0      0\n244        0       0       0       0       0         0          0     0      0\n    BURUH1 BURUH1_1 PEMBANT_ TUKANG TUKANG_1 TUKANG_12 TUKANG__13 TUKANG__14\n243      0        0        0      0        0         0          0          0\n244      0        0        0      0        0         0          0          0\n    TUKANG__15 TUKANG__16 TUKANG__17 PENATA PENATA_ PENATA1_1 MEKANIK SENIMAN_\n243          0          0          0      0       0         0       0        0\n244          0          0          0      0       0         0       0        0\n    TABIB PARAJI_ PERANCA_ PENTER_ IMAM_M PENDETA PASTOR WARTAWAN USTADZ JURU_M\n243     0       0        0       0      0       0      0        0      0      0\n244     0       0        0       0      0       0      0        0      0      0\n    PROMOT ANGGOTA_ ANGGOTA1 ANGGOTA1_1 PRESIDEN WAKIL_PRES ANGGOTA1_2\n243      0        0        0          0        0          0          0\n244      0        0        0          0        0          0          0\n    ANGGOTA1_3 DUTA_B GUBERNUR WAKIL_GUBE BUPATI WAKIL_BUPA WALIKOTA WAKIL_WALI\n243          0      0        0          0      0          0        0          0\n244          0      0        0          0      0          0        0          0\n    ANGGOTA1_4 ANGGOTA1_5 DOSEN GURU PILOT PENGACARA_ NOTARIS ARSITEK AKUNTA_\n243          0          0     0    0     0          0       0       0       0\n244          0          0     0    0     0          0       0       0       0\n    KONSUL_ DOKTER BIDAN PERAWAT APOTEK_ PSIKIATER PENYIA_ PENYIA1 PELAUT\n243       0      0     0       0       0         0       0       0      0\n244       0      0     0       0       0         0       0       0      0\n    PENELITI SOPIR PIALAN PARANORMAL PEDAGA_ PERANG_ KEPALA_ BIARAW_ WIRASWAST_\n243        0     0      0          0       0       0       0       0          0\n244        0     0      0          0       0       0       0       0          0\n    LAINNYA_12 LUAS_DESA KODE_DES_3 DESA_KEL_1 KODE_12\n243          0         0       <NA>       <NA>       0\n244          0         0       <NA>       <NA>       0\n                          geometry\n243 MULTIPOLYGON (((106.8612 -6...\n244 MULTIPOLYGON (((106.8504 -6...\n\n\nFrom the output generated above, we can tell that there are two particulars rows with missing values for KAB_KOTA (City), KECAMATAN (District), and DESA_KELUR (Village), as well as other fields such as OBJECT_ID 25645 and 25646. Therefore, we will need to remove them from the data.\n\n#remove rows that have an NA value in DESA_KELUR\nbd_jakarta <- na.omit(bd_jakarta,c(\"DESA_KELUR\"))\n\n\n#check if there are any more missing values\nbd_jakarta[rowSums(is.na(bd_jakarta))!=0,]\n\nSimple feature collection with 0 features and 161 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n  [1] OBJECT_ID  KODE_DESA  DESA       KODE       PROVINSI   KAB_KOTA  \n  [7] KECAMATAN  DESA_KELUR JUMLAH_PEN JUMLAH_KK  LUAS_WILAY KEPADATAN \n [13] PERPINDAHA JUMLAH_MEN PERUBAHAN  WAJIB_KTP  SILAM      KRISTEN   \n [19] KHATOLIK   HINDU      BUDHA      KONGHUCU   KEPERCAYAA PRIA      \n [25] WANITA     BELUM_KAWI KAWIN      CERAI_HIDU CERAI_MATI U0        \n [31] U5         U10        U15        U20        U25        U30       \n [37] U35        U40        U45        U50        U55        U60       \n [43] U65        U70        U75        TIDAK_BELU BELUM_TAMA TAMAT_SD  \n [49] SLTP       SLTA       DIPLOMA_I  DIPLOMA_II DIPLOMA_IV STRATA_II \n [55] STRATA_III BELUM_TIDA APARATUR_P TENAGA_PEN WIRASWASTA PERTANIAN \n [61] NELAYAN    AGAMA_DAN  PELAJAR_MA TENAGA_KES PENSIUNAN  LAINNYA   \n [67] GENERATED  KODE_DES_1 BELUM_     MENGUR_    PELAJAR_   PENSIUNA_1\n [73] PEGAWAI_   TENTARA    KEPOLISIAN PERDAG_    PETANI     PETERN_   \n [79] NELAYAN_1  INDUSTR_   KONSTR_    TRANSP_    KARYAW_    KARYAW1   \n [85] KARYAW1_1  KARYAW1_12 BURUH      BURUH_     BURUH1     BURUH1_1  \n [91] PEMBANT_   TUKANG     TUKANG_1   TUKANG_12  TUKANG__13 TUKANG__14\n [97] TUKANG__15 TUKANG__16 TUKANG__17 PENATA     PENATA_    PENATA1_1 \n[103] MEKANIK    SENIMAN_   TABIB      PARAJI_    PERANCA_   PENTER_   \n[109] IMAM_M     PENDETA    PASTOR     WARTAWAN   USTADZ     JURU_M    \n[115] PROMOT     ANGGOTA_   ANGGOTA1   ANGGOTA1_1 PRESIDEN   WAKIL_PRES\n[121] ANGGOTA1_2 ANGGOTA1_3 DUTA_B     GUBERNUR   WAKIL_GUBE BUPATI    \n[127] WAKIL_BUPA WALIKOTA   WAKIL_WALI ANGGOTA1_4 ANGGOTA1_5 DOSEN     \n[133] GURU       PILOT      PENGACARA_ NOTARIS    ARSITEK    AKUNTA_   \n[139] KONSUL_    DOKTER     BIDAN      PERAWAT    APOTEK_    PSIKIATER \n[145] PENYIA_    PENYIA1    PELAUT     PENELITI   SOPIR      PIALAN    \n[151] PARANORMAL PEDAGA_    PERANG_    KEPALA_    BIARAW_    WIRASWAST_\n[157] LAINNYA_12 LUAS_DESA  KODE_DES_3 DESA_KEL_1 KODE_12    geometry  \n<0 rows> (or 0-length row.names)\n\n\nGreat! The data now is cleaned with no missing values! :)\n\n\n4.1.2 Verifying & Data Transformation\nLet’s firs retrieve the coordinate systems of bd_jakarta.\n\nst_crs(bd_jakarta)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nAccording to the output message above, we learn that the current assigned coordinate system is WGS 84, the “World Geodetic System 1984”. However, in the context of this data set, it is an Indonesian-specific geospatial data set. Therefore, we should be using the national CRS of Indonesia, DGN95, the “Datum Geodesi Nasional 1995”, ESPG code 23845. Let’s rectify that:\n\n#transform WGS84 to DGN95, ESPG code 23845\nbd_jakarta <- st_transform(bd_jakarta, 23845)\nst_crs(bd_jakarta)\n\nCoordinate Reference System:\n  User input: EPSG:23845 \n  wkt:\nPROJCRS[\"DGN95 / Indonesia TM-3 zone 54.1\",\n    BASEGEOGCRS[\"DGN95\",\n        DATUM[\"Datum Geodesi Nasional 1995\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4755]],\n    CONVERSION[\"Indonesia TM-3 zone 54.1\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",139.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9999,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",200000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",1500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre.\"],\n        AREA[\"Indonesia - onshore east of 138°E.\"],\n        BBOX[-9.19,138,-1.49,141.01]],\n    ID[\"EPSG\",23845]]\n\n\nFrom the above output message, we can tell that the original coordinate system (WGS 84) has been successfully transformed to Indonesia coordinate system (DGN 95).\nNow, let’s plot the geometry to quickly visualise the data.\n\n\n4.1.3 Verifying & Removing Outer Islands\n\nplot(st_geometry(bd_jakarta))\n\n\n\n\nAs we can see, bd_jakarta includes both the mainland and the outer islands. However, in the context of this assignment, we are not interested in the outer islands. Therefore, we can eliminate them out.\nWe will first output the unique values of PROVINSE (province) and KAB_KOTA (city) fields to inspect the distribution of clusters.\n\n# outputs unique values of province and city fields\nunique(bd_jakarta$\"KAB_KOTA\")\n\n[1] \"JAKARTA BARAT\"    \"JAKARTA PUSAT\"    \"KEPULAUAN SERIBU\" \"JAKARTA UTARA\"   \n[5] \"JAKARTA TIMUR\"    \"JAKARTA SELATAN\" \n\nunique(bd_jakarta$\"PROVINSI\")\n\n[1] \"DKI JAKARTA\"\n\n\nNoticed from the output message above, the province are the same for all rows. However, as for KAB_KOTA, cities of Jakarta, realised that most of the cities have a JAKARTA prefix except for KEPULAUAN SERIBU (translated to ‘Thousand Islands’) refers to the outer islands. Just to check, we will plot the geometry of the geospatial data set once again with cluster of colours.\n\ntm_shape(bd_jakarta) + \n  tm_polygons(\"KAB_KOTA\")\n\n\n\n\nNow we can clearly identify the outer islands and they are the “orange” mini clusters spreading outside the main islands. We will then remove them from our data set:\n\nbd_jakarta <- filter(bd_jakarta, KAB_KOTA != \"KEPULAUAN SERIBU\")\n\nLet us check if they are all removed by plotting the map again!\n\ntm_shape(bd_jakarta) + \n  tm_polygons(\"KAB_KOTA\")\n\n\n\n\nYes! we have successfully excluded the outer islands from the map and left us with only the mainland which are the cities that start with the “JAKARTA” prefix.\n\n\n4.1.4 Retaining relevant columns & Renaming them with translation (English)\nThere are too many columns in the date file bd_jakarta and we will need to only retain the fields that are relevant to our analysis which are the first 9 fields in the bd_jakarta data frame.\n\nbd_jakarta <- bd_jakarta[, 0:9]\n\nNext, we need to also rename the retained columns to English language for ease of understanding for analysis later.\n\nbd_jakarta <- bd_jakarta %>% \n  dplyr::rename(\n    Object_ID=OBJECT_ID,\n    Province=PROVINSI, \n    City=KAB_KOTA, \n    District=KECAMATAN, \n    Village_Code=KODE_DESA, \n    Village=DESA, \n    Sub_District=DESA_KELUR,\n    Code=KODE, \n    Total_Population=JUMLAH_PEN\n    )\n\nWe are done with our Geospatial data processing and now let’s move on the Aspatial data!"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#importing-aspatial-data",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#importing-aspatial-data",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "4.2 Importing Aspatial Data",
    "text": "4.2 Importing Aspatial Data\nIn our “data/aspatial” folder, we have multiple sub-district level data of COVID-19 cases in DKI Jarkata between July 2021 to June 2022. Therefore, we would want to find a more efficient way to import all of them instead of one by one.\nIn the code chunk below, the list.files() function is used to list all the files in the directory “data/aspatial/” that match the pattern “*.xlsx”. The resulting file names are stored in the xlsx_files variable.\nThe lapply() function is used to iterate over the elements of xlsx_files, i.e., the file names, and apply the function provided in the second argument to each element. The function provided reads in the Excel file using the read_xlsx() function from the readxl package and returns a data frame.\nThe resulting list of data frames is stored in the data_list variable.\n\nxlsx_files <- list.files(path = \"data/aspatial/\", pattern = \"*.xlsx\")\n\ndata_list <- lapply(xlsx_files, function(file) {\n  read_xlsx(paste(\"data/aspatial/\", file, sep = \"\"))\n})\n\n\n4.2.1 Data Pre-Processing (Cleaning)\nFirstly, let’s take a quick glance of all the data sets in the list of imported aspatial files.\n\ndata_list\n\n[[1]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 1517196 7424015 6590380  1.40e7\n 2 3172051003    JAKART… PADEMA… ANCOL     23947    4592   19355   16687  3.60e4\n 3 3173041007    JAKART… TAMBORA ANGKE     29381    5319   24062   20738  4.48e4\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074    5903   23171   19754  4.29e4\n 5 3175031003    JAKART… JATINE… BALI M…    9752    1649    8103    7245  1.53e4\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285    4030   22255   20160  4.24e4\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566    3950   17616   15662  3.33e4\n 8 3175051002    JAKART… PASAR … BARU      23886    3344   20542   18754  3.93e4\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898    9382   38516   33404  7.19e4\n10 3171071002    JAKART… TANAH … BENDUN…   21494    3772   17722   16033  3.38e4\n# … with 258 more rows, 18 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …\n\n[[2]]\n# A tibble: 268 × 34\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ JUMLA…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 1453423 7487788 6727002 2720796\n 2 3172051003    JAKART… PADEMA… ANCOL     23947    4449   19498   17027    6568\n 3 3173041007    JAKART… TAMBORA ANGKE     29381    5101   24280   21134    8915\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074    5699   23375   20315    6491\n 5 3175031003    JAKART… JATINE… BALI M…    9752    1598    8154    7395    3225\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285    3857   22428   20483    8166\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566    3818   17748   15958    5494\n 8 3175051002    JAKART… PASAR … BARU      23886    3160   20726   19107    9336\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898    9041   38857   34244   12107\n10 3171071002    JAKART… TANAH … BENDUN…   21494    3627   17867   16306    7651\n# … with 258 more rows, 25 more variables: `TOTAL VAKSIN\\r\\nDIBERIKAN` <dbl>,\n#   `LANSIA\\r\\nDOSIS 1` <dbl>, `LANSIA\\r\\nDOSIS 2` <dbl>,\n#   `LANSIA\\r\\nDOSIS 3` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 3` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>, …\n\n[[3]]\n# A tibble: 268 × 34\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ JUMLA…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 1431393 7509818 6756584 3031594\n 2 3172051003    JAKART… PADEMA… ANCOL     23947    4402   19545   17106    7369\n 3 3173041007    JAKART… TAMBORA ANGKE     29381    5041   24340   21213   10086\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074    5632   23442   20416    7398\n 5 3175031003    JAKART… JATINE… BALI M…    9752    1576    8176    7427    3602\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285    3791   22494   20563    9190\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566    3778   17788   16023    6170\n 8 3175051002    JAKART… PASAR … BARU      23886    3110   20776   19161   10067\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898    8917   38981   34405   13732\n10 3171071002    JAKART… TANAH … BENDUN…   21494    3580   17914   16378    8434\n# … with 258 more rows, 25 more variables: `TOTAL VAKSIN\\r\\nDIBERIKAN` <dbl>,\n#   `LANSIA\\r\\nDOSIS 1` <dbl>, `LANSIA\\r\\nDOSIS 2` <dbl>,\n#   `LANSIA\\r\\nDOSIS 3` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 3` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>, …\n\n[[4]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 1723821 7217390 6172636  1.34e7\n 2 3172051003    JAKART… PADEMA… ANCOL     23947    5527   18420   15466  3.39e4\n 3 3173041007    JAKART… TAMBORA ANGKE     29381    5986   23395   19404  4.28e4\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074    6802   22272   18084  4.04e4\n 5 3175031003    JAKART… JATINE… BALI M…    9752    1920    7832    6773  1.46e4\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285    4612   21673   18694  4.04e4\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566    4346   17220   14694  3.19e4\n 8 3175051002    JAKART… PASAR … BARU      23886    3776   20110   17781  3.79e4\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898   10985   36913   30676  6.76e4\n10 3171071002    JAKART… TANAH … BENDUN…   21494    4187   17307   15114  3.24e4\n# … with 258 more rows, 18 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …\n\n[[5]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 2235772 6705439 5171697  1.19e7\n 2 3172051003    JAKART… PADEMA… ANCOL     23947    6688   17259   13376  3.06e4\n 3 3173041007    JAKART… TAMBORA ANGKE     29381    7581   21800   16438  3.82e4\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074    8708   20366   14412  3.48e4\n 5 3175031003    JAKART… JATINE… BALI M…    9752    2517    7235    5660  1.29e4\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285    6252   20033   15380  3.54e4\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566    5785   15781   12158  2.79e4\n 8 3175051002    JAKART… PASAR … BARU      23886    4899   18987   15536  3.45e4\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898   14105   33793   24706  5.85e4\n10 3171071002    JAKART… TANAH … BENDUN…   21494    5239   16255   12764  2.90e4\n# … with 258 more rows, 18 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …\n\n[[6]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 3277484 5663727 3412906 9076633\n 2 3172051003    JAKART… PADEMA… ANCOL     23947    9191   14756    8935   23691\n 3 3173041007    JAKART… TAMBORA ANGKE     29381   10400   18981   10470   29451\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074   12510   16564    7766   24330\n 5 3175031003    JAKART… JATINE… BALI M…    9752    3704    6048    3671    9719\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285    9416   16869   10118   26987\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566    8345   13221    8177   21398\n 8 3175051002    JAKART… PASAR … BARU      23886    7751   16135   11238   27373\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898   19908   27990   15342   43332\n10 3171071002    JAKART… TANAH … BENDUN…   21494    8033   13461    8671   22132\n# … with 258 more rows, 18 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …\n\n[[7]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 1623736 7317475 6370175  1.37e7\n 2 3172051003    JAKART… PADEMA… ANCOL     23947    5062   18885   15996  3.49e4\n 3 3173041007    JAKART… TAMBORA ANGKE     29381    5626   23755   20026  4.38e4\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074    6335   22739   18925  4.17e4\n 5 3175031003    JAKART… JATINE… BALI M…    9752    1782    7970    7003  1.50e4\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285    4373   21912   19400  4.13e4\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566    4169   17397   15138  3.25e4\n 8 3175051002    JAKART… PASAR … BARU      23886    3579   20307   18239  3.85e4\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898   10178   37720   32015  6.97e4\n10 3171071002    JAKART… TANAH … BENDUN…   21494    3993   17501   15541  3.30e4\n# … with 258 more rows, 18 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …\n\n[[8]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 1538221 7402990 6516678  1.39e7\n 2 3172051003    JAKART… PADEMA… ANCOL     23947    4647   19300   16477  3.58e4\n 3 3173041007    JAKART… TAMBORA ANGKE     29381    5388   23993   20463  4.45e4\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074    5967   23107   19468  4.26e4\n 5 3175031003    JAKART… JATINE… BALI M…    9752    1678    8074    7176  1.52e4\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285    4077   22208   19966  4.22e4\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566    3993   17573   15502  3.31e4\n 8 3175051002    JAKART… PASAR … BARU      23886    3398   20488   18580  3.91e4\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898    9516   38382   32972  7.14e4\n10 3171071002    JAKART… TANAH … BENDUN…   21494    3813   17681   15870  3.36e4\n# … with 258 more rows, 18 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …\n\n[[9]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 4441501 4499710 1663218 6162928\n 2 3172051003    JAKART… PADEMA… ANCOL     23947   12333   11614    4181   15795\n 3 3173041007    JAKART… TAMBORA ANGKE     29381   13875   15506    4798   20304\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074   18314   10760    3658   14418\n 5 3175031003    JAKART… JATINE… BALI M…    9752    5173    4579    2007    6586\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285   13775   12510    5206   17716\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566   10443   11123    4010   15133\n 8 3175051002    JAKART… PASAR … BARU      23886   10063   13823    6118   19941\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898   28848   19050    7261   26311\n10 3171071002    JAKART… TANAH … BENDUN…   21494    9978   11516    4602   16118\n# … with 258 more rows, 18 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …\n\n[[10]]\n# A tibble: 268 × 34\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ JUMLA…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 1482471 7458740 6682911 1836511\n 2 3172051003    JAKART… PADEMA… ANCOL     23947    4522   19425   16909    3934\n 3 3173041007    JAKART… TAMBORA ANGKE     29381    5186   24195   21000    6122\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074    5780   23294   20123    4124\n 5 3175031003    JAKART… JATINE… BALI M…    9752    1621    8131    7332    2159\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285    3947   22338   20349    5258\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566    3889   17677   15882    3835\n 8 3175051002    JAKART… PASAR … BARU      23886    3220   20666   18985    6863\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898    9158   38740   33947    8039\n10 3171071002    JAKART… TANAH … BENDUN…   21494    3693   17801   16227    5533\n# … with 258 more rows, 25 more variables: `TOTAL VAKSIN\\r\\nDIBERIKAN` <dbl>,\n#   `LANSIA\\r\\nDOSIS 1` <dbl>, `LANSIA\\r\\nDOSIS 2` <dbl>,\n#   `LANSIA\\r\\nDOSIS 3` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 3` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>, …\n\n[[11]]\n# A tibble: 268 × 34\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ JUMLA…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 1445540 7495671 6743764 2885301\n 2 3172051003    JAKART… PADEMA… ANCOL     23947    4440   19507   17077    7022\n 3 3173041007    JAKART… TAMBORA ANGKE     29381    5084   24297   21182    9484\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074    5676   23398   20373    7030\n 5 3175031003    JAKART… JATINE… BALI M…    9752    1589    8163    7413    3413\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285    3834   22451   20530    8594\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566    3804   17762   15995    5825\n 8 3175051002    JAKART… PASAR … BARU      23886    3147   20739   19138    9781\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898    8989   38909   34340   12984\n10 3171071002    JAKART… TANAH … BENDUN…   21494    3609   17885   16349    8089\n# … with 258 more rows, 25 more variables: `TOTAL VAKSIN\\r\\nDIBERIKAN` <dbl>,\n#   `LANSIA\\r\\nDOSIS 1` <dbl>, `LANSIA\\r\\nDOSIS 2` <dbl>,\n#   `LANSIA\\r\\nDOSIS 3` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 3` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>, …\n\n[[12]]\n# A tibble: 268 × 27\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   8941211 1880524 7060687 5729001  1.28e7\n 2 3172051003    JAKART… PADEMA… ANCOL     23947    5991   17956   14504  3.25e4\n 3 3173041007    JAKART… TAMBORA ANGKE     29381    6557   22824   18185  4.10e4\n 4 3175041005    JAKART… KRAMAT… BALE K…   29074    7586   21488   16444  3.79e4\n 5 3175031003    JAKART… JATINE… BALI M…    9752    2125    7627    6277  1.39e4\n 6 3175101006    JAKART… CIPAYU… BAMBU …   26285    5014   21271   17291  3.86e4\n 7 3174031002    JAKART… MAMPAN… BANGKA    21566    4742   16824   13579  3.04e4\n 8 3175051002    JAKART… PASAR … BARU      23886    4089   19797   16697  3.65e4\n 9 3175041004    JAKART… KRAMAT… BATU A…   47898   12196   35702   27942  6.36e4\n10 3171071002    JAKART… TANAH … BENDUN…   21494    4492   17002   14176  3.12e4\n# … with 258 more rows, 18 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …\n\n\nNext, we are interested to know what are the columns available in each aspatial data file. Since we do not require all the columns, we then need to understand what are the columns needed for our analysis and retain them in the later part.\n\n# get the column names for each data frame in data_list\ncolumn_names <- map(data_list, colnames)\n\ncolumn_names\n\n[[1]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[10] \"LANSIA\\r\\nDOSIS 1\"                         \n[11] \"LANSIA\\r\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\r\\nDOSIS 1\"                         \n[26] \"REMAJA\\r\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n[[2]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"JUMLAH\\r\\nDOSIS 3\"                         \n[10] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[11] \"LANSIA\\r\\nDOSIS 1\"                         \n[12] \"LANSIA\\r\\nDOSIS 2\"                         \n[13] \"LANSIA\\r\\nDOSIS 3\"                         \n[14] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[15] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[16] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[17] \"PELAYAN PUBLIK\\r\\nDOSIS 3\"                 \n[18] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[19] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[20] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[21] \"GOTONG ROYONG\\r\\nDOSIS 3\"                  \n[22] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[23] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[24] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[25] \"TENAGA KESEHATAN\\r\\nDOSIS 3\"               \n[26] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[27] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[28] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[29] \"TAHAPAN 3\\r\\nDOSIS 3\"                      \n[30] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[31] \"REMAJA\\r\\nDOSIS 1\"                         \n[32] \"REMAJA\\r\\nDOSIS 2\"                         \n[33] \"REMAJA\\r\\nDOSIS 3\"                         \n[34] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n[[3]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"JUMLAH\\r\\nDOSIS 3\"                         \n[10] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[11] \"LANSIA\\r\\nDOSIS 1\"                         \n[12] \"LANSIA\\r\\nDOSIS 2\"                         \n[13] \"LANSIA\\r\\nDOSIS 3\"                         \n[14] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[15] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[16] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[17] \"PELAYAN PUBLIK\\r\\nDOSIS 3\"                 \n[18] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[19] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[20] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[21] \"GOTONG ROYONG\\r\\nDOSIS 3\"                  \n[22] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[23] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[24] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[25] \"TENAGA KESEHATAN\\r\\nDOSIS 3\"               \n[26] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[27] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[28] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[29] \"TAHAPAN 3\\r\\nDOSIS 3\"                      \n[30] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[31] \"REMAJA\\r\\nDOSIS 1\"                         \n[32] \"REMAJA\\r\\nDOSIS 2\"                         \n[33] \"REMAJA\\r\\nDOSIS 3\"                         \n[34] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n[[4]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[10] \"LANSIA\\r\\nDOSIS 1\"                         \n[11] \"LANSIA\\r\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\r\\nDOSIS 1\"                         \n[26] \"REMAJA\\r\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n[[5]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[10] \"LANSIA\\r\\nDOSIS 1\"                         \n[11] \"LANSIA\\r\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\r\\nDOSIS 1\"                         \n[26] \"REMAJA\\r\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n[[6]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[10] \"LANSIA\\r\\nDOSIS 1\"                         \n[11] \"LANSIA\\r\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\r\\nDOSIS 1\"                         \n[26] \"REMAJA\\r\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n[[7]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[10] \"LANSIA\\r\\nDOSIS 1\"                         \n[11] \"LANSIA\\r\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\r\\nDOSIS 1\"                         \n[26] \"REMAJA\\r\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n[[8]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[10] \"LANSIA\\r\\nDOSIS 1\"                         \n[11] \"LANSIA\\r\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\r\\nDOSIS 1\"                         \n[26] \"REMAJA\\r\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n[[9]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[10] \"LANSIA\\r\\nDOSIS 1\"                         \n[11] \"LANSIA\\r\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\r\\nDOSIS 1\"                         \n[26] \"REMAJA\\r\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n[[10]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"JUMLAH\\r\\nDOSIS 3\"                         \n[10] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[11] \"LANSIA\\r\\nDOSIS 1\"                         \n[12] \"LANSIA\\r\\nDOSIS 2\"                         \n[13] \"LANSIA\\r\\nDOSIS 3\"                         \n[14] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[15] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[16] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[17] \"PELAYAN PUBLIK\\r\\nDOSIS 3\"                 \n[18] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[19] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[20] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[21] \"GOTONG ROYONG\\r\\nDOSIS 3\"                  \n[22] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[23] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[24] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[25] \"TENAGA KESEHATAN\\r\\nDOSIS 3\"               \n[26] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[27] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[28] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[29] \"TAHAPAN 3\\r\\nDOSIS 3\"                      \n[30] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[31] \"REMAJA\\r\\nDOSIS 1\"                         \n[32] \"REMAJA\\r\\nDOSIS 2\"                         \n[33] \"REMAJA\\r\\nDOSIS 3\"                         \n[34] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n[[11]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"JUMLAH\\r\\nDOSIS 3\"                         \n[10] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[11] \"LANSIA\\r\\nDOSIS 1\"                         \n[12] \"LANSIA\\r\\nDOSIS 2\"                         \n[13] \"LANSIA\\r\\nDOSIS 3\"                         \n[14] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[15] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[16] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[17] \"PELAYAN PUBLIK\\r\\nDOSIS 3\"                 \n[18] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[19] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[20] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[21] \"GOTONG ROYONG\\r\\nDOSIS 3\"                  \n[22] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[23] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[24] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[25] \"TENAGA KESEHATAN\\r\\nDOSIS 3\"               \n[26] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[27] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[28] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[29] \"TAHAPAN 3\\r\\nDOSIS 3\"                      \n[30] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[31] \"REMAJA\\r\\nDOSIS 1\"                         \n[32] \"REMAJA\\r\\nDOSIS 2\"                         \n[33] \"REMAJA\\r\\nDOSIS 3\"                         \n[34] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n[[12]]\n [1] \"KODE KELURAHAN\"                            \n [2] \"WILAYAH KOTA\"                              \n [3] \"KECAMATAN\"                                 \n [4] \"KELURAHAN\"                                 \n [5] \"SASARAN\"                                   \n [6] \"BELUM VAKSIN\"                              \n [7] \"JUMLAH\\r\\nDOSIS 1\"                         \n [8] \"JUMLAH\\r\\nDOSIS 2\"                         \n [9] \"TOTAL VAKSIN\\r\\nDIBERIKAN\"                 \n[10] \"LANSIA\\r\\nDOSIS 1\"                         \n[11] \"LANSIA\\r\\nDOSIS 2\"                         \n[12] \"LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN\"         \n[13] \"PELAYAN PUBLIK\\r\\nDOSIS 1\"                 \n[14] \"PELAYAN PUBLIK\\r\\nDOSIS 2\"                 \n[15] \"PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN\"  \n[16] \"GOTONG ROYONG\\r\\nDOSIS 1\"                  \n[17] \"GOTONG ROYONG\\r\\nDOSIS 2\"                  \n[18] \"GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n[19] \"TENAGA KESEHATAN\\r\\nDOSIS 1\"               \n[20] \"TENAGA KESEHATAN\\r\\nDOSIS 2\"               \n[21] \"TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN\"\n[22] \"TAHAPAN 3\\r\\nDOSIS 1\"                      \n[23] \"TAHAPAN 3\\r\\nDOSIS 2\"                      \n[24] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\"       \n[25] \"REMAJA\\r\\nDOSIS 1\"                         \n[26] \"REMAJA\\r\\nDOSIS 2\"                         \n[27] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"          \n\n\nFrom the generated output message, I realised the differences were due to column names such as: ” DOSIS 3”. The reason could be due to the government’s increasing immunization rates for various demographic groups and the quantity of vaccinations distributed across the country.\nHowever, the primary interest in this study is to analyse COVID-19 vaccination trends at the sub-district level, DKI Jakarta. Therefore, the breakdown of different demographics vaccination progress are less of our concern and we should eliminate them from the data sets.\nOur columns of interest (those that are relevant to our analysis and we will keep) -> they are common in all data files therefore we can extract them:\n\nKode Kelurahan (Village Code)\nWilayah Kota (City Area)\nKelurahan (Sub-District)\nSasaran (Target)\nBelum Vaksin (Not Yet Vaccinated)\nTotal Vaksin Diberikan (Total Vaccine Given)\n\nNow that we know our requirements, we can process the data step-by-step:\nStep 1: Retain only the 6 relevant columns for all 12 data sets imported earlier\nIn this code, the map() function iterates through each data frame in the list my_data and applies the select() function to select the stated column names. The resulting list of data frames is stored in the variable my_data_same_columns.\n\nmy_data_same_columns <- map(data_list, ~select(.x, \"KODE KELURAHAN\", \"WILAYAH KOTA\",\"SASARAN\",\"KELURAHAN\",\"BELUM VAKSIN\",\"TOTAL VAKSIN\\r\\nDIBERIKAN\"))\nmy_data_same_columns\n\n[[1]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                1517196  1.40e7\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                   4592  3.60e4\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                   5319  4.48e4\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG            5903  4.29e4\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             1649  1.53e4\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS              4030  4.24e4\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                  3950  3.33e4\n 8 3175051002       JAKARTA TIMUR     23886 BARU                    3344  3.93e4\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR              9382  7.19e4\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         3772  3.38e4\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n[[2]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                1453423  1.69e7\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                   4449  4.31e4\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                   5101  5.43e4\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG            5699  5.02e4\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             1598  1.88e4\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS              3857  5.11e4\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                  3818  3.92e4\n 8 3175051002       JAKARTA TIMUR     23886 BARU                    3160  4.92e4\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR              9041  8.52e4\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         3627  4.18e4\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n[[3]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                1431393  1.73e7\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                   4402  4.40e4\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                   5041  5.56e4\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG            5632  5.13e4\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             1576  1.92e4\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS              3791  5.22e4\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                  3778  4.00e4\n 8 3175051002       JAKARTA TIMUR     23886 BARU                    3110  5.00e4\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR              8917  8.71e4\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         3580  4.27e4\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n[[4]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                1723821  1.34e7\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                   5527  3.39e4\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                   5986  4.28e4\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG            6802  4.04e4\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             1920  1.46e4\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS              4612  4.04e4\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                  4346  3.19e4\n 8 3175051002       JAKARTA TIMUR     23886 BARU                    3776  3.79e4\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR             10985  6.76e4\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         4187  3.24e4\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n[[5]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                2235772  1.19e7\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                   6688  3.06e4\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                   7581  3.82e4\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG            8708  3.48e4\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             2517  1.29e4\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS              6252  3.54e4\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                  5785  2.79e4\n 8 3175051002       JAKARTA TIMUR     23886 BARU                    4899  3.45e4\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR             14105  5.85e4\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         5239  2.90e4\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n[[6]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                3277484 9076633\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                   9191   23691\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                  10400   29451\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG           12510   24330\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             3704    9719\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS              9416   26987\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                  8345   21398\n 8 3175051002       JAKARTA TIMUR     23886 BARU                    7751   27373\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR             19908   43332\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         8033   22132\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n[[7]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                1623736  1.37e7\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                   5062  3.49e4\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                   5626  4.38e4\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG            6335  4.17e4\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             1782  1.50e4\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS              4373  4.13e4\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                  4169  3.25e4\n 8 3175051002       JAKARTA TIMUR     23886 BARU                    3579  3.85e4\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR             10178  6.97e4\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         3993  3.30e4\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n[[8]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                1538221  1.39e7\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                   4647  3.58e4\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                   5388  4.45e4\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG            5967  4.26e4\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             1678  1.52e4\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS              4077  4.22e4\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                  3993  3.31e4\n 8 3175051002       JAKARTA TIMUR     23886 BARU                    3398  3.91e4\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR              9516  7.14e4\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         3813  3.36e4\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n[[9]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                4441501 6162928\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                  12333   15795\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                  13875   20304\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG           18314   14418\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             5173    6586\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS             13775   17716\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                 10443   15133\n 8 3175051002       JAKARTA TIMUR     23886 BARU                   10063   19941\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR             28848   26311\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         9978   16118\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n[[10]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                1482471  1.60e7\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                   4522  4.03e4\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                   5186  5.13e4\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG            5780  4.75e4\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             1621  1.76e4\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS              3947  4.79e4\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                  3889  3.74e4\n 8 3175051002       JAKARTA TIMUR     23886 BARU                    3220  4.65e4\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR              9158  8.07e4\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         3693  3.96e4\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n[[11]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                1445540  1.71e7\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                   4440  4.36e4\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                   5084  5.50e4\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG            5676  5.08e4\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             1589  1.90e4\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS              3834  5.16e4\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                  3804  3.96e4\n 8 3175051002       JAKARTA TIMUR     23886 BARU                    3147  4.97e4\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR              8989  8.62e4\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         3609  4.23e4\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n[[12]]\n# A tibble: 268 × 6\n   `KODE KELURAHAN` `WILAYAH KOTA`  SASARAN KELURAHAN       BELUM VAKS…¹ TOTAL…²\n   <chr>            <chr>             <dbl> <chr>                  <dbl>   <dbl>\n 1 <NA>             <NA>            8941211 TOTAL                1880524  1.28e7\n 2 3172051003       JAKARTA UTARA     23947 ANCOL                   5991  3.25e4\n 3 3173041007       JAKARTA BARAT     29381 ANGKE                   6557  4.10e4\n 4 3175041005       JAKARTA TIMUR     29074 BALE KAMBANG            7586  3.79e4\n 5 3175031003       JAKARTA TIMUR      9752 BALI MESTER             2125  1.39e4\n 6 3175101006       JAKARTA TIMUR     26285 BAMBU APUS              5014  3.86e4\n 7 3174031002       JAKARTA SELATAN   21566 BANGKA                  4742  3.04e4\n 8 3175051002       JAKARTA TIMUR     23886 BARU                    4089  3.65e4\n 9 3175041004       JAKARTA TIMUR     47898 BATU AMPAR             12196  6.36e4\n10 3171071002       JAKARTA PUSAT     21494 BENDUNGAN HILIR         4492  3.12e4\n# … with 258 more rows, and abbreviated variable names ¹​`BELUM VAKSIN`,\n#   ²​`TOTAL VAKSIN\\r\\nDIBERIKAN`\n\n\nNow, all the data files have only 6 columns.\nStep 2: Rename columns with translation (English headers)\n\n# Define a named vector of new column names\nnew_names <- c(\"Village_Code\" = \"KODE KELURAHAN\", \"City_Area\" = \"WILAYAH KOTA\", \"Sub_District\"=\"KELURAHAN\", \"Target\" = \"SASARAN\", \"Unvaccinated\" = \"BELUM VAKSIN\", \"Vaccinated\" = \"TOTAL VAKSIN\\r\\nDIBERIKAN\")\n\n# Use map to rename columns in each data frame in the list\nrenamed_list <- map(my_data_same_columns, ~rename(.x, !!!new_names))\n\nStep 3: Create the date column to identify each file of different months in the list\n\ndate_value_1 <- \"February 27, 2022\"\nrenamed_list_1 <- renamed_list[[1]]\nrenamed_list_1$date <- as.Date(date_value_1, format = \"%B %d, %Y\")\n\nrenamed_list_1\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         1517196  1.40e7 2022-02-27\n 2 3172051003   JAKARTA UTARA     23947 ANCOL            4592  3.60e4 2022-02-27\n 3 3173041007   JAKARTA BARAT     29381 ANGKE            5319  4.48e4 2022-02-27\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG     5903  4.29e4 2022-02-27\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      1649  1.53e4 2022-02-27\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS       4030  4.24e4 2022-02-27\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA           3950  3.33e4 2022-02-27\n 8 3175051002   JAKARTA TIMUR     23886 BARU             3344  3.93e4 2022-02-27\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR       9382  7.19e4 2022-02-27\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    3772  3.38e4 2022-02-27\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\ndate_value_2 <- \"April 30, 2022\"\nrenamed_list_2 <- renamed_list[[2]]\nrenamed_list_2$date <- as.Date(date_value_2, format = \"%B %d, %Y\")\n\nrenamed_list_2\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         1453423  1.69e7 2022-04-30\n 2 3172051003   JAKARTA UTARA     23947 ANCOL            4449  4.31e4 2022-04-30\n 3 3173041007   JAKARTA BARAT     29381 ANGKE            5101  5.43e4 2022-04-30\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG     5699  5.02e4 2022-04-30\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      1598  1.88e4 2022-04-30\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS       3857  5.11e4 2022-04-30\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA           3818  3.92e4 2022-04-30\n 8 3175051002   JAKARTA TIMUR     23886 BARU             3160  4.92e4 2022-04-30\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR       9041  8.52e4 2022-04-30\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    3627  4.18e4 2022-04-30\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\ndate_value_3 <- \"June 30, 2022\"\nrenamed_list_3 <- renamed_list[[3]]\nrenamed_list_3$date <- as.Date(date_value_3, format = \"%B %d, %Y\")\n\nrenamed_list_3\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         1431393  1.73e7 2022-06-30\n 2 3172051003   JAKARTA UTARA     23947 ANCOL            4402  4.40e4 2022-06-30\n 3 3173041007   JAKARTA BARAT     29381 ANGKE            5041  5.56e4 2022-06-30\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG     5632  5.13e4 2022-06-30\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      1576  1.92e4 2022-06-30\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS       3791  5.22e4 2022-06-30\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA           3778  4.00e4 2022-06-30\n 8 3175051002   JAKARTA TIMUR     23886 BARU             3110  5.00e4 2022-06-30\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR       8917  8.71e4 2022-06-30\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    3580  4.27e4 2022-06-30\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\ndate_value_4 <- \"November 30, 2021\"\nrenamed_list_4 <- renamed_list[[4]]\nrenamed_list_4$date <- as.Date(date_value_4, format = \"%B %d, %Y\")\n\nrenamed_list_4\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         1723821  1.34e7 2021-11-30\n 2 3172051003   JAKARTA UTARA     23947 ANCOL            5527  3.39e4 2021-11-30\n 3 3173041007   JAKARTA BARAT     29381 ANGKE            5986  4.28e4 2021-11-30\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG     6802  4.04e4 2021-11-30\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      1920  1.46e4 2021-11-30\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS       4612  4.04e4 2021-11-30\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA           4346  3.19e4 2021-11-30\n 8 3175051002   JAKARTA TIMUR     23886 BARU             3776  3.79e4 2021-11-30\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR      10985  6.76e4 2021-11-30\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    4187  3.24e4 2021-11-30\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\ndate_value_5 <- \"September 30, 2021\"\nrenamed_list_5 <- renamed_list[[5]]\nrenamed_list_5$date <- as.Date(date_value_5, format = \"%B %d, %Y\")\n\nrenamed_list_5\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         2235772  1.19e7 2021-09-30\n 2 3172051003   JAKARTA UTARA     23947 ANCOL            6688  3.06e4 2021-09-30\n 3 3173041007   JAKARTA BARAT     29381 ANGKE            7581  3.82e4 2021-09-30\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG     8708  3.48e4 2021-09-30\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      2517  1.29e4 2021-09-30\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS       6252  3.54e4 2021-09-30\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA           5785  2.79e4 2021-09-30\n 8 3175051002   JAKARTA TIMUR     23886 BARU             4899  3.45e4 2021-09-30\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR      14105  5.85e4 2021-09-30\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    5239  2.90e4 2021-09-30\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\ndate_value_6 <- \"August 31, 2021\"\nrenamed_list_6 <- renamed_list[[6]]\nrenamed_list_6$date <- as.Date(date_value_6, format = \"%B %d, %Y\")\n\nrenamed_list_6\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         3277484 9076633 2021-08-31\n 2 3172051003   JAKARTA UTARA     23947 ANCOL            9191   23691 2021-08-31\n 3 3173041007   JAKARTA BARAT     29381 ANGKE           10400   29451 2021-08-31\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG    12510   24330 2021-08-31\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      3704    9719 2021-08-31\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS       9416   26987 2021-08-31\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA           8345   21398 2021-08-31\n 8 3175051002   JAKARTA TIMUR     23886 BARU             7751   27373 2021-08-31\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR      19908   43332 2021-08-31\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    8033   22132 2021-08-31\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\ndate_value_7 <- \"December 31, 2021\"\nrenamed_list_7 <- renamed_list[[7]]\nrenamed_list_7$date <- as.Date(date_value_7, format = \"%B %d, %Y\")\n\nrenamed_list_7\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         1623736  1.37e7 2021-12-31\n 2 3172051003   JAKARTA UTARA     23947 ANCOL            5062  3.49e4 2021-12-31\n 3 3173041007   JAKARTA BARAT     29381 ANGKE            5626  4.38e4 2021-12-31\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG     6335  4.17e4 2021-12-31\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      1782  1.50e4 2021-12-31\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS       4373  4.13e4 2021-12-31\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA           4169  3.25e4 2021-12-31\n 8 3175051002   JAKARTA TIMUR     23886 BARU             3579  3.85e4 2021-12-31\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR      10178  6.97e4 2021-12-31\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    3993  3.30e4 2021-12-31\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\ndate_value_8 <- \"January 31, 2022\"\nrenamed_list_8 <- renamed_list[[8]]\nrenamed_list_8$date <- as.Date(date_value_8, format = \"%B %d, %Y\")\n\nrenamed_list_8\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         1538221  1.39e7 2022-01-31\n 2 3172051003   JAKARTA UTARA     23947 ANCOL            4647  3.58e4 2022-01-31\n 3 3173041007   JAKARTA BARAT     29381 ANGKE            5388  4.45e4 2022-01-31\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG     5967  4.26e4 2022-01-31\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      1678  1.52e4 2022-01-31\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS       4077  4.22e4 2022-01-31\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA           3993  3.31e4 2022-01-31\n 8 3175051002   JAKARTA TIMUR     23886 BARU             3398  3.91e4 2022-01-31\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR       9516  7.14e4 2022-01-31\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    3813  3.36e4 2022-01-31\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\ndate_value_9 <- \"July 31, 2021\"\nrenamed_list_9 <- renamed_list[[9]]\nrenamed_list_9$date <- as.Date(date_value_9, format = \"%B %d, %Y\")\n\nrenamed_list_9\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         4441501 6162928 2021-07-31\n 2 3172051003   JAKARTA UTARA     23947 ANCOL           12333   15795 2021-07-31\n 3 3173041007   JAKARTA BARAT     29381 ANGKE           13875   20304 2021-07-31\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG    18314   14418 2021-07-31\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      5173    6586 2021-07-31\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS      13775   17716 2021-07-31\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA          10443   15133 2021-07-31\n 8 3175051002   JAKARTA TIMUR     23886 BARU            10063   19941 2021-07-31\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR      28848   26311 2021-07-31\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    9978   16118 2021-07-31\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\ndate_value_10 <- \"March 31, 2022\"\nrenamed_list_10 <- renamed_list[[10]]\nrenamed_list_10$date <- as.Date(date_value_10, format = \"%B %d, %Y\")\n\nrenamed_list_10\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         1482471  1.60e7 2022-03-31\n 2 3172051003   JAKARTA UTARA     23947 ANCOL            4522  4.03e4 2022-03-31\n 3 3173041007   JAKARTA BARAT     29381 ANGKE            5186  5.13e4 2022-03-31\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG     5780  4.75e4 2022-03-31\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      1621  1.76e4 2022-03-31\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS       3947  4.79e4 2022-03-31\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA           3889  3.74e4 2022-03-31\n 8 3175051002   JAKARTA TIMUR     23886 BARU             3220  4.65e4 2022-03-31\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR       9158  8.07e4 2022-03-31\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    3693  3.96e4 2022-03-31\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\ndate_value_11 <- \"May 31, 2022\"\nrenamed_list_11 <- renamed_list[[11]]\nrenamed_list_11$date <- as.Date(date_value_11, format = \"%B %d, %Y\")\n\nrenamed_list_11\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         1445540  1.71e7 2022-05-31\n 2 3172051003   JAKARTA UTARA     23947 ANCOL            4440  4.36e4 2022-05-31\n 3 3173041007   JAKARTA BARAT     29381 ANGKE            5084  5.50e4 2022-05-31\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG     5676  5.08e4 2022-05-31\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      1589  1.90e4 2022-05-31\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS       3834  5.16e4 2022-05-31\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA           3804  3.96e4 2022-05-31\n 8 3175051002   JAKARTA TIMUR     23886 BARU             3147  4.97e4 2022-05-31\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR       8989  8.62e4 2022-05-31\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    3609  4.23e4 2022-05-31\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\ndate_value_12 <- \"October 31, 2021\"\nrenamed_list_12 <- renamed_list[[12]]\nrenamed_list_12$date <- as.Date(date_value_12, format = \"%B %d, %Y\")\n\nrenamed_list_12\n\n# A tibble: 268 × 7\n   Village_Code City_Area        Target Sub_District  Unvac…¹ Vacci…² date      \n   <chr>        <chr>             <dbl> <chr>           <dbl>   <dbl> <date>    \n 1 <NA>         <NA>            8941211 TOTAL         1880524  1.28e7 2021-10-31\n 2 3172051003   JAKARTA UTARA     23947 ANCOL            5991  3.25e4 2021-10-31\n 3 3173041007   JAKARTA BARAT     29381 ANGKE            6557  4.10e4 2021-10-31\n 4 3175041005   JAKARTA TIMUR     29074 BALE KAMBANG     7586  3.79e4 2021-10-31\n 5 3175031003   JAKARTA TIMUR      9752 BALI MESTER      2125  1.39e4 2021-10-31\n 6 3175101006   JAKARTA TIMUR     26285 BAMBU APUS       5014  3.86e4 2021-10-31\n 7 3174031002   JAKARTA SELATAN   21566 BANGKA           4742  3.04e4 2021-10-31\n 8 3175051002   JAKARTA TIMUR     23886 BARU             4089  3.65e4 2021-10-31\n 9 3175041004   JAKARTA TIMUR     47898 BATU AMPAR      12196  6.36e4 2021-10-31\n10 3171071002   JAKARTA PUSAT     21494 BENDUNGAN HI…    4492  3.12e4 2021-10-31\n# … with 258 more rows, and abbreviated variable names ¹​Unvaccinated,\n#   ²​Vaccinated\n\n\nStep 4: Join all aspatial files to one combined csv\n\ncombined_aspatial <- bind_rows(renamed_list_1,renamed_list_2,renamed_list_3,renamed_list_4,renamed_list_5,renamed_list_6,renamed_list_7, renamed_list_8,renamed_list_9,renamed_list_10,renamed_list_11, renamed_list_12)\n\nYay! We have successfully joined all 12 files!"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#investigating-correcting-mismatched-sub_district-records",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#investigating-correcting-mismatched-sub_district-records",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "5.1 Investigating & Correcting Mismatched Sub_District Records",
    "text": "5.1 Investigating & Correcting Mismatched Sub_District Records\nAs seen from the output maps above, there are some ‘missing’ values even though we have done our data cleaning for both sets of data earlier. I suspect that this could be due to a mismatch in naming conventions, such as using “Hello” and “Hallo” in both data files, which results in these sub-districts being recognized as separate entities.\nHowever, this is just my assumption! Let us now investigate the sub_district field:\n\n# checks for unique values of Sub_District in cases_jakarta that aren't already present in bd_jakarta and vice versa\ncombined_aspatial_subdistrict <- c(combined_aspatial$Sub_District)\nbd_subdistrict <- c(bd_jakarta$Sub_District)\n\nunique(combined_aspatial_subdistrict[!(combined_aspatial_subdistrict %in% bd_subdistrict)])\n\n [1] \"TOTAL\"                 \"BALE KAMBANG\"          \"HALIM PERDANA KUSUMAH\"\n [4] \"JATI PULO\"             \"KAMPUNG TENGAH\"        \"KERENDANG\"            \n [7] \"KRAMAT JATI\"           \"PAL MERIAM\"            \"PINANG RANTI\"         \n[10] \"PULAU HARAPAN\"         \"PULAU KELAPA\"          \"PULAU PANGGANG\"       \n[13] \"PULAU PARI\"            \"PULAU TIDUNG\"          \"PULAU UNTUNG JAWA\"    \n[16] \"RAWA JATI\"            \n\n\n\nunique(bd_subdistrict[!(bd_subdistrict %in% combined_aspatial_subdistrict)])\n\n[1] \"KRENDANG\"             \"RAWAJATI\"             \"TENGAH\"              \n[4] \"BALEKAMBANG\"          \"PINANGRANTI\"          \"JATIPULO\"            \n[7] \"PALMERIAM\"            \"KRAMATJATI\"           \"HALIM PERDANA KUSUMA\"\n\n\nFrom the code chunks above, we realised several naming mismatches between the two data fields. In order to correct them, we will begin by creating a data frame that includes the correct spellings for both aspatial_cases and geospatial_bd subdistricts. We will then output this information into a “kable” format.\n\nspelling <- data.frame(\n  Aspatial_Cases=c(\"BALE KAMBANG\", \"HALIM PERDANA KUSUMAH\", \"JATI PULO\",\"KERENDANG\",\"KRAMAT JATI\", \"PAL MERIAM\", \"PINANG RANTI\", \"RAWA JATI\", \"KAMPUNG TENGAH\"),\n  Geospatial_BD=c(\"BALEKAMBAG\", \"HALIM PERDANA KUSUMA\", \"JATIPULO\", \"KRENDANG\",\"KRAMATJATI\",\"PALMERIAM\", \"PINANGRANTI\", \"RAWAJATI\", \"TENGAH\")\n)\n\n# with dataframe a input, outputs a kable\nlibrary(knitr)\nlibrary(kableExtra)\nkable(spelling, caption=\"Mismatched Records\") %>%\n  kable_material(\"hover\", latex_options=\"scale_down\")\n\n\n\nMismatched Records\n \n  \n    Aspatial_Cases \n    Geospatial_BD \n  \n \n\n  \n    BALE KAMBANG \n    BALEKAMBAG \n  \n  \n    HALIM PERDANA KUSUMAH \n    HALIM PERDANA KUSUMA \n  \n  \n    JATI PULO \n    JATIPULO \n  \n  \n    KERENDANG \n    KRENDANG \n  \n  \n    KRAMAT JATI \n    KRAMATJATI \n  \n  \n    PAL MERIAM \n    PALMERIAM \n  \n  \n    PINANG RANTI \n    PINANGRANTI \n  \n  \n    RAWA JATI \n    RAWAJATI \n  \n  \n    KAMPUNG TENGAH \n    TENGAH \n  \n\n\n\n\n\nNow that we know exactly which sub-district records are mismatched, we need to rectify the mismatches by remaining them:\n\n# where bd_jakarta is a mismatched value, replace with the correct value\nbd_jakarta$Sub_District[bd_jakarta$Sub_District == 'BALEKAMBANG'] <- 'BALE KAMBANG'\nbd_jakarta$Sub_District[bd_jakarta$Sub_District == 'HALIM PERDANA KUSUMA'] <- 'HALIM PERDANA KUSUMAH'\nbd_jakarta$Sub_District[bd_jakarta$Sub_District == 'JATIPULO'] <- 'JATI PULO'\nbd_jakarta$Sub_District[bd_jakarta$Sub_District == 'KRENDANG'] <- 'KERENDANG'\nbd_jakarta$Sub_District[bd_jakarta$Sub_District == 'KRAMATJATI'] <- 'KRAMAT JATI'\nbd_jakarta$Sub_District[bd_jakarta$Sub_District == 'PALMERIAM'] <- 'PAL MERIAM'\nbd_jakarta$Sub_District[bd_jakarta$Sub_District == 'PINANGRANTI'] <- 'PINANG RANTI'\nbd_jakarta$Sub_District[bd_jakarta$Sub_District == 'RAWAJATI'] <- 'RAWA JATI'\nbd_jakarta$Sub_District[bd_jakarta$Sub_District == 'TENGAH'] <- 'KAMPUNG TENGAH'\n\nCorrected them! Now, we have a standardised common identifier among our geospatial and aspatial dataframes. Let’s join them once more:\n\njoined_cleared_mismatched <- left_join(bd_jakarta, combined_aspatial,\n                              by=c(\"Sub_District\"=\"Sub_District\")\n                              )\n\nNow, let’s once again visualise our updated “combined_Jakarta_district_level” in terms of target vaccine count and unvaccinated count at sub_district level to check if all missing values have been removed and cleared!\n\nprelim_target = tm_shape(joined_cleared_mismatched)+\n  tm_fill(\"Target\") +\n  tm_borders(alpha = 0.2) +\n  tm_layout(main.title=\"Preliminary Target Count\")\n\nprelim_Unvaccinated = tm_shape(joined_cleared_mismatched)+\n  tm_fill(\"Unvaccinated\") +\n  tm_borders(alpha = 0.2) +\n  tm_layout(main.title=\"Preliminary Unvaccinated Count\")\n\ntmap_arrange(prelim_target, prelim_Unvaccinated)\n\n\n\n\nDone! We have successfully removed all the missing values! We can now move on to our next section of visualisation and analysis."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#analysis-from-jenks-choropleth-maps",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#analysis-from-jenks-choropleth-maps",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "7.1 **Analysis from Jenks Choropleth Maps",
    "text": "7.1 **Analysis from Jenks Choropleth Maps"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#computing-local-gi-statistics",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#computing-local-gi-statistics",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "8.1 Computing local Gi* statistics",
    "text": "8.1 Computing local Gi* statistics\nEmerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. The analysis consist of four main steps:\n\nBuilding a space-time cube,\nCalculating Getis-Ord local Gi* statistic for each bin by using an FDR correction,\nEvaluating these hot and cold spot trends by using Mann-Kendall trend test,\nCategorising each study area location by referring to the resultant trend z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin.\n\n\n# select columns: Sub_District, Target, Unvaccinated and date from joined_cleared_mismatched\nvacc_attr_table <- joined_cleared_mismatched %>% select(8,12,13,15) %>% st_drop_geometry()\n\n\n#create a new vaccination column with the calculated vaccination rate for each row\nvacc_attr_table$vaccintion_rate <- (vacc_attr_table$Target - vacc_attr_table$Unvaccinated) / vacc_attr_table$Target*100\n\n#Extract only the date, sub_district, and vaccination rate\nvacc_attr_table <- tibble(vacc_attr_table %>% select(1,4,5))\n\nStep 1: Creating a time series cube\n\nvacc_st <- spacetime(vacc_attr_table, bd_jakarta,\n                      .loc_col = \"Sub_District\",\n                      .time_col = \"date\")\n\n#check if vacc_st is spacetime_cube valid before moving on\nis_spacetime(vacc_st)\n\n[1] TRUE\n\nis_spacetime_cube(vacc_st)\n\n[1] TRUE\n\n\nThe TRUE return confirms that vacc_st object is indeed an time-space cube that means the observations for locations are complete!\nStep 2: Computing Gi*\nThe code chunk below will be used to identify neighbors to derive an inverse distance weights.\n\nactivate() is used to activate the geometry context\nmutate() is used to create two new columns nb and wt\nThen we will activate the data context again and copy over the nb and wt columns to each time-slick using set_wts() and set_nbs()\n\n\nvacc_nb <- vacc_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %>%\n  \n  set_wts(\"wt\") %>%\n  set_nbs(\"nb\")\n\nStep 3: Manually calculate the local Gi* for each location (group by date)\n\ngi_stars <- vacc_nb %>% \n  group_by(date) %>% \n  mutate(gi_star = local_gstar_perm(\n    vaccintion_rate, nb, wt)) %>% \n  tidyr::unnest(gi_star)\n\n**Not sure why I cant populate my Gi* graphs and I am running out of time! Will work on it again to test :D Here’s my broken code chunks\n(1) #error in gi_stars not sf object! tmap_mode(“plot”) tm_shape(gi_stars) + tm_fill(“gi_star”) + tm_borders(alpha = 0.5) + tm_view(set.zoom.limits = c(6,8))\n(2) #error in gi_stars not sf object! tmap_mode(“plot”) tm_shape(gi_stars) + tm_fill(“p_sim”) + tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#analysis-from-local-gi",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#analysis-from-local-gi",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "8.2 Analysis from Local Gi*",
    "text": "8.2 Analysis from Local Gi*"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#perform-mann-kendall-test",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#perform-mann-kendall-test",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "9.1 Perform Mann-Kendall Test",
    "text": "9.1 Perform Mann-Kendall Test\n\nlagoa_MK <- gi_stars %>% \n  ungroup() %>% \n  filter(Sub_District == \"LAGOA\") |> \n  select(Sub_District, date, gi_star)\n\nkoja_MK <- gi_stars %>% \n  ungroup() %>% \n  filter(Sub_District == \"KOJA\") |> \n  select(Sub_District, date, gi_star)\n\nrorotan_MK <- gi_stars %>% \n  ungroup() %>% \n  filter(Sub_District == \"ROROTAN\") |> \n  select(Sub_District, date, gi_star)\n\n\np1 <- ggplot(data = lagoa_MK, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p1)\n\n\n\n\np2 <- ggplot(data = koja_MK, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p2)\n\n\n\n\np3 <- ggplot(data = rorotan_MK, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p3)\n\n\n\n\n\n\n9.1.1 Describe the temporal trends revealed in 3 sub-districts"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#ehsa-map-of-the-gi-values-of-vaccination-rate",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#ehsa-map-of-the-gi-values-of-vaccination-rate",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "9.2 EHSA map of the Gi* values of vaccination rate",
    "text": "9.2 EHSA map of the Gi* values of vaccination rate\nLastly, we will perform EHSA analysis by using emerging_hotspot_analysis() of sfdep package. It takes a spacetime object x (vacc_st), and the variable of interest which in this case is vaccintion_rate.\nThe k argument is used to specify the number of time lags which is set to 1 by default and nsim map numbers of simulation to be performed.\n\nehsa <- emerging_hotspot_analysis(\n  x = vacc_st, \n  .var = \"vaccintion_rate\", \n  k = 1, \n  nsim = 99\n)\n\n\n9.2.1 Visualising EHSA\nNext, we will visualise the distribution of EHSA classes in bar chart using ggplot2 function.\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\nNext, we will need to join both bd_jakarta and ehsa together before we can plot maps and do any visualisation. The code chunk below illustrate how it’s done:\n\nvaccine_ehsa <- bd_jakarta %>%\n  left_join(ehsa,\n            by = join_by(Sub_District == location))\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\nThe map will only display the significant (i.e. p-value <0.05).\n\nehsa_sig <- vaccine_ehsa  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(vaccine_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\n\n\n9.2.2 Analysis\nFrom the above generated map, we can tell that most of the classification are oscilating hotspot which means less than 90% of the time-step intervals have been statistically significant hot spots. The next higher classification is sporafic coldspot which means less than 90% of the time-step intervals have been statistically significant cold spots and none of the time-step intervals have been statistically significant cold spots."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#visualising-gi-map",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#visualising-gi-map",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "8.2 Visualising Gi* map",
    "text": "8.2 Visualising Gi* map\n\n8.2.1 Analysis"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#mann-kendall-test",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#mann-kendall-test",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "9.1 Mann-Kendall Test",
    "text": "9.1 Mann-Kendall Test\nThe Mann-Kendall Test is a statistical test used to detect trends in time series data. It does not require any assumptions about the distribution of data.\nThe purpose of the Mann-Kendall test is to determine whether there is a significant trend in a time series, and if so, whether the trend is increasing or decreasing over time. The test is based on the ranks of the data values, rather than the actual values themselves, which makes it robust to outliers and other types of data anomalies.\nIf the p-value of the test is less than a pre-determined significance level (e.g., 0.05), then we can conclude that there is a significant trend in the data.\nAs stated in the assignment, we will need to select three sub-districts and describe the temporal trends, the three sub-districts I selected are as below:\n\n# Sub_district -- LAGAO\nlagoa_MK <- gi_stars %>% \n  ungroup() %>% \n  filter(Sub_District == \"LAGOA\") |> \n  select(Sub_District, date, gi_star)\n\n# Sub_district -- KOJA\nkoja_MK <- gi_stars %>% \n  ungroup() %>% \n  filter(Sub_District == \"KOJA\") |> \n  select(Sub_District, date, gi_star)\n\n# Sub_district -- ROROTAN\nrorotan_MK <- gi_stars %>% \n  ungroup() %>% \n  filter(Sub_District == \"ROROTAN\") |> \n  select(Sub_District, date, gi_star)\n\nNext, we will plot the result by using ggplot2 functions.\n\np1 <- ggplot(data = lagoa_MK, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p1)\n\n\n\n\np2 <- ggplot(data = koja_MK, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p2)\n\n\n\n\np3 <- ggplot(data = rorotan_MK, \n       aes(x = date, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p3)\n\n\n\n\n\n\n9.1.1 Analysis\nThe Mann-Kendall statistical test for trend generated above is used to assess whether a set of data values is increasing over time or decreasing over time, and whether the trend in either direction is statistically significant. The Mann-Kendall test does NOT assess the magnitude of change. We will form two hypothesis first:\n\nNull Hypothesis: There is no monotonic trend in the series\nAlternate Hypothesis: A trend exists. This trend can be positive, negative, or non-null\n\nNow, let us analyse the charts generated for the three selected sub-districts: LAGAO, KOJA, and ROROTAN.\n\nThe gi_star value for LAGAO sub-district is in the range of -1 to -4, for KOJA sub-district is 0 to -2, and for ROROTAN is 1 to -1.\n\n\n\nOne similarity between all the three line charts is that there is an obvious drastic dropped in gi_star around the period October 2021 to Mid January 2022.\nFrom the three charts generated, we can tell that all of them have a negative trend."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#analysis",
    "href": "Take_Home_Ex/Take_Home_Ex02_EndMonths/Take_Home_Ex02.html#analysis",
    "title": "Take-Home Exercise 2: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district level, DKI Jakarta",
    "section": "7.1 Analysis",
    "text": "7.1 Analysis\nThe aim of utilizing choropleth analysis in this section is to gain insights into the progress of vaccination rates over time and pinpoint the sub-districts that exhibit the most notable vaccination rates between July 2021 and June 2022. Based on the twelve maps presented, we can derive the following observations:\n\nThe general trend of the vaccine spread (regardless of sub-districts) in DKI, Jakarta seems to be increasing over time where the peak was in the last quarter and the color gradient shifted gradually from yellow to red in the subsequent two quarters.\nFrom the 12 maps, it is evident that February 2022 stands out as the month with the highest concentration of the darkest shaded areas, indicating a widespread push by the government for nationwide vaccination during that specific month and year.\nBy the end of 2022 June, out of all the sub-districts in DKI Jakarta, HALIM PERDANA KUSUMAH has the largest number of vaccinated individuals. On the other hand, KEBON MELATI has the lowest number of vaccinated individuals."
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex08/In_Class_Ex08.html",
    "href": "In_Class_Ex/In_Class_Ex08/In_Class_Ex08.html",
    "title": "In-class Exercise 8: Building hedonic pricing model with gwr",
    "section": "",
    "text": "Installing Packages\n\npacman::p_load(olsrr, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\n\n\nGeospatial Data Wrangling\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\") %>% st_transform(crs=3414)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nAspatial Data Wrangling\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\n\n\nExploratory Data Analysis (EDA)\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\nBuilding a hedonic pricing model using multiple linear regression method\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html",
    "title": "Take-Home Exercise 3: Predicting HDB Public Housing Resale Pricies using Geographically Weighted Methods",
    "section": "",
    "text": "Housing is an essential component of household wealth worldwide. Buying a housing has always been a major investment for most people. The price of housing is affected by many factors. Some of them are global in nature such as the general economy of a country or inflation rate. Others can be more specific to the properties themselves. These factors can be further divided to structural and locational factors. Structural factors are variables related to the property themselves such as the size, fitting, and tenure of the property. Locational factors are variables related to the neighbourhood of the properties such as proximity to childcare centre, public transport service and shopping centre.\n\nConventional, housing resale prices predictive models were built by using Ordinary Least Square (OLS) method. However, this method failed to take into consideration that spatial autocorrelation and spatial heterogeneity exist in geographic data sets such as housing transactions. With the existence of spatial autocorrelation, the OLS estimation of predictive housing resale pricing models could lead to biased, inconsistent, or inefficient results (Anselin 1998). In view of this limitation, Geographical Weighted Models were introduced for calibrating predictive model for housing resale prices.\n\n\nIn this take-home exercise, we are tasked to predict HDB resale prices at the sub-market level (i.e. HDB 3-room, HDB 4-room and HDB 5-room) for the month of January and February 2023 in Singapore. The predictive models must be built by using by using conventional OLS method and GWR methods. We are also required to compare the performance of the conventional OLS method versus the geographical weighted methods."
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex09/In_Class_Ex09.html",
    "href": "In_Class_Ex/In_Class_Ex09/In_Class_Ex09.html",
    "title": "In_Class_Ex09",
    "section": "",
    "text": "pacman::p_load(sf, spdep, GWmodel, SpatialML, tidyverse, tmap, ggpubr, olsrr, devtools, tidymodels, rsample)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex09/data/geospatial/MPSZ-2019.html",
    "href": "In_Class_Ex/In_Class_Ex09/data/geospatial/MPSZ-2019.html",
    "title": "Kelly's IS415 GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex09/In_Class_Ex09.html#extracting-coordinates-data",
    "href": "In_Class_Ex/In_Class_Ex09/In_Class_Ex09.html#extracting-coordinates-data",
    "title": "In_Class_Ex09",
    "section": "Extracting Coordinates Data",
    "text": "Extracting Coordinates Data\nThe code chunk below extract the x,y coordinates of the full, training and test data sets\n\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n\n\ncoords_train <- write_rds(coords_train, \"data/model/coords_train.rds\")\ncoords_test <- write_rds(coords_test, \"data/model/coords_test.rds\")"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex09/In_Class_Ex09.html#preparing-the-test-data",
    "href": "In_Class_Ex/In_Class_Ex09/In_Class_Ex09.html#preparing-the-test-data",
    "title": "In_Class_Ex09",
    "section": "Preparing the test data",
    "text": "Preparing the test data\nThe code chunk below will be used to combine the test data with its corresponding coordinates data\n\ntest_data <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex09/In_Class_Ex09.html#predicting-with-test-data",
    "href": "In_Class_Ex/In_Class_Ex09/In_Class_Ex09.html#predicting-with-test-data",
    "title": "In_Class_Ex09",
    "section": "Predicting with test data",
    "text": "Predicting with test data\nNext, predict.grf() of spatialML package will be used to predict the resale value by using the test data and gwRF_adapative model caliberated earlier.\n(run the code at home)\ngwRF_pred <- predict.grf(gwRF_adaptive,\ntest_data,\nx.var.name = “X”,\ny.var.name = “Y”,\nlocal.w = 1,\nglobal.w = 0)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/data/geospatial/MPSZ-2019.html",
    "href": "Take_Home_Ex/Take_Home_Ex03/data/geospatial/MPSZ-2019.html",
    "title": "Kelly's IS415 GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html#installing-and-loading-the-r-packages",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html#installing-and-loading-the-r-packages",
    "title": "Take-Home Exercise 3: Predicting HDB Public Housing Resale Pricies using Geographically Weighted Methods",
    "section": "3.1 Installing and Loading the R packages",
    "text": "3.1 Installing and Loading the R packages\n\npacman::p_load(olsrr, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary, SpatialML,rsample,Metrics, jsonlite,httr,rvest,sp)\n\nThe R packages installed that we will be using for analysis are:\n**(to be completed)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html#importing-aspatial-data",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html#importing-aspatial-data",
    "title": "Take-Home Exercise 3: Predicting HDB Public Housing Resale Pricies using Geographically Weighted Methods",
    "section": "4.1 Importing Aspatial Data",
    "text": "4.1 Importing Aspatial Data\n\nImport Data\n\nresale <- read_csv(\"data/aspatial/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\n\nDisplay Data\n\nglimpse(resale)\n\nRows: 148,000\nColumns: 11\n$ month               <chr> \"2017-01\", \"2017-01\", \"2017-01\", \"2017-01\", \"2017-…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"406\", \"108\", \"602\", \"465\", \"601\", \"150\", \"447\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 4\", \"ANG MO K…\n$ storey_range        <chr> \"10 TO 12\", \"01 TO 03\", \"01 TO 03\", \"04 TO 06\", \"0…\n$ floor_area_sqm      <dbl> 44, 67, 67, 68, 67, 68, 68, 67, 68, 67, 68, 67, 67…\n$ flat_model          <chr> \"Improved\", \"New Generation\", \"New Generation\", \"N…\n$ lease_commence_date <dbl> 1979, 1978, 1980, 1980, 1980, 1981, 1979, 1976, 19…\n$ remaining_lease     <chr> \"61 years 04 months\", \"60 years 07 months\", \"62 ye…\n$ resale_price        <dbl> 232000, 250000, 262000, 265000, 265000, 275000, 28…\n\n\n\nFrom the results above, we can tell that:\n\nThe dataset contains 11 columns with 148,000 rows in total.\nThe timeframe of the dataset is from 2017 January to 2023 February up to date.\nThe columns that are present in the data are: month, town, flat_type, block, street_name, storey_range, floor_area_sqm, flat_model, lease_commence_date, remaining_lease, resale_price.\n\nIn this take-home assignment, I selected HDB 4-room flat resale prices to analyse during the transaction period from 1st January 2021 to 31st December 2022. Therefore, we will need to filter and only extract data during this period of time frame.\n\n4.1.1 Filter Resale Data (ONLY interested transaction period)\n\nFilter Data\n\nrs_subset <-  filter(resale,flat_type == \"4 ROOM\") %>% \n              filter(month >= \"2021-01\" & month <= \"2022-12\")\n\nDisplay Date\n\nglimpse(rs_subset)\n\nRows: 23,657\nColumns: 11\n$ month               <chr> \"2021-01\", \"2021-01\", \"2021-01\", \"2021-01\", \"2021-…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"4 ROOM\", \"4 ROOM\", \"4 ROOM\", \"4 ROOM\", \"4 ROOM\", …\n$ block               <chr> \"547\", \"414\", \"509\", \"467\", \"571\", \"134\", \"204\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 10\", \"ANG MO …\n$ storey_range        <chr> \"04 TO 06\", \"01 TO 03\", \"01 TO 03\", \"07 TO 09\", \"0…\n$ floor_area_sqm      <dbl> 92, 92, 91, 92, 92, 98, 92, 92, 92, 92, 92, 109, 9…\n$ flat_model          <chr> \"New Generation\", \"New Generation\", \"New Generatio…\n$ lease_commence_date <dbl> 1981, 1979, 1980, 1979, 1979, 1978, 1977, 1978, 19…\n$ remaining_lease     <chr> \"59 years\", \"57 years 09 months\", \"58 years 06 mon…\n$ resale_price        <dbl> 370000, 375000, 380000, 385000, 410000, 410000, 41…\n\n\n\nFrom the results above, we can tell that:\n\nWe have successfully filtered our data based on earlier chosen HDB model flat and transaction period!\nFrom January 2021 to December 2022, there are 23,657 transactions for 4-room flat in Singapore.\n\n\n\n4.1.2 Transform Resale Data\nAfter we have extracted the rows of transactions we are interested in, we will then proceed to use mutate function of dplyr package to create new variables (columns) in a data frame by applying some transformations to the existing columns.\nWhat we will need to do is:\n\naddress: concatenation of the block and street_name columns using paste() function of base R package.\nremaining_lease_yr & remaining_lease_mnth: Split the year and months part of the remaining_lease respectively using str_sub() function of stringr package then converting the character to integer using as.integer() function of base R package.\nAfter performing mutate function, we will store the new data in rs_transform.\n\n\nrs_transform <- rs_subset %>%\n  mutate(rs_subset, address = paste(block,street_name)) %>%\n  mutate(rs_subset, remaining_lease_yr = as.integer(str_sub(remaining_lease, 0, 2))) %>%\n  mutate(rs_subset, remaining_lease_mnth = as.integer(str_sub(remaining_lease, 9, 11)))\n\nAfter we have successfully added the three variables (address, remaining_lease_yr, and remaining_lease_mnth) into a new data named rs_transform, we will see some NA values in the remaining_lease_mnth column. Therefore, we will need to replace those with a value of 0 using is.na() function of base R package.\n\nrs_transform$remaining_lease_mnth[is.na(rs_transform$remaining_lease_mnth)] <- 0\nrs_transform\n\n# A tibble: 23,657 × 14\n   month   town    flat_…¹ block stree…² store…³ floor…⁴ flat_…⁵ lease…⁶ remai…⁷\n   <chr>   <chr>   <chr>   <chr> <chr>   <chr>     <dbl> <chr>     <dbl> <chr>  \n 1 2021-01 ANG MO… 4 ROOM  547   ANG MO… 04 TO …      92 New Ge…    1981 59 yea…\n 2 2021-01 ANG MO… 4 ROOM  414   ANG MO… 01 TO …      92 New Ge…    1979 57 yea…\n 3 2021-01 ANG MO… 4 ROOM  509   ANG MO… 01 TO …      91 New Ge…    1980 58 yea…\n 4 2021-01 ANG MO… 4 ROOM  467   ANG MO… 07 TO …      92 New Ge…    1979 57 yea…\n 5 2021-01 ANG MO… 4 ROOM  571   ANG MO… 07 TO …      92 New Ge…    1979 57 yea…\n 6 2021-01 ANG MO… 4 ROOM  134   ANG MO… 07 TO …      98 New Ge…    1978 56 yea…\n 7 2021-01 ANG MO… 4 ROOM  204   ANG MO… 07 TO …      92 New Ge…    1977 55 yea…\n 8 2021-01 ANG MO… 4 ROOM  429   ANG MO… 04 TO …      92 New Ge…    1978 56 yea…\n 9 2021-01 ANG MO… 4 ROOM  413   ANG MO… 10 TO …      92 New Ge…    1979 57 yea…\n10 2021-01 ANG MO… 4 ROOM  415   ANG MO… 07 TO …      92 New Ge…    1979 57 yea…\n# … with 23,647 more rows, 4 more variables: resale_price <dbl>, address <chr>,\n#   remaining_lease_yr <int>, remaining_lease_mnth <dbl>, and abbreviated\n#   variable names ¹​flat_type, ²​street_name, ³​storey_range, ⁴​floor_area_sqm,\n#   ⁵​flat_model, ⁶​lease_commence_date, ⁷​remaining_lease\n\n\nNow, as we scroll to the remaining_lease_mnth column, we noticed all initial “NA” values have been replaced by 0!\nNext, we do not want to segregate the remaining lease in years and months columns. Instead, we could convert the remaining_lease_yr to months unit and create a new column call total_remaining_lease for easier analysis later using mutate function of dplyr package which contains the summation of the remaining_lease_yr and remaining_lease_mnth using rowSum() function of base R package.\n\nMultiply remaining_lease_yr column in months unit\n\nrs_transform$remaining_lease_yr <- rs_transform$remaining_lease_yr * 12\n\nCreate a new column: total_remaining_lease to contain the summation of yr and mnth\n\nrs_transform <- rs_transform %>% \n  mutate(rs_transform, total_remaining_lease = rowSums(rs_transform[, c(\"remaining_lease_yr\", \"remaining_lease_mnth\")])) %>%\n  select(month, town, address, block, street_name, flat_type, storey_range, floor_area_sqm, flat_model, \n         lease_commence_date, total_remaining_lease, resale_price)\n\nDisplay head of data\n\nhead(rs_transform)\n\n# A tibble: 6 × 12\n  month   town     address block stree…¹ flat_…² store…³ floor…⁴ flat_…⁵ lease…⁶\n  <chr>   <chr>    <chr>   <chr> <chr>   <chr>   <chr>     <dbl> <chr>     <dbl>\n1 2021-01 ANG MO … 547 AN… 547   ANG MO… 4 ROOM  04 TO …      92 New Ge…    1981\n2 2021-01 ANG MO … 414 AN… 414   ANG MO… 4 ROOM  01 TO …      92 New Ge…    1979\n3 2021-01 ANG MO … 509 AN… 509   ANG MO… 4 ROOM  01 TO …      91 New Ge…    1980\n4 2021-01 ANG MO … 467 AN… 467   ANG MO… 4 ROOM  07 TO …      92 New Ge…    1979\n5 2021-01 ANG MO … 571 AN… 571   ANG MO… 4 ROOM  07 TO …      92 New Ge…    1979\n6 2021-01 ANG MO … 134 AN… 134   ANG MO… 4 ROOM  07 TO …      98 New Ge…    1978\n# … with 2 more variables: total_remaining_lease <dbl>, resale_price <dbl>, and\n#   abbreviated variable names ¹​street_name, ²​flat_type, ³​storey_range,\n#   ⁴​floor_area_sqm, ⁵​flat_model, ⁶​lease_commence_date\n\n\n\nUpon inspection of the rs_transform, we now only left with one column: total_remaining_lease that contains all the remaining lease in months!\n\n\n4.1.3 Retrieve Postal Codes and Coordinates of Addresses\nIn this section, we will focus on retrieving the relevant data like postal codes and coordinates of the address which is required to get the proximity to locational factors in the later parts.\nHere are the steps to add its longitude and latitude features with OneMapSG API!\nStep 1: Create a list storing unique addresses\n\nadd_list <- sort(unique(rs_transform$address))\n\nStep 2: Create function to retrieve coordinates from OneMapSG API\n(Add explanation of code here)\n\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n\n    r <- GET('https://developers.onemap.sg/commonapi/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    \n    # Send a GET request to OneMap API with address as searchVal,\n    # returnGeom as 'Y' to retrieve the coordinates, and getAddrDetails as 'Y' to retrieve the postal code\n\n    \n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Extract the 'found' and 'results' fields from the API reponses\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, postal = postal, latitude = lat, longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, postal = NA, latitude = NA, longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, postal = postal, latitude = lat, longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, postal = NA, latitude = NA, longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n\nStep 3: Call get_coords function to retrieve resale coordinates\n\ncoords <- get_coords(add_list)\n\n\ncoords$postal[is.na(coords$postal)]\n\ncharacter(0)\n\ncoords$latitude[is.na(coords$latitude)]\n\ncharacter(0)\n\ncoords$longitude[is.na(coords$longitude)]\n\ncharacter(0)\n\n\nStep 4: Combine resale and coordinates data\n\nrs_coords <- left_join(rs_transform, coords, by = c('address' = 'address'))\n\nStep 5: Write file to rds\nNow that out subset resale dataset is completed with the coordinates, we can now save it as an rds file!\n\nrs_coords_rds <- write_rds(rs_coords, \"data/aspatial/rds/rs_coords.rds\")\n\n\nrs_coords <- read_rds(\"data/aspatial/rds/rs_coords.rds\")\n\n\nrs_coords_sf <- st_as_sf(rs_coords,\n                    coords = c(\"longitude\", \n                               \"latitude\"),\n                    crs=4326) %>%\n  st_transform(crs = 3414)\n\n\nlength(which(st_is_valid(rs_coords_sf) == FALSE))\n\n[1] 0\n\n\n\ntmap_mode(\"view\")\ntm_shape(rs_coords_sf)+\n  tm_dots(col=\"red\", size = 0.02)\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html#locational-factors-with-geographic-coordinates",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html#locational-factors-with-geographic-coordinates",
    "title": "Take-Home Exercise 3: Predicting HDB Public Housing Resale Pricies using Geographically Weighted Methods",
    "section": "5.1 Locational Factors with Geographic Coordinates",
    "text": "5.1 Locational Factors with Geographic Coordinates\nStep 1: Read and check CRS of locational factors\n\nhawker_sf <- st_read(\"data/geospatial/hawker-centres/hawker-centres-geojson.geojson\")\n\nReading layer `hawker-centres-geojson' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial\\hawker-centres\\hawker-centres-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 125 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449217\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nelder_sf <- st_read(dsn = \"data/geospatial/eldercare-services\", layer=\"ELDERCARE\")\n\nReading layer `ELDERCARE' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial\\eldercare-services' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21\n\nbus_sf <- st_read(dsn = \"data/geospatial/BusStopLocation\", layer=\"BusStop\")\n\nReading layer `BusStop' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial\\BusStopLocation' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5159 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nst_crs(hawker_sf)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\nst_crs(elder_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nst_crs(bus_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nStep 2: Assign EPSG code to sf dataframe and check again\n\nelder_sf <- st_set_crs(elder_sf, 3414)\nbus_sf <- st_set_crs(bus_sf, 3414)\n\nhawker_sf <- hawker_sf %>%\n  st_transform(crs = 3414)\n\n\nst_crs(hawker_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(elder_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(bus_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nStep 3: Check for invalid geometries\n\nlength(which(st_is_valid(elder_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(hawker_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(bus_sf) == FALSE))\n\n[1] 0"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html#proximity-distance-calculation",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html#proximity-distance-calculation",
    "title": "Take-Home Exercise 3: Predicting HDB Public Housing Resale Pricies using Geographically Weighted Methods",
    "section": "5.2 Proximity Distance Calculation",
    "text": "5.2 Proximity Distance Calculation\nStep 1: Create get_prox function to calculate proximity\n\nget_prox <- function(df1, df2, varname){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(df1, df2)           \n  \n  # find the nearest location_factor and create new data frame\n  near <- df1 %>% \n    mutate(PROX = apply(dist_matrix, 1, function(x) min(x)) / 1000) \n  \n  # rename column name according to input parameter\n  names(near)[names(near) == 'PROX'] <- varname\n\n  # Return df\n  return(near)\n}\n\nStep 2: Call get_prox function\n\nrs_coords_sf <- get_prox(rs_coords_sf, elder_sf, \"PROX_ELDERLYCARE\") \nrs_coords_sf <- get_prox(rs_coords_sf, hawker_sf, \"PROX_HAWKER\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html#count-the-number-of-locational-factors-within-the-proximity",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03.html#count-the-number-of-locational-factors-within-the-proximity",
    "title": "Take-Home Exercise 3: Predicting HDB Public Housing Resale Pricies using Geographically Weighted Methods",
    "section": "5.3 Count the number of locational factors within the proximity",
    "text": "5.3 Count the number of locational factors within the proximity\nStep 1: Create get_within function to calculate no.of factors within distance\n\nget_within <- function(df1, df2, threshold_dist, varname){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(df1, df2)   \n  \n  # count the number of location_factors within threshold_dist and create new data frame\n  wdist <- df1 %>% \n    mutate(WITHIN_DT = apply(dist_matrix, 1, function(x) sum(x <= threshold_dist)))\n  \n  # rename column name according to input parameter\n  names(wdist)[names(wdist) == 'WITHIN_DT'] <- varname\n\n  # Return df\n  return(wdist)\n}\n\nStep 2: Call get_within function\n\nrs_coords_sf <- get_within(rs_coords_sf, bus_sf, 350, \"WITHIN_350M_BUS\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html",
    "title": "Take_Home_Ex03_Updated",
    "section": "",
    "text": "Housing is an essential component of household wealth worldwide. Buying a housing has always been a major investment for most people. The price of housing is affected by many factors. Some of them are global in nature such as the general economy of a country or inflation rate. Others can be more specific to the properties themselves. These factors can be further divided to structural and locational factors. Structural factors are variables related to the property themselves such as the size, fitting, and tenure of the property. Locational factors are variables related to the neighbourhood of the properties such as proximity to childcare centre, public transport service and shopping centre.\n\nConventional, housing resale prices predictive models were built by using Ordinary Least Square (OLS) method. However, this method failed to take into consideration that spatial autocorrelation and spatial heterogeneity exist in geographic data sets such as housing transactions. With the existence of spatial autocorrelation, the OLS estimation of predictive housing resale pricing models could lead to biased, inconsistent, or inefficient results (Anselin 1998). In view of this limitation, Geographical Weighted Models were introduced for calibrating predictive model for housing resale prices.\n\n\nIn this take-home exercise, we are tasked to predict HDB resale prices at the sub-market level (i.e. HDB 3-room, HDB 4-room and HDB 5-room) for the month of January and February 2023 in Singapore. The predictive models must be built by using by using conventional OLS method and GWR methods. We are also required to compare the performance of the conventional OLS method versus the geographical weighted methods."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#installing-and-loading-the-r-packages",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#installing-and-loading-the-r-packages",
    "title": "Take_Home_Ex03_Updated",
    "section": "3.1 Installing and Loading the R packages",
    "text": "3.1 Installing and Loading the R packages\n\npacman::p_load(olsrr, sf, sfdep, GWmodel, tmap, tidyverse, gtsummary, SpatialML,rsample,Metrics, jsonlite,httr,rvest,sp)\n\nThe R packages installed that we will be using for take-home assignment 3 are:\n\nsf: used for importing, managing, and processing geospatial data\ntmap: used for creating thematic maps, such as choropleth and bubble maps\ntidyverse: a collection of packages for data science tasks\nsfdep: An interface for ‘spdep’ to integrate with ‘sf’ objects and the ‘tidyverse’\nplotly: used for creating interactive and dynamic visualisations in R\nolsrr: designed for use with ordinary least squares (OLS) regression\nGWmodel: (TO CONTINUEEEE)"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#importing-aspatial-data",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#importing-aspatial-data",
    "title": "Take_Home_Ex03_Updated",
    "section": "4.1 Importing Aspatial Data",
    "text": "4.1 Importing Aspatial Data\n\nresale <- read_csv(\"data/aspatial/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\n\nFrom the results above, we can tell that:\n\nThe dataset contains 11 columns with 148,000 rows in total.\nThe timeframe of the dataset is from 2017 January to 2023 February up to date (from the review of dataset).\nThe columns that are present in the data are: month, town, flat_type, block, street_name, storey_range, floor_area_sqm, flat_model, lease_commence_date, remaining_lease, resale_price (from the review of dataset).\n\nIn this take-home assignment, I selected HDB 4-room flat resale prices to analyse during the transaction period from 1st January 2021 to 31st December 2022. Therefore, we will need to filter and only extract data during this period of time frame.\n\n4.1.1 Filter Resale Data\nAs mentioned in the previous section of 4.1, we are only interested in (1) HDB 4-room flat resale prices during the period of (2) 1st January 2021 to 31st December 2022. Let’s filter them!\n\nrs_subset <-  filter(resale,flat_type == \"4 ROOM\") %>% \n              filter(month >= \"2021-01\" & month <= \"2022-12\")\n\nFrom the results above, we can tell that:\n\nWe have successfully filtered our data based on earlier chosen HDB model flat and transaction period!\nFrom January 2021 to December 2022, there are 23,657 transactions for 4-room flat in Singapore.\n\nAdditionally, we will need to extract another data set for our testing model which is between the period of January 2023 to February 2023.\n\nrs_subset_test <-  filter(resale,flat_type == \"4 ROOM\") %>% \n              filter(month >= \"2023-01\" & month <= \"2023-02\")\n\nFrom the results above, we can tell that:\n\nWe have successfully filtered our test data as well!\nFrom January 2023 to February 2023, there are 1848 transactions for 4-room flat in Singapore.\n\n\n\n4.1.2 Transform Resale Data\nAfter we have extracted the rows of transactions we are interested in, we will then proceed to use mutate function of dplyr package to create new variables (columns) in a data frame by applying some transformations to the existing columns.\nWhat we will need to do is:\n\naddress: concatenation of the block and street_name columns using paste() function of base R package.\nremaining_lease_yr & remaining_lease_mnth: Split the year and months part of the remaining_lease respectively using str_sub() function of stringr package then converting the character to integer using as.integer() function of base R package.\nAfter performing mutate function, we will store the new data in rs_transform.\n\n\nrs_transform <- rs_subset %>%\n  mutate(rs_subset, address = paste(block,street_name)) %>%\n  mutate(rs_subset, remaining_lease_yr = as.integer(str_sub(remaining_lease, 0, 2))) %>%\n  mutate(rs_subset, remaining_lease_mnth = as.integer(str_sub(remaining_lease, 9, 11)))\n\nAfter we have successfully added the three variables (address, remaining_lease_yr, and remaining_lease_mnth) into a new data named rs_transform, we will see some NA values in the remaining_lease_mnth column. Therefore, we will need to replace those with a value of 0 using is.na() function of base R package.\n\nrs_transform$remaining_lease_mnth[is.na(rs_transform$remaining_lease_mnth)] <- 0\nrs_transform\n\n# A tibble: 23,657 × 14\n   month   town    flat_…¹ block stree…² store…³ floor…⁴ flat_…⁵ lease…⁶ remai…⁷\n   <chr>   <chr>   <chr>   <chr> <chr>   <chr>     <dbl> <chr>     <dbl> <chr>  \n 1 2021-01 ANG MO… 4 ROOM  547   ANG MO… 04 TO …      92 New Ge…    1981 59 yea…\n 2 2021-01 ANG MO… 4 ROOM  414   ANG MO… 01 TO …      92 New Ge…    1979 57 yea…\n 3 2021-01 ANG MO… 4 ROOM  509   ANG MO… 01 TO …      91 New Ge…    1980 58 yea…\n 4 2021-01 ANG MO… 4 ROOM  467   ANG MO… 07 TO …      92 New Ge…    1979 57 yea…\n 5 2021-01 ANG MO… 4 ROOM  571   ANG MO… 07 TO …      92 New Ge…    1979 57 yea…\n 6 2021-01 ANG MO… 4 ROOM  134   ANG MO… 07 TO …      98 New Ge…    1978 56 yea…\n 7 2021-01 ANG MO… 4 ROOM  204   ANG MO… 07 TO …      92 New Ge…    1977 55 yea…\n 8 2021-01 ANG MO… 4 ROOM  429   ANG MO… 04 TO …      92 New Ge…    1978 56 yea…\n 9 2021-01 ANG MO… 4 ROOM  413   ANG MO… 10 TO …      92 New Ge…    1979 57 yea…\n10 2021-01 ANG MO… 4 ROOM  415   ANG MO… 07 TO …      92 New Ge…    1979 57 yea…\n# … with 23,647 more rows, 4 more variables: resale_price <dbl>, address <chr>,\n#   remaining_lease_yr <int>, remaining_lease_mnth <dbl>, and abbreviated\n#   variable names ¹​flat_type, ²​street_name, ³​storey_range, ⁴​floor_area_sqm,\n#   ⁵​flat_model, ⁶​lease_commence_date, ⁷​remaining_lease\n\n\nNow, as we scroll to the remaining_lease_mnth column, we noticed all initial “NA” values have been replaced by 0!\nNext, we do not want to segregate the remaining lease in years and months columns. Instead, we could convert the remaining_lease_yr to months unit and create a new column call total_remaining_lease for easier analysis later using mutate function of dplyr package which contains the summation of the remaining_lease_yr and remaining_lease_mnth using rowSum() function of base R package. Here is how we do it!\n\n# Multiply remaining_lease_yr column in months unit\nrs_transform$remaining_lease_yr <- rs_transform$remaining_lease_yr * 12\n\n# Create a new column: total_remaining_lease to contain the summation of yr and mnth\nrs_transform <- rs_transform %>% \n  mutate(rs_transform, total_remaining_lease = rowSums(rs_transform[, c(\"remaining_lease_yr\", \"remaining_lease_mnth\")])) %>%\n  select(month, town, address, block, street_name, flat_type, storey_range, floor_area_sqm, flat_model, \n         lease_commence_date, total_remaining_lease, resale_price)\n\n# Display head of data\nhead(rs_transform)\n\n# A tibble: 6 × 12\n  month   town     address block stree…¹ flat_…² store…³ floor…⁴ flat_…⁵ lease…⁶\n  <chr>   <chr>    <chr>   <chr> <chr>   <chr>   <chr>     <dbl> <chr>     <dbl>\n1 2021-01 ANG MO … 547 AN… 547   ANG MO… 4 ROOM  04 TO …      92 New Ge…    1981\n2 2021-01 ANG MO … 414 AN… 414   ANG MO… 4 ROOM  01 TO …      92 New Ge…    1979\n3 2021-01 ANG MO … 509 AN… 509   ANG MO… 4 ROOM  01 TO …      91 New Ge…    1980\n4 2021-01 ANG MO … 467 AN… 467   ANG MO… 4 ROOM  07 TO …      92 New Ge…    1979\n5 2021-01 ANG MO … 571 AN… 571   ANG MO… 4 ROOM  07 TO …      92 New Ge…    1979\n6 2021-01 ANG MO … 134 AN… 134   ANG MO… 4 ROOM  07 TO …      98 New Ge…    1978\n# … with 2 more variables: total_remaining_lease <dbl>, resale_price <dbl>, and\n#   abbreviated variable names ¹​street_name, ²​flat_type, ³​storey_range,\n#   ⁴​floor_area_sqm, ⁵​flat_model, ⁶​lease_commence_date\n\n\nUpon inspection of the rs_transform, we now only left with one column: total_remaining_lease that contains all the remaining lease in months!\n\n\n4.1.3 Retrieve Postal Codes and Coordinates of Addresses\nIn this section, we will focus on retrieving the relevant data like postal codes and coordinates of the address which is required to get the proximity to locational factors in the later parts.\nHere are the steps to add its longitude and latitude features with OneMapSG API!\nStep 1: Create a list storing unique addresses\n\nadd_list <- sort(unique(rs_transform$address))\n\nStep 2: Create function to retrieve coordinates from OneMapSG API\n\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n\n    r <- GET('https://developers.onemap.sg/commonapi/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    \n    # Send a GET request to OneMap API with address as searchVal,\n    # returnGeom as 'Y' to retrieve the coordinates, and getAddrDetails as 'Y' to retrieve the postal code\n\n    \n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Extract the 'found' and 'results' fields from the API reponses\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, postal = postal, latitude = lat, longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, postal = NA, latitude = NA, longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, postal = postal, latitude = lat, longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, postal = NA, latitude = NA, longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n\nStep 3: Call get_coords function to retrieve resale coordinates\n\ncoords <- get_coords(add_list)\n\n\n\n4.1.4 Combine Resale and Coordinates Data\nAfter we have done retrieving the location coordinates of all the resale HDBs, we need to now combine our resale data (rs_transform) earlier with the coordinates data (coords) using left_join() function.\n\nrs_coords <- left_join(rs_transform, coords, by = c('address' = 'address'))\n\nGreat! We have successfully joined the two data sets and now let’s write the file to our rds folder!\n\nrs_coords_rds <- write_rds(rs_coords, \"data/rds/rs_coords.rds\")\n\nNow, let’s read rs_coords RDS file:\n\nrs_coords <- read_rds(\"data/rds/rs_coords.rds\")\n\n\n\n4.1.5 Assign and Transform CRS and Check\nThe coordinate columns (latitude, longitude) are currently in decimal degrees, the projected CRS will be WGS84. We will need to convert it into a spatial data frame with projected coordinates of 3414.\n\nrs_coords_sf <- st_as_sf(rs_coords,\n                    coords = c(\"longitude\", \n                               \"latitude\"),\n                    crs=4326) %>%\n  st_transform(crs = 3414)\n\n\nst_crs(rs_coords_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n4.1.5.1 Check for Invalid Geometries\n\nlength(which(st_is_valid(rs_coords_sf) == FALSE))\n\n[1] 0\n\n\nWe have no invalid geometries! Now, let’s plot hdb resale points\n\ntmap_mode(\"view\")\ntm_shape(rs_coords_sf)+\n  tm_dots(col=\"red\", size = 0.02)\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#import-all-locational-factors-data-sets",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#import-all-locational-factors-data-sets",
    "title": "Take_Home_Ex03_Updated",
    "section": "5.1 Import ALL Locational Factors Data Sets",
    "text": "5.1 Import ALL Locational Factors Data Sets\nIn this section, we will read and process all the locational factors data as they are important in determining the HDB resale prices as we believe good location with good amenities will have a higher resale price and vice versa.\nFirstly, we will need to read and check CRS of all locational factors!\n\n#geojson files\nhawker_sf <- st_read(\"data/geospatial_locational_GC/hawker-centres/hawker-centres-geojson.geojson\")\n\nReading layer `hawker-centres-geojson' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial_locational_GC\\hawker-centres\\hawker-centres-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 125 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449217\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nsupermarket_sf <- st_read(\"data/geospatial_locational_GC/supermarkets/supermarkets-geojson.geojson\")\n\nReading layer `supermarkets-geojson' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial_locational_GC\\supermarkets\\supermarkets-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 526 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6258 ymin: 1.24715 xmax: 104.0036 ymax: 1.461526\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nstudent_sf <- st_read(\"data/geospatial_locational_GC/student-care-services/student-care-services-geojson.geojson\")\n\nReading layer `student-care-services-geojson' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial_locational_GC\\student-care-services\\student-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 425 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6877 ymin: 1.27474 xmax: 103.963 ymax: 1.456667\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\ndengue_sf <- st_read(\"data/geospatial_locational_GC/dengue-clusters/dengue-clusters-geojson.geojson\")\n\nReading layer `dengue-clusters-geojson' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial_locational_GC\\dengue-clusters\\dengue-clusters-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 15 features and 2 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 103.7058 ymin: 1.275541 xmax: 103.9008 ymax: 1.383897\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\ntrain_sf <- st_read(\"data/geospatial_locational_GC/mrtstation/lta-mrt-station-exit-geojson.geojson\")\n\nReading layer `lta-mrt-station-exit-geojson' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial_locational_GC\\mrtstation\\lta-mrt-station-exit-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 474 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6368 ymin: 1.264972 xmax: 103.9893 ymax: 1.449157\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n#shp files\nelder_sf <- st_read(dsn = \"data/geospatial_locational_GC/eldercare-services\", layer=\"ELDERCARE\")\n\nReading layer `ELDERCARE' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial_locational_GC\\eldercare-services' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21\n\nbus_sf <- st_read(dsn = \"data/geospatial_locational_GC/BusStopLocation\", layer=\"BusStop\")\n\nReading layer `BusStop' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial_locational_GC\\BusStopLocation' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5159 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\nkindergarten_sf <- st_read(dsn = \"data/geospatial_locational_GC/kindergartens\", layer=\"KINDERGARTENS\")\n\nReading layer `KINDERGARTENS' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial_locational_GC\\kindergartens' \n  using driver `ESRI Shapefile'\nSimple feature collection with 448 features and 15 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11909.7 ymin: 25596.33 xmax: 43395.47 ymax: 48562.06\nProjected CRS: SVY21\n\n#csv file\nmall_sf <- read_csv(\"data/geospatial_locational_GC/Mall-Coordinates/mall_coordinates_updated.csv\")\n\n#kml file\npark_sf <- st_read(\"data/geospatial_locational_GC/parks/parks.kml\")\n\nReading layer `NATIONALPARKS_New' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\Take_Home_Ex\\Take_Home_Ex03\\data\\geospatial_locational_GC\\parks\\parks.kml' \n  using driver `KML'\nSimple feature collection with 421 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6929 ymin: 1.214491 xmax: 104.0538 ymax: 1.462094\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nFrom the results above, we can see that the datasets are all in different CRS:\n\nThe datasets with WGS84 are:\n\nhawker_sf, supermarket_sf, student_sf, dengue_sf, park_sf,train_sf\nAs the EPSG code are in 4326 which is the appropriate EPSG code for WGS84, we will only need to transform the CRS later on\n\nThe datasets with SVY21 are:\n\nelder_sf, train_sf, bus_sf, kindergarten_sf\nFor all of these datasets with SVY21 ???\n\nThe dataset read in csv????"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#transform-all-data-to-crs-epsg-3414",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#transform-all-data-to-crs-epsg-3414",
    "title": "Take_Home_Ex03_Updated",
    "section": "5.2 Transform all Data to CRS EPSG 3414",
    "text": "5.2 Transform all Data to CRS EPSG 3414\n\nTransform Data to EPSG 3414\n\nelder_sf <- st_set_crs(elder_sf, 3414)\ntrain_sf <- st_set_crs(train_sf, 3414)\nbus_sf <- st_set_crs(bus_sf, 3414)\nkindergarten_sf <- st_set_crs(kindergarten_sf, 3414)\n\nhawker_sf <- hawker_sf %>%\n  st_transform(crs = 3414)\nsupermarket_sf <- supermarket_sf %>%\n  st_transform(crs = 3414)\nstudent_sf <- student_sf %>%\n  st_transform(crs = 3414)\ndengue_sf <- dengue_sf %>%\n  st_transform(crs = 3414)\npark_sf <- park_sf %>%\n  st_transform(crs = 3414)\n\nst_crs\n\nst_crs(elder_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(train_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(bus_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(kindergarten_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(hawker_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(supermarket_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(student_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(dengue_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(park_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nFrom the above results, we can see that the EPSG code of all the data has now been assigned correctly and they are all EPSG 3414.\n\n5.2.1 Check for Invalid Geometries\nSince all the datasets above have been converted to the appropraite EPSG, we should also check for any invalid geometries to avoid any issues when calculating proximity or plot the map.\n\nlength(which(st_is_valid(elder_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(train_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(bus_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(kindergarten_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(hawker_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(supermarket_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(student_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(dengue_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(park_sf) == FALSE))\n\n[1] 0\n\n\nFrom the results above, we can see that there are no invalid geometries for all the locational factors! That means we can move on to calculate proximity."
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#calculate-proximity",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#calculate-proximity",
    "title": "Take_Home_Ex03_Updated",
    "section": "5.3 Calculate Proximity",
    "text": "5.3 Calculate Proximity\n\n5.3.1 Create get_prox Function to Calculate Proximity\n\nget_prox <- function(df1, df2, varname){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(df1, df2)           \n  \n  # find the nearest location_factor and create new data frame\n  near <- df1 %>% \n    mutate(PROX = apply(dist_matrix, 1, function(x) min(x)) / 1000) \n  \n  # rename column name according to input parameter\n  names(near)[names(near) == 'PROX'] <- varname\n\n  # Return df\n  return(near)\n}\n\n\n\n5.3.1 Call Get_Prox Function\n\nrs_coords_sf <- get_prox(rs_coords_sf, elder_sf, \"PROX_ELDERLYCARE\") \nrs_coords_sf <- get_prox(rs_coords_sf, train_sf, \"PROX_TRAIN\") \nrs_coords_sf <- get_prox(rs_coords_sf, bus_sf, \"PROX_BUS\") \nrs_coords_sf <- get_prox(rs_coords_sf, kindergarten_sf, \"PROX_KINDERGARTEN\") \nrs_coords_sf <- get_prox(rs_coords_sf, hawker_sf, \"PROX_HAWKER\")\nrs_coords_sf <- get_prox(rs_coords_sf, supermarket_sf, \"PROX_SUPERMARKET\")\nrs_coords_sf <- get_prox(rs_coords_sf, student_sf, \"PROX_STUDENT\")\nrs_coords_sf <- get_prox(rs_coords_sf, dengue_sf, \"PROX_DENGUE\")\nrs_coords_sf <- get_prox(rs_coords_sf, park_sf, \"PROX_PARK\")\n\n5.3.1 Create get_within Function to Calculate factors that are within declared distance\n\nget_within <- function(df1, df2, threshold_dist, varname){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(df1, df2)   \n  \n  # count the number of location_factors within threshold_dist and create new data frame\n  wdist <- df1 %>% \n    mutate(WITHIN_DT = apply(dist_matrix, 1, function(x) sum(x <= threshold_dist)))\n  \n  # rename column name according to input parameter\n  names(wdist)[names(wdist) == 'WITHIN_DT'] <- varname\n\n  # Return df\n  return(wdist)\n}\n\n5.3.2 Call get_within Function\n\nrs_coords_sf <- get_within(rs_coords_sf, kindergarten_sf, 350, \"WITHIN_350M_KINDERGARTEN\")\n\n\nrs_coords_sf <- get_within(rs_coords_sf, student_sf, 350, \"WITHIN_350M_CHILDCARE\")\n\n\nrs_coords_sf <- get_within(rs_coords_sf, bus_sf, 350, \"WITHIN_350M_BUS\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#cbd",
    "href": "Take_Home_Ex/Take_Home_Ex03/Take_Home_Ex03_Updated.html#cbd",
    "title": "Take_Home_Ex03_Updated",
    "section": "6.2 CBD",
    "text": "6.2 CBD\n6.3 Shopping Malls\n6.4 Primary Schools\n6.5 Good Primary Schools"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html",
    "href": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html",
    "title": "In_Class_Ex10",
    "section": "",
    "text": "pacman::p_load(tmap, SpatialAcc, sf, \n               ggstatsplot, reshape2,\n               tidyverse)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html#importing-geospatial-data",
    "href": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html#importing-geospatial-data",
    "title": "In_Class_Ex10",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_NO_SEA_PL\")\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nhexagons <- st_read(dsn = \"data/geospatial\", layer = \"hexagons\") \n\nReading layer `hexagons' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\n\n\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\") \n\nReading layer `ELDERCARE' from data source \n  `C:\\G2wongkelly\\IS415_GAA\\In_Class_Ex\\In_Class_Ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html#cleaning-and-updating-attribute-fields-of-the-geospatial-data",
    "href": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html#cleaning-and-updating-attribute-fields-of-the-geospatial-data",
    "title": "In_Class_Ex10",
    "section": "Cleaning and updating attribute fields of the geospatial data",
    "text": "Cleaning and updating attribute fields of the geospatial data\n\neldercare <- eldercare %>%\n  select(fid, ADDRESSPOS) %>%\n  mutate(capacity = 100)\n\n\nhexagons <- hexagons %>%\n  select(fid) %>%\n  mutate(demand = 100)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html#importing-distance-matrix",
    "href": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html#importing-distance-matrix",
    "title": "In_Class_Ex10",
    "section": "Importing Distance Matrix",
    "text": "Importing Distance Matrix\n\nODMatrix <- read_csv(\"data/aspatial/OD_Matrix.csv\", skip = 0)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html#tidying-distance-matrix",
    "href": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html#tidying-distance-matrix",
    "title": "In_Class_Ex10",
    "section": "Tidying distance matrix",
    "text": "Tidying distance matrix\n\ndistmat <- ODMatrix %>%\n  select(origin_id, destination_id, total_cost) %>%\n  spread(destination_id, total_cost)%>%\n  select(c(-c('origin_id')))\n\n\ndistmat_km <- as.matrix(distmat/1000)"
  },
  {
    "objectID": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html#computing-distance-matrix-optional",
    "href": "In_Class_Ex/In_Class_Ex10/In_Class_Ex10.html#computing-distance-matrix-optional",
    "title": "In_Class_Ex10",
    "section": "Computing Distance Matrix (Optional)",
    "text": "Computing Distance Matrix (Optional)\n\n#eldercare_coord <- st_coordinates(eldercare)\n#hexagon_coord <- st_coordinates(hexagon)\n\n\n#EucMatrix <- SpatialAcc:: distance(hexogon_coord,\n                                   #eldercare_coord,\n                                   #type = \"euclidean\")"
  }
]